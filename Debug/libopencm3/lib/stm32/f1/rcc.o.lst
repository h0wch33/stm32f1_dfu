   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	rcc_apb1_frequency
  16              		.section	.data.rcc_apb1_frequency,"aw"
  17              		.align	2
  20              	rcc_apb1_frequency:
  21 0000 00127A00 		.word	8000000
  22              		.global	rcc_apb2_frequency
  23              		.section	.data.rcc_apb2_frequency,"aw"
  24              		.align	2
  27              	rcc_apb2_frequency:
  28 0000 00127A00 		.word	8000000
  29              		.global	rcc_ahb_frequency
  30              		.section	.data.rcc_ahb_frequency,"aw"
  31              		.align	2
  34              	rcc_ahb_frequency:
  35 0000 00127A00 		.word	8000000
  36              		.global	rcc_hse_configs
  37              		.section	.rodata.rcc_hse_configs,"a"
  38              		.align	2
  41              	rcc_hse_configs:
  42 0000 04       		.byte	4
  43 0001 01       		.byte	1
  44 0002 00       		.byte	0
  45 0003 04       		.byte	4
  46 0004 00       		.byte	0
  47 0005 02       		.byte	2
  48 0006 02       		.byte	2
  49 0007 00       		.byte	0
  50 0008 00000000 		.space	8
  50      00000000 
  51 0010 00A24A04 		.word	72000000
  52 0014 00512502 		.word	36000000
  53 0018 00A24A04 		.word	72000000
  54 001c 07       		.byte	7
  55 001d 01       		.byte	1
  56 001e 00       		.byte	0
  57 001f 04       		.byte	4
  58 0020 00       		.byte	0
  59 0021 02       		.byte	2
  60 0022 02       		.byte	2
  61 0023 01       		.byte	1
  62 0024 00000000 		.space	8
  62      00000000 
  63 002c 00A24A04 		.word	72000000
  64 0030 00512502 		.word	36000000
  65 0034 00A24A04 		.word	72000000
  66 0038 07       		.byte	7
  67 0039 01       		.byte	1
  68 003a 00       		.byte	0
  69 003b 04       		.byte	4
  70 003c 00       		.byte	0
  71 003d 02       		.byte	2
  72 003e 02       		.byte	2
  73 003f 04       		.byte	4
  74 0040 01       		.byte	1
  75 0041 04       		.byte	4
  76 0042 06       		.byte	6
  77 0043 00       		.space	1
  78 0044 00       		.byte	0
  79 0045 000000   		.space	3
  80 0048 00A24A04 		.word	72000000
  81 004c 00512502 		.word	36000000
  82 0050 00A24A04 		.word	72000000
  83 0054 01       		.byte	1
  84 0055 01       		.byte	1
  85 0056 00       		.byte	0
  86 0057 00       		.byte	0
  87 0058 00       		.byte	0
  88 0059 00       		.byte	0
  89 005a 00       		.byte	0
  90 005b 00       		.byte	0
  91 005c 00000000 		.space	8
  91      00000000 
  92 0064 00366E01 		.word	24000000
  93 0068 00366E01 		.word	24000000
  94 006c 00366E01 		.word	24000000
  95 0070 07       		.byte	7
  96 0071 01       		.byte	1
  97 0072 00       		.byte	0
  98 0073 04       		.byte	4
  99 0074 00       		.byte	0
 100 0075 03       		.byte	3
 101 0076 02       		.byte	2
 102 0077 00       		.byte	0
 103 0078 00000000 		.space	8
 103      00000000 
 104 0080 00A24A04 		.word	72000000
 105 0084 00512502 		.word	36000000
 106 0088 00A24A04 		.word	72000000
 107              		.global	rcc_hsi_configs
 108              		.section	.rodata.rcc_hsi_configs,"a"
 109              		.align	2
 112              	rcc_hsi_configs:
 113 0000 04       		.byte	4
 114 0001 00       		.byte	0
 115 0002 00       		.byte	0
 116 0003 00       		.byte	0
 117 0004 00       		.byte	0
 118 0005 00       		.byte	0
 119 0006 00       		.byte	0
 120 0007 00       		.byte	0
 121 0008 00000000 		.space	8
 121      00000000 
 122 0010 00366E01 		.word	24000000
 123 0014 00366E01 		.word	24000000
 124 0018 00366E01 		.word	24000000
 125 001c 0A       		.byte	10
 126 001d 00       		.byte	0
 127 001e 00       		.byte	0
 128 001f 04       		.byte	4
 129 0020 00       		.byte	0
 130 0021 03       		.byte	3
 131 0022 01       		.byte	1
 132 0023 00       		.byte	0
 133 0024 00000000 		.space	4
 134 0028 01       		.byte	1
 135 0029 000000   		.space	3
 136 002c 006CDC02 		.word	48000000
 137 0030 00366E01 		.word	24000000
 138 0034 006CDC02 		.word	48000000
 139 0038 0E       		.byte	14
 140 0039 00       		.byte	0
 141 003a 00       		.byte	0
 142 003b 04       		.byte	4
 143 003c 00       		.byte	0
 144 003d 03       		.byte	3
 145 003e 02       		.byte	2
 146 003f 00       		.byte	0
 147 0040 00000000 		.space	8
 147      00000000 
 148 0048 0090D003 		.word	64000000
 149 004c 0048E801 		.word	32000000
 150 0050 0090D003 		.word	64000000
 151              		.section	.text.rcc_osc_ready_int_clear,"ax",%progbits
 152              		.align	1
 153              		.global	rcc_osc_ready_int_clear
 154              		.arch armv7-m
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	rcc_osc_ready_int_clear:
 161              	.LFB0:
 162              		.file 1 "../libopencm3/lib/stm32/f1/rcc.c"
   1:../libopencm3/lib/stm32/f1/rcc.c **** /** @defgroup rcc_file RCC peripheral API
   2:../libopencm3/lib/stm32/f1/rcc.c **** 
   3:../libopencm3/lib/stm32/f1/rcc.c **** @ingroup peripheral_apis
   4:../libopencm3/lib/stm32/f1/rcc.c **** 
   5:../libopencm3/lib/stm32/f1/rcc.c **** @brief <b>libopencm3 STM32F1xx Reset and Clock Control</b>
   6:../libopencm3/lib/stm32/f1/rcc.c **** 
   7:../libopencm3/lib/stm32/f1/rcc.c **** @version 1.0.0
   8:../libopencm3/lib/stm32/f1/rcc.c **** 
   9:../libopencm3/lib/stm32/f1/rcc.c **** @author @htmlonly &copy; @endhtmlonly 2009
  10:../libopencm3/lib/stm32/f1/rcc.c **** Federico Ruiz-Ugalde \<memeruiz at gmail dot com\>
  11:../libopencm3/lib/stm32/f1/rcc.c **** @author @htmlonly &copy; @endhtmlonly 2009 Uwe Hermann <uwe@hermann-uwe.de>
  12:../libopencm3/lib/stm32/f1/rcc.c **** @author @htmlonly &copy; @endhtmlonly 2010 Thomas Otto <tommi@viadmin.org>
  13:../libopencm3/lib/stm32/f1/rcc.c **** 
  14:../libopencm3/lib/stm32/f1/rcc.c **** @date 18 August 2012
  15:../libopencm3/lib/stm32/f1/rcc.c **** 
  16:../libopencm3/lib/stm32/f1/rcc.c **** This library supports the Reset and Clock Control System in the STM32F1xx
  17:../libopencm3/lib/stm32/f1/rcc.c **** series of ARM Cortex Microcontrollers by ST Microelectronics.
  18:../libopencm3/lib/stm32/f1/rcc.c **** 
  19:../libopencm3/lib/stm32/f1/rcc.c **** @note Full support for connection line devices is not yet provided.
  20:../libopencm3/lib/stm32/f1/rcc.c **** 
  21:../libopencm3/lib/stm32/f1/rcc.c **** Clock settings and resets for many peripherals are given here rather than in
  22:../libopencm3/lib/stm32/f1/rcc.c **** the corresponding peripheral library.
  23:../libopencm3/lib/stm32/f1/rcc.c **** 
  24:../libopencm3/lib/stm32/f1/rcc.c **** The library also provides a number of common configurations for the processor
  25:../libopencm3/lib/stm32/f1/rcc.c **** system clock. Not all possible configurations are included.
  26:../libopencm3/lib/stm32/f1/rcc.c **** 
  27:../libopencm3/lib/stm32/f1/rcc.c **** LGPL License Terms @ref lgpl_license
  28:../libopencm3/lib/stm32/f1/rcc.c ****  */
  29:../libopencm3/lib/stm32/f1/rcc.c **** /*
  30:../libopencm3/lib/stm32/f1/rcc.c ****  * This file is part of the libopencm3 project.
  31:../libopencm3/lib/stm32/f1/rcc.c ****  *
  32:../libopencm3/lib/stm32/f1/rcc.c ****  * Copyright (C) 2009 Federico Ruiz-Ugalde <memeruiz at gmail dot com>
  33:../libopencm3/lib/stm32/f1/rcc.c ****  * Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
  34:../libopencm3/lib/stm32/f1/rcc.c ****  * Copyright (C) 2010 Thomas Otto <tommi@viadmin.org>
  35:../libopencm3/lib/stm32/f1/rcc.c ****  *
  36:../libopencm3/lib/stm32/f1/rcc.c ****  * This library is free software: you can redistribute it and/or modify
  37:../libopencm3/lib/stm32/f1/rcc.c ****  * it under the terms of the GNU Lesser General Public License as published by
  38:../libopencm3/lib/stm32/f1/rcc.c ****  * the Free Software Foundation, either version 3 of the License, or
  39:../libopencm3/lib/stm32/f1/rcc.c ****  * (at your option) any later version.
  40:../libopencm3/lib/stm32/f1/rcc.c ****  *
  41:../libopencm3/lib/stm32/f1/rcc.c ****  * This library is distributed in the hope that it will be useful,
  42:../libopencm3/lib/stm32/f1/rcc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  43:../libopencm3/lib/stm32/f1/rcc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  44:../libopencm3/lib/stm32/f1/rcc.c ****  * GNU Lesser General Public License for more details.
  45:../libopencm3/lib/stm32/f1/rcc.c ****  *
  46:../libopencm3/lib/stm32/f1/rcc.c ****  * You should have received a copy of the GNU Lesser General Public License
  47:../libopencm3/lib/stm32/f1/rcc.c ****  * along with this library.  If not, see <http://www.gnu.org/licenses/>.
  48:../libopencm3/lib/stm32/f1/rcc.c ****  */
  49:../libopencm3/lib/stm32/f1/rcc.c **** 
  50:../libopencm3/lib/stm32/f1/rcc.c **** /**@{*/
  51:../libopencm3/lib/stm32/f1/rcc.c **** 
  52:../libopencm3/lib/stm32/f1/rcc.c **** #include <libopencm3/cm3/assert.h>
  53:../libopencm3/lib/stm32/f1/rcc.c **** #include <libopencm3/stm32/rcc.h>
  54:../libopencm3/lib/stm32/f1/rcc.c **** #include <libopencm3/stm32/flash.h>
  55:../libopencm3/lib/stm32/f1/rcc.c **** 
  56:../libopencm3/lib/stm32/f1/rcc.c **** /** Set the default clock frequencies */
  57:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_apb1_frequency = 8000000;
  58:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_apb2_frequency = 8000000;
  59:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_ahb_frequency = 8000000;
  60:../libopencm3/lib/stm32/f1/rcc.c **** 
  61:../libopencm3/lib/stm32/f1/rcc.c **** const struct rcc_clock_scale rcc_hse_configs[RCC_CLOCK_HSE_END] = {
  62:../libopencm3/lib/stm32/f1/rcc.c **** 	{
  63:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hse-12, pll to 72 */
  64:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSE_CLK,
  65:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL6,
  66:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
  67:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
  68:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
  69:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
  70:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV6,
  71:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 2,
  72:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency	= 72000000,
  73:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 36000000,
  74:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 72000000,
  75:../libopencm3/lib/stm32/f1/rcc.c **** 	},
  76:../libopencm3/lib/stm32/f1/rcc.c **** 	{
  77:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hse16, pll to 72 */
  78:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL9,
  79:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSE_CLK,
  80:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
  81:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
  82:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
  83:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV6,
  84:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 2,
  85:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_DIV2,
  86:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency = 72e6,
  87:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 36e6,
  88:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 72e6,
  89:../libopencm3/lib/stm32/f1/rcc.c **** 	},
  90:../libopencm3/lib/stm32/f1/rcc.c **** 	{
  91:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hse25 to 72, this was a f105 config originally! intention preserved */
  92:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL9,
  93:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_PREDIV1_CLK,
  94:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
  95:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
  96:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
  97:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV6,
  98:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 2,
  99:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_DIV5,
 100:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1_source = RCC_CFGR2_PREDIV1SRC_PLL2_CLK,
 101:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll2_mul = RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8,
 102:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv2 = RCC_CFGR2_PREDIV2_DIV5,
 103:../libopencm3/lib/stm32/f1/rcc.c **** 		.usbpre = RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3,
 104:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency = 72e6,
 105:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 36e6,
 106:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 72e6,
 107:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 108:../libopencm3/lib/stm32/f1/rcc.c **** 	{
 109:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hse8, pll to 24 (f100 value line max) */
 110:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL3,
 111:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSE_CLK,
 112:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
 113:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_NODIV,
 114:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
 115:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV2,
 116:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 0,
 117:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
 118:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency = 24e6,
 119:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 24e6,
 120:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 24e6,
 121:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 122:../libopencm3/lib/stm32/f1/rcc.c **** 	{
 123:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hse8, pll to 72 */
 124:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL9,
 125:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSE_CLK,
 126:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
 127:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
 128:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
 129:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV8,
 130:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 2,
 131:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
 132:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency = 72e6,
 133:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 36e6,
 134:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 72e6,
 135:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 136:../libopencm3/lib/stm32/f1/rcc.c **** };
 137:../libopencm3/lib/stm32/f1/rcc.c **** 
 138:../libopencm3/lib/stm32/f1/rcc.c **** const struct rcc_clock_scale rcc_hsi_configs[RCC_CLOCK_HSI_END] = {
 139:../libopencm3/lib/stm32/f1/rcc.c **** 	{
 140:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hsi to 24Mhz, max for f100 */
 141:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSI_CLK_DIV2,
 142:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL6,
 143:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
 144:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
 145:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_NODIV,
 146:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
 147:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV2,
 148:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 0,
 149:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency	= 24e6,
 150:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 24e6,
 151:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 24e6,
 152:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 153:../libopencm3/lib/stm32/f1/rcc.c **** 	{
 154:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hsi to 48Mhz, allows usb, but out of spec */
 155:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSI_CLK_DIV2,
 156:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL12,
 157:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
 158:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
 159:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
 160:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
 161:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV8,
 162:../libopencm3/lib/stm32/f1/rcc.c **** 		.usbpre = RCC_CFGR_USBPRE_PLL_CLK_NODIV,
 163:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 1,
 164:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency	= 48e6,
 165:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 24e6,
 166:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 48e6,
 167:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 168:../libopencm3/lib/stm32/f1/rcc.c **** 	{
 169:../libopencm3/lib/stm32/f1/rcc.c **** 		/* hsi to 64Mhz, max possible from hsi */
 170:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_source = RCC_CFGR_PLLSRC_HSI_CLK_DIV2,
 171:../libopencm3/lib/stm32/f1/rcc.c **** 		.pll_mul = RCC_CFGR_PLLMUL_PLL_CLK_MUL16,
 172:../libopencm3/lib/stm32/f1/rcc.c **** 		.prediv1 = RCC_CFGR2_PREDIV_NODIV,
 173:../libopencm3/lib/stm32/f1/rcc.c **** 		.hpre = RCC_CFGR_HPRE_NODIV,
 174:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre1 = RCC_CFGR_PPRE_DIV2,
 175:../libopencm3/lib/stm32/f1/rcc.c **** 		.ppre2 = RCC_CFGR_PPRE_NODIV,
 176:../libopencm3/lib/stm32/f1/rcc.c **** 		.adcpre = RCC_CFGR_ADCPRE_DIV8,
 177:../libopencm3/lib/stm32/f1/rcc.c **** 		.flash_waitstates = 2,
 178:../libopencm3/lib/stm32/f1/rcc.c **** 		.ahb_frequency	= 64e6,
 179:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb1_frequency = 32e6,
 180:../libopencm3/lib/stm32/f1/rcc.c **** 		.apb2_frequency = 64e6,
 181:../libopencm3/lib/stm32/f1/rcc.c **** 	},
 182:../libopencm3/lib/stm32/f1/rcc.c **** };
 183:../libopencm3/lib/stm32/f1/rcc.c **** 
 184:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 185:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Clear the Oscillator Ready Interrupt Flag
 186:../libopencm3/lib/stm32/f1/rcc.c **** 
 187:../libopencm3/lib/stm32/f1/rcc.c **** Clear the interrupt flag that was set when a clock oscillator became ready to
 188:../libopencm3/lib/stm32/f1/rcc.c **** use.
 189:../libopencm3/lib/stm32/f1/rcc.c **** 
 190:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] osc Oscillator ID
 191:../libopencm3/lib/stm32/f1/rcc.c **** */
 192:../libopencm3/lib/stm32/f1/rcc.c **** 
 193:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_osc_ready_int_clear(enum rcc_osc osc)
 194:../libopencm3/lib/stm32/f1/rcc.c **** {
 163              		.loc 1 194 1
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 8
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168 0000 80B4     		push	{r7}
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0002 83B0     		sub	sp, sp, #12
 172              		.cfi_def_cfa_offset 16
 173 0004 00AF     		add	r7, sp, #0
 174              		.cfi_def_cfa_register 7
 175 0006 0346     		mov	r3, r0
 176 0008 FB71     		strb	r3, [r7, #7]
 195:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 177              		.loc 1 195 2
 178 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 179 000c 062B     		cmp	r3, #6
 180 000e 44D8     		bhi	.L11
 181 0010 02A2     		adr	r2, .L4
 182 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 183 0016 1A44     		add	r2, r2, r3
 184 0018 1047     		bx	r2
 185 001a 00BF     		.p2align 2
 186              	.L4:
 187 001c 1D000000 		.word	.L10+1-.L4
 188 0020 2B000000 		.word	.L9+1-.L4
 189 0024 39000000 		.word	.L8+1-.L4
 190 0028 47000000 		.word	.L7+1-.L4
 191 002c 55000000 		.word	.L6+1-.L4
 192 0030 63000000 		.word	.L5+1-.L4
 193 0034 71000000 		.word	.L3+1-.L4
 194              		.p2align 1
 195              	.L10:
 196:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 197:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLLRDYC;
 196              		.loc 1 197 11
 197 0038 1A4B     		ldr	r3, .L12
 198 003a 1B68     		ldr	r3, [r3]
 199 003c 194A     		ldr	r2, .L12
 200 003e 43F48013 		orr	r3, r3, #1048576
 201 0042 1360     		str	r3, [r2]
 198:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 202              		.loc 1 198 3
 203 0044 29E0     		b	.L2
 204              	.L9:
 199:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 200:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLL2RDYC;
 205              		.loc 1 200 11
 206 0046 174B     		ldr	r3, .L12
 207 0048 1B68     		ldr	r3, [r3]
 208 004a 164A     		ldr	r2, .L12
 209 004c 43F40013 		orr	r3, r3, #2097152
 210 0050 1360     		str	r3, [r2]
 201:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 211              		.loc 1 201 3
 212 0052 22E0     		b	.L2
 213              	.L8:
 202:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 203:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLL3RDYC;
 214              		.loc 1 203 11
 215 0054 134B     		ldr	r3, .L12
 216 0056 1B68     		ldr	r3, [r3]
 217 0058 124A     		ldr	r2, .L12
 218 005a 43F48003 		orr	r3, r3, #4194304
 219 005e 1360     		str	r3, [r2]
 204:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 220              		.loc 1 204 3
 221 0060 1BE0     		b	.L2
 222              	.L7:
 205:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 206:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_HSERDYC;
 223              		.loc 1 206 11
 224 0062 104B     		ldr	r3, .L12
 225 0064 1B68     		ldr	r3, [r3]
 226 0066 0F4A     		ldr	r2, .L12
 227 0068 43F40023 		orr	r3, r3, #524288
 228 006c 1360     		str	r3, [r2]
 207:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 229              		.loc 1 207 3
 230 006e 14E0     		b	.L2
 231              	.L6:
 208:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 209:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_HSIRDYC;
 232              		.loc 1 209 11
 233 0070 0C4B     		ldr	r3, .L12
 234 0072 1B68     		ldr	r3, [r3]
 235 0074 0B4A     		ldr	r2, .L12
 236 0076 43F48023 		orr	r3, r3, #262144
 237 007a 1360     		str	r3, [r2]
 210:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 238              		.loc 1 210 3
 239 007c 0DE0     		b	.L2
 240              	.L5:
 211:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 212:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_LSERDYC;
 241              		.loc 1 212 11
 242 007e 094B     		ldr	r3, .L12
 243 0080 1B68     		ldr	r3, [r3]
 244 0082 084A     		ldr	r2, .L12
 245 0084 43F40033 		orr	r3, r3, #131072
 246 0088 1360     		str	r3, [r2]
 213:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 247              		.loc 1 213 3
 248 008a 06E0     		b	.L2
 249              	.L3:
 214:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 215:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_LSIRDYC;
 250              		.loc 1 215 11
 251 008c 054B     		ldr	r3, .L12
 252 008e 1B68     		ldr	r3, [r3]
 253 0090 044A     		ldr	r2, .L12
 254 0092 43F48033 		orr	r3, r3, #65536
 255 0096 1360     		str	r3, [r2]
 216:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 256              		.loc 1 216 3
 257 0098 00BF     		nop
 258              	.L2:
 259              	.L11:
 217:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 218:../libopencm3/lib/stm32/f1/rcc.c **** }
 260              		.loc 1 218 1
 261 009a 00BF     		nop
 262 009c 0C37     		adds	r7, r7, #12
 263              		.cfi_def_cfa_offset 4
 264 009e BD46     		mov	sp, r7
 265              		.cfi_def_cfa_register 13
 266              		@ sp needed
 267 00a0 80BC     		pop	{r7}
 268              		.cfi_restore 7
 269              		.cfi_def_cfa_offset 0
 270 00a2 7047     		bx	lr
 271              	.L13:
 272              		.align	2
 273              	.L12:
 274 00a4 08100240 		.word	1073877000
 275              		.cfi_endproc
 276              	.LFE0:
 278              		.section	.text.rcc_osc_ready_int_enable,"ax",%progbits
 279              		.align	1
 280              		.global	rcc_osc_ready_int_enable
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	rcc_osc_ready_int_enable:
 287              	.LFB1:
 219:../libopencm3/lib/stm32/f1/rcc.c **** 
 220:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 221:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Enable the Oscillator Ready Interrupt
 222:../libopencm3/lib/stm32/f1/rcc.c **** 
 223:../libopencm3/lib/stm32/f1/rcc.c **** @param osc Oscillator ID
 224:../libopencm3/lib/stm32/f1/rcc.c **** */
 225:../libopencm3/lib/stm32/f1/rcc.c **** 
 226:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_osc_ready_int_enable(enum rcc_osc osc)
 227:../libopencm3/lib/stm32/f1/rcc.c **** {
 288              		.loc 1 227 1
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 8
 291              		@ frame_needed = 1, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293 0000 80B4     		push	{r7}
 294              		.cfi_def_cfa_offset 4
 295              		.cfi_offset 7, -4
 296 0002 83B0     		sub	sp, sp, #12
 297              		.cfi_def_cfa_offset 16
 298 0004 00AF     		add	r7, sp, #0
 299              		.cfi_def_cfa_register 7
 300 0006 0346     		mov	r3, r0
 301 0008 FB71     		strb	r3, [r7, #7]
 228:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 302              		.loc 1 228 2
 303 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 304 000c 062B     		cmp	r3, #6
 305 000e 44D8     		bhi	.L24
 306 0010 02A2     		adr	r2, .L17
 307 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 308 0016 1A44     		add	r2, r2, r3
 309 0018 1047     		bx	r2
 310 001a 00BF     		.p2align 2
 311              	.L17:
 312 001c 1D000000 		.word	.L23+1-.L17
 313 0020 2B000000 		.word	.L22+1-.L17
 314 0024 39000000 		.word	.L21+1-.L17
 315 0028 47000000 		.word	.L20+1-.L17
 316 002c 55000000 		.word	.L19+1-.L17
 317 0030 63000000 		.word	.L18+1-.L17
 318 0034 71000000 		.word	.L16+1-.L17
 319              		.p2align 1
 320              	.L23:
 229:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 230:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLLRDYIE;
 321              		.loc 1 230 11
 322 0038 1A4B     		ldr	r3, .L25
 323 003a 1B68     		ldr	r3, [r3]
 324 003c 194A     		ldr	r2, .L25
 325 003e 43F48053 		orr	r3, r3, #4096
 326 0042 1360     		str	r3, [r2]
 231:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 327              		.loc 1 231 3
 328 0044 29E0     		b	.L15
 329              	.L22:
 232:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 233:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLL2RDYIE;
 330              		.loc 1 233 11
 331 0046 174B     		ldr	r3, .L25
 332 0048 1B68     		ldr	r3, [r3]
 333 004a 164A     		ldr	r2, .L25
 334 004c 43F40053 		orr	r3, r3, #8192
 335 0050 1360     		str	r3, [r2]
 234:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 336              		.loc 1 234 3
 337 0052 22E0     		b	.L15
 338              	.L21:
 235:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 236:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_PLL3RDYIE;
 339              		.loc 1 236 11
 340 0054 134B     		ldr	r3, .L25
 341 0056 1B68     		ldr	r3, [r3]
 342 0058 124A     		ldr	r2, .L25
 343 005a 43F48043 		orr	r3, r3, #16384
 344 005e 1360     		str	r3, [r2]
 237:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 345              		.loc 1 237 3
 346 0060 1BE0     		b	.L15
 347              	.L20:
 238:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 239:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_HSERDYIE;
 348              		.loc 1 239 11
 349 0062 104B     		ldr	r3, .L25
 350 0064 1B68     		ldr	r3, [r3]
 351 0066 0F4A     		ldr	r2, .L25
 352 0068 43F40063 		orr	r3, r3, #2048
 353 006c 1360     		str	r3, [r2]
 240:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 354              		.loc 1 240 3
 355 006e 14E0     		b	.L15
 356              	.L19:
 241:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 242:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_HSIRDYIE;
 357              		.loc 1 242 11
 358 0070 0C4B     		ldr	r3, .L25
 359 0072 1B68     		ldr	r3, [r3]
 360 0074 0B4A     		ldr	r2, .L25
 361 0076 43F48063 		orr	r3, r3, #1024
 362 007a 1360     		str	r3, [r2]
 243:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 363              		.loc 1 243 3
 364 007c 0DE0     		b	.L15
 365              	.L18:
 244:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 245:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_LSERDYIE;
 366              		.loc 1 245 11
 367 007e 094B     		ldr	r3, .L25
 368 0080 1B68     		ldr	r3, [r3]
 369 0082 084A     		ldr	r2, .L25
 370 0084 43F40073 		orr	r3, r3, #512
 371 0088 1360     		str	r3, [r2]
 246:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 372              		.loc 1 246 3
 373 008a 06E0     		b	.L15
 374              	.L16:
 247:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 248:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR |= RCC_CIR_LSIRDYIE;
 375              		.loc 1 248 11
 376 008c 054B     		ldr	r3, .L25
 377 008e 1B68     		ldr	r3, [r3]
 378 0090 044A     		ldr	r2, .L25
 379 0092 43F48073 		orr	r3, r3, #256
 380 0096 1360     		str	r3, [r2]
 249:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 381              		.loc 1 249 3
 382 0098 00BF     		nop
 383              	.L15:
 384              	.L24:
 250:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 251:../libopencm3/lib/stm32/f1/rcc.c **** }
 385              		.loc 1 251 1
 386 009a 00BF     		nop
 387 009c 0C37     		adds	r7, r7, #12
 388              		.cfi_def_cfa_offset 4
 389 009e BD46     		mov	sp, r7
 390              		.cfi_def_cfa_register 13
 391              		@ sp needed
 392 00a0 80BC     		pop	{r7}
 393              		.cfi_restore 7
 394              		.cfi_def_cfa_offset 0
 395 00a2 7047     		bx	lr
 396              	.L26:
 397              		.align	2
 398              	.L25:
 399 00a4 08100240 		.word	1073877000
 400              		.cfi_endproc
 401              	.LFE1:
 403              		.section	.text.rcc_osc_ready_int_disable,"ax",%progbits
 404              		.align	1
 405              		.global	rcc_osc_ready_int_disable
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu softvfp
 411              	rcc_osc_ready_int_disable:
 412              	.LFB2:
 252:../libopencm3/lib/stm32/f1/rcc.c **** 
 253:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 254:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Disable the Oscillator Ready Interrupt
 255:../libopencm3/lib/stm32/f1/rcc.c **** 
 256:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] osc Oscillator ID
 257:../libopencm3/lib/stm32/f1/rcc.c **** */
 258:../libopencm3/lib/stm32/f1/rcc.c **** 
 259:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_osc_ready_int_disable(enum rcc_osc osc)
 260:../libopencm3/lib/stm32/f1/rcc.c **** {
 413              		.loc 1 260 1
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 8
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418 0000 80B4     		push	{r7}
 419              		.cfi_def_cfa_offset 4
 420              		.cfi_offset 7, -4
 421 0002 83B0     		sub	sp, sp, #12
 422              		.cfi_def_cfa_offset 16
 423 0004 00AF     		add	r7, sp, #0
 424              		.cfi_def_cfa_register 7
 425 0006 0346     		mov	r3, r0
 426 0008 FB71     		strb	r3, [r7, #7]
 261:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 427              		.loc 1 261 2
 428 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 429 000c 062B     		cmp	r3, #6
 430 000e 44D8     		bhi	.L37
 431 0010 02A2     		adr	r2, .L30
 432 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 433 0016 1A44     		add	r2, r2, r3
 434 0018 1047     		bx	r2
 435 001a 00BF     		.p2align 2
 436              	.L30:
 437 001c 1D000000 		.word	.L36+1-.L30
 438 0020 2B000000 		.word	.L35+1-.L30
 439 0024 39000000 		.word	.L34+1-.L30
 440 0028 47000000 		.word	.L33+1-.L30
 441 002c 55000000 		.word	.L32+1-.L30
 442 0030 63000000 		.word	.L31+1-.L30
 443 0034 71000000 		.word	.L29+1-.L30
 444              		.p2align 1
 445              	.L36:
 262:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 263:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_PLLRDYIE;
 446              		.loc 1 263 11
 447 0038 1A4B     		ldr	r3, .L38
 448 003a 1B68     		ldr	r3, [r3]
 449 003c 194A     		ldr	r2, .L38
 450 003e 23F48053 		bic	r3, r3, #4096
 451 0042 1360     		str	r3, [r2]
 264:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 452              		.loc 1 264 3
 453 0044 29E0     		b	.L28
 454              	.L35:
 265:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 266:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_PLL2RDYIE;
 455              		.loc 1 266 11
 456 0046 174B     		ldr	r3, .L38
 457 0048 1B68     		ldr	r3, [r3]
 458 004a 164A     		ldr	r2, .L38
 459 004c 23F40053 		bic	r3, r3, #8192
 460 0050 1360     		str	r3, [r2]
 267:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 461              		.loc 1 267 3
 462 0052 22E0     		b	.L28
 463              	.L34:
 268:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 269:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_PLL3RDYIE;
 464              		.loc 1 269 11
 465 0054 134B     		ldr	r3, .L38
 466 0056 1B68     		ldr	r3, [r3]
 467 0058 124A     		ldr	r2, .L38
 468 005a 23F48043 		bic	r3, r3, #16384
 469 005e 1360     		str	r3, [r2]
 270:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 470              		.loc 1 270 3
 471 0060 1BE0     		b	.L28
 472              	.L33:
 271:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 272:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_HSERDYIE;
 473              		.loc 1 272 11
 474 0062 104B     		ldr	r3, .L38
 475 0064 1B68     		ldr	r3, [r3]
 476 0066 0F4A     		ldr	r2, .L38
 477 0068 23F40063 		bic	r3, r3, #2048
 478 006c 1360     		str	r3, [r2]
 273:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 479              		.loc 1 273 3
 480 006e 14E0     		b	.L28
 481              	.L32:
 274:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 275:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_HSIRDYIE;
 482              		.loc 1 275 11
 483 0070 0C4B     		ldr	r3, .L38
 484 0072 1B68     		ldr	r3, [r3]
 485 0074 0B4A     		ldr	r2, .L38
 486 0076 23F48063 		bic	r3, r3, #1024
 487 007a 1360     		str	r3, [r2]
 276:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 488              		.loc 1 276 3
 489 007c 0DE0     		b	.L28
 490              	.L31:
 277:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 278:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_LSERDYIE;
 491              		.loc 1 278 11
 492 007e 094B     		ldr	r3, .L38
 493 0080 1B68     		ldr	r3, [r3]
 494 0082 084A     		ldr	r2, .L38
 495 0084 23F40073 		bic	r3, r3, #512
 496 0088 1360     		str	r3, [r2]
 279:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 497              		.loc 1 279 3
 498 008a 06E0     		b	.L28
 499              	.L29:
 280:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 281:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CIR &= ~RCC_CIR_LSIRDYIE;
 500              		.loc 1 281 11
 501 008c 054B     		ldr	r3, .L38
 502 008e 1B68     		ldr	r3, [r3]
 503 0090 044A     		ldr	r2, .L38
 504 0092 23F48073 		bic	r3, r3, #256
 505 0096 1360     		str	r3, [r2]
 282:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 506              		.loc 1 282 3
 507 0098 00BF     		nop
 508              	.L28:
 509              	.L37:
 283:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 284:../libopencm3/lib/stm32/f1/rcc.c **** }
 510              		.loc 1 284 1
 511 009a 00BF     		nop
 512 009c 0C37     		adds	r7, r7, #12
 513              		.cfi_def_cfa_offset 4
 514 009e BD46     		mov	sp, r7
 515              		.cfi_def_cfa_register 13
 516              		@ sp needed
 517 00a0 80BC     		pop	{r7}
 518              		.cfi_restore 7
 519              		.cfi_def_cfa_offset 0
 520 00a2 7047     		bx	lr
 521              	.L39:
 522              		.align	2
 523              	.L38:
 524 00a4 08100240 		.word	1073877000
 525              		.cfi_endproc
 526              	.LFE2:
 528              		.section	.text.rcc_osc_ready_int_flag,"ax",%progbits
 529              		.align	1
 530              		.global	rcc_osc_ready_int_flag
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	rcc_osc_ready_int_flag:
 537              	.LFB3:
 285:../libopencm3/lib/stm32/f1/rcc.c **** 
 286:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 287:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Read the Oscillator Ready Interrupt Flag
 288:../libopencm3/lib/stm32/f1/rcc.c **** 
 289:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] osc Oscillator ID
 290:../libopencm3/lib/stm32/f1/rcc.c **** @returns int. Boolean value for flag set.
 291:../libopencm3/lib/stm32/f1/rcc.c **** */
 292:../libopencm3/lib/stm32/f1/rcc.c **** 
 293:../libopencm3/lib/stm32/f1/rcc.c **** int rcc_osc_ready_int_flag(enum rcc_osc osc)
 294:../libopencm3/lib/stm32/f1/rcc.c **** {
 538              		.loc 1 294 1
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 8
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 80B5     		push	{r7, lr}
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 82B0     		sub	sp, sp, #8
 547              		.cfi_def_cfa_offset 16
 548 0004 00AF     		add	r7, sp, #0
 549              		.cfi_def_cfa_register 7
 550 0006 0346     		mov	r3, r0
 551 0008 FB71     		strb	r3, [r7, #7]
 295:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 552              		.loc 1 295 2
 553 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 554 000c 062B     		cmp	r3, #6
 555 000e 59D8     		bhi	.L41
 556 0010 02A2     		adr	r2, .L43
 557 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 558 0016 1A44     		add	r2, r2, r3
 559 0018 1047     		bx	r2
 560 001a 00BF     		.p2align 2
 561              	.L43:
 562 001c 1D000000 		.word	.L49+1-.L43
 563 0020 31000000 		.word	.L48+1-.L43
 564 0024 45000000 		.word	.L47+1-.L43
 565 0028 59000000 		.word	.L46+1-.L43
 566 002c 6D000000 		.word	.L45+1-.L43
 567 0030 81000000 		.word	.L44+1-.L43
 568 0034 95000000 		.word	.L42+1-.L43
 569              		.p2align 1
 570              	.L49:
 296:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 297:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_PLLRDYF) != 0);
 571              		.loc 1 297 12
 572 0038 254B     		ldr	r3, .L51
 573 003a 1B68     		ldr	r3, [r3]
 574              		.loc 1 297 20
 575 003c 03F01003 		and	r3, r3, #16
 576              		.loc 1 297 39
 577 0040 002B     		cmp	r3, #0
 578 0042 14BF     		ite	ne
 579 0044 0123     		movne	r3, #1
 580 0046 0023     		moveq	r3, #0
 581 0048 DBB2     		uxtb	r3, r3
 582 004a 3DE0     		b	.L50
 583              	.L48:
 298:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 299:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 300:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_PLL2RDYF) != 0);
 584              		.loc 1 300 12
 585 004c 204B     		ldr	r3, .L51
 586 004e 1B68     		ldr	r3, [r3]
 587              		.loc 1 300 20
 588 0050 03F02003 		and	r3, r3, #32
 589              		.loc 1 300 40
 590 0054 002B     		cmp	r3, #0
 591 0056 14BF     		ite	ne
 592 0058 0123     		movne	r3, #1
 593 005a 0023     		moveq	r3, #0
 594 005c DBB2     		uxtb	r3, r3
 595 005e 33E0     		b	.L50
 596              	.L47:
 301:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 302:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 303:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_PLL3RDYF) != 0);
 597              		.loc 1 303 12
 598 0060 1B4B     		ldr	r3, .L51
 599 0062 1B68     		ldr	r3, [r3]
 600              		.loc 1 303 20
 601 0064 03F04003 		and	r3, r3, #64
 602              		.loc 1 303 40
 603 0068 002B     		cmp	r3, #0
 604 006a 14BF     		ite	ne
 605 006c 0123     		movne	r3, #1
 606 006e 0023     		moveq	r3, #0
 607 0070 DBB2     		uxtb	r3, r3
 608 0072 29E0     		b	.L50
 609              	.L46:
 304:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 305:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 306:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_HSERDYF) != 0);
 610              		.loc 1 306 12
 611 0074 164B     		ldr	r3, .L51
 612 0076 1B68     		ldr	r3, [r3]
 613              		.loc 1 306 20
 614 0078 03F00803 		and	r3, r3, #8
 615              		.loc 1 306 39
 616 007c 002B     		cmp	r3, #0
 617 007e 14BF     		ite	ne
 618 0080 0123     		movne	r3, #1
 619 0082 0023     		moveq	r3, #0
 620 0084 DBB2     		uxtb	r3, r3
 621 0086 1FE0     		b	.L50
 622              	.L45:
 307:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 308:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 309:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_HSIRDYF) != 0);
 623              		.loc 1 309 12
 624 0088 114B     		ldr	r3, .L51
 625 008a 1B68     		ldr	r3, [r3]
 626              		.loc 1 309 20
 627 008c 03F00403 		and	r3, r3, #4
 628              		.loc 1 309 39
 629 0090 002B     		cmp	r3, #0
 630 0092 14BF     		ite	ne
 631 0094 0123     		movne	r3, #1
 632 0096 0023     		moveq	r3, #0
 633 0098 DBB2     		uxtb	r3, r3
 634 009a 15E0     		b	.L50
 635              	.L44:
 310:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 311:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 312:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_LSERDYF) != 0);
 636              		.loc 1 312 12
 637 009c 0C4B     		ldr	r3, .L51
 638 009e 1B68     		ldr	r3, [r3]
 639              		.loc 1 312 20
 640 00a0 03F00203 		and	r3, r3, #2
 641              		.loc 1 312 39
 642 00a4 002B     		cmp	r3, #0
 643 00a6 14BF     		ite	ne
 644 00a8 0123     		movne	r3, #1
 645 00aa 0023     		moveq	r3, #0
 646 00ac DBB2     		uxtb	r3, r3
 647 00ae 0BE0     		b	.L50
 648              	.L42:
 313:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 314:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 315:../libopencm3/lib/stm32/f1/rcc.c **** 		return ((RCC_CIR & RCC_CIR_LSIRDYF) != 0);
 649              		.loc 1 315 12
 650 00b0 074B     		ldr	r3, .L51
 651 00b2 1B68     		ldr	r3, [r3]
 652              		.loc 1 315 20
 653 00b4 03F00103 		and	r3, r3, #1
 654              		.loc 1 315 39
 655 00b8 002B     		cmp	r3, #0
 656 00ba 14BF     		ite	ne
 657 00bc 0123     		movne	r3, #1
 658 00be 0023     		moveq	r3, #0
 659 00c0 DBB2     		uxtb	r3, r3
 660 00c2 01E0     		b	.L50
 661              	.L41:
 316:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 317:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 318:../libopencm3/lib/stm32/f1/rcc.c **** 
 319:../libopencm3/lib/stm32/f1/rcc.c **** 	cm3_assert_not_reached();
 662              		.loc 1 319 2
 663 00c4 FFF7FEFF 		bl	cm3_assert_failed(PLT)
 664              	.L50:
 320:../libopencm3/lib/stm32/f1/rcc.c **** }
 665              		.loc 1 320 1
 666 00c8 1846     		mov	r0, r3
 667 00ca 0837     		adds	r7, r7, #8
 668              		.cfi_def_cfa_offset 8
 669 00cc BD46     		mov	sp, r7
 670              		.cfi_def_cfa_register 13
 671              		@ sp needed
 672 00ce 80BD     		pop	{r7, pc}
 673              	.L52:
 674              		.align	2
 675              	.L51:
 676 00d0 08100240 		.word	1073877000
 677              		.cfi_endproc
 678              	.LFE3:
 680              		.section	.text.rcc_css_int_clear,"ax",%progbits
 681              		.align	1
 682              		.global	rcc_css_int_clear
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu softvfp
 688              	rcc_css_int_clear:
 689              	.LFB4:
 321:../libopencm3/lib/stm32/f1/rcc.c **** 
 322:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 323:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Clear the Clock Security System Interrupt Flag
 324:../libopencm3/lib/stm32/f1/rcc.c **** 
 325:../libopencm3/lib/stm32/f1/rcc.c **** */
 326:../libopencm3/lib/stm32/f1/rcc.c **** 
 327:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_css_int_clear(void)
 328:../libopencm3/lib/stm32/f1/rcc.c **** {
 690              		.loc 1 328 1
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0000 80B4     		push	{r7}
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 7, -4
 698 0002 00AF     		add	r7, sp, #0
 699              		.cfi_def_cfa_register 7
 329:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CIR |= RCC_CIR_CSSC;
 700              		.loc 1 329 10
 701 0004 044B     		ldr	r3, .L54
 702 0006 1B68     		ldr	r3, [r3]
 703 0008 034A     		ldr	r2, .L54
 704 000a 43F40003 		orr	r3, r3, #8388608
 705 000e 1360     		str	r3, [r2]
 330:../libopencm3/lib/stm32/f1/rcc.c **** }
 706              		.loc 1 330 1
 707 0010 00BF     		nop
 708 0012 BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 0014 80BC     		pop	{r7}
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 0016 7047     		bx	lr
 715              	.L55:
 716              		.align	2
 717              	.L54:
 718 0018 08100240 		.word	1073877000
 719              		.cfi_endproc
 720              	.LFE4:
 722              		.section	.text.rcc_css_int_flag,"ax",%progbits
 723              		.align	1
 724              		.global	rcc_css_int_flag
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu softvfp
 730              	rcc_css_int_flag:
 731              	.LFB5:
 331:../libopencm3/lib/stm32/f1/rcc.c **** 
 332:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 333:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Read the Clock Security System Interrupt Flag
 334:../libopencm3/lib/stm32/f1/rcc.c **** 
 335:../libopencm3/lib/stm32/f1/rcc.c **** @returns int. Boolean value for flag set.
 336:../libopencm3/lib/stm32/f1/rcc.c **** */
 337:../libopencm3/lib/stm32/f1/rcc.c **** 
 338:../libopencm3/lib/stm32/f1/rcc.c **** int rcc_css_int_flag(void)
 339:../libopencm3/lib/stm32/f1/rcc.c **** {
 732              		.loc 1 339 1
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736              		@ link register save eliminated.
 737 0000 80B4     		push	{r7}
 738              		.cfi_def_cfa_offset 4
 739              		.cfi_offset 7, -4
 740 0002 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 340:../libopencm3/lib/stm32/f1/rcc.c **** 	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
 742              		.loc 1 340 11
 743 0004 064B     		ldr	r3, .L58
 744 0006 1B68     		ldr	r3, [r3]
 745              		.loc 1 340 19
 746 0008 03F08003 		and	r3, r3, #128
 747              		.loc 1 340 35
 748 000c 002B     		cmp	r3, #0
 749 000e 14BF     		ite	ne
 750 0010 0123     		movne	r3, #1
 751 0012 0023     		moveq	r3, #0
 752 0014 DBB2     		uxtb	r3, r3
 341:../libopencm3/lib/stm32/f1/rcc.c **** }
 753              		.loc 1 341 1
 754 0016 1846     		mov	r0, r3
 755 0018 BD46     		mov	sp, r7
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 001a 80BC     		pop	{r7}
 759              		.cfi_restore 7
 760              		.cfi_def_cfa_offset 0
 761 001c 7047     		bx	lr
 762              	.L59:
 763 001e 00BF     		.align	2
 764              	.L58:
 765 0020 08100240 		.word	1073877000
 766              		.cfi_endproc
 767              	.LFE5:
 769              		.section	.text.rcc_is_osc_ready,"ax",%progbits
 770              		.align	1
 771              		.global	rcc_is_osc_ready
 772              		.syntax unified
 773              		.thumb
 774              		.thumb_func
 775              		.fpu softvfp
 777              	rcc_is_osc_ready:
 778              	.LFB6:
 342:../libopencm3/lib/stm32/f1/rcc.c **** 
 343:../libopencm3/lib/stm32/f1/rcc.c **** bool rcc_is_osc_ready(enum rcc_osc osc)
 344:../libopencm3/lib/stm32/f1/rcc.c **** {
 779              		.loc 1 344 1
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 8
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784 0000 80B4     		push	{r7}
 785              		.cfi_def_cfa_offset 4
 786              		.cfi_offset 7, -4
 787 0002 83B0     		sub	sp, sp, #12
 788              		.cfi_def_cfa_offset 16
 789 0004 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 791 0006 0346     		mov	r3, r0
 792 0008 FB71     		strb	r3, [r7, #7]
 345:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 793              		.loc 1 345 2
 794 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 795 000c 062B     		cmp	r3, #6
 796 000e 59D8     		bhi	.L61
 797 0010 02A2     		adr	r2, .L63
 798 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 799 0016 1A44     		add	r2, r2, r3
 800 0018 1047     		bx	r2
 801 001a 00BF     		.p2align 2
 802              	.L63:
 803 001c 1D000000 		.word	.L69+1-.L63
 804 0020 31000000 		.word	.L68+1-.L63
 805 0024 45000000 		.word	.L67+1-.L63
 806 0028 59000000 		.word	.L66+1-.L63
 807 002c 6D000000 		.word	.L65+1-.L63
 808 0030 81000000 		.word	.L64+1-.L63
 809 0034 95000000 		.word	.L62+1-.L63
 810              		.p2align 1
 811              	.L69:
 346:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 347:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CR & RCC_CR_PLLRDY;
 812              		.loc 1 347 10
 813 0038 254B     		ldr	r3, .L71
 814 003a 1B68     		ldr	r3, [r3]
 815              		.loc 1 347 17
 816 003c 03F00073 		and	r3, r3, #33554432
 817 0040 002B     		cmp	r3, #0
 818 0042 14BF     		ite	ne
 819 0044 0123     		movne	r3, #1
 820 0046 0023     		moveq	r3, #0
 821 0048 DBB2     		uxtb	r3, r3
 822 004a 3CE0     		b	.L70
 823              	.L68:
 348:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 349:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CR & RCC_CR_PLL2RDY;
 824              		.loc 1 349 10
 825 004c 204B     		ldr	r3, .L71
 826 004e 1B68     		ldr	r3, [r3]
 827              		.loc 1 349 17
 828 0050 03F00063 		and	r3, r3, #134217728
 829 0054 002B     		cmp	r3, #0
 830 0056 14BF     		ite	ne
 831 0058 0123     		movne	r3, #1
 832 005a 0023     		moveq	r3, #0
 833 005c DBB2     		uxtb	r3, r3
 834 005e 32E0     		b	.L70
 835              	.L67:
 350:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 351:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CR & RCC_CR_PLL3RDY;
 836              		.loc 1 351 10
 837 0060 1B4B     		ldr	r3, .L71
 838 0062 1B68     		ldr	r3, [r3]
 839              		.loc 1 351 17
 840 0064 03F00053 		and	r3, r3, #536870912
 841 0068 002B     		cmp	r3, #0
 842 006a 14BF     		ite	ne
 843 006c 0123     		movne	r3, #1
 844 006e 0023     		moveq	r3, #0
 845 0070 DBB2     		uxtb	r3, r3
 846 0072 28E0     		b	.L70
 847              	.L66:
 352:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 353:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CR & RCC_CR_HSERDY;
 848              		.loc 1 353 10
 849 0074 164B     		ldr	r3, .L71
 850 0076 1B68     		ldr	r3, [r3]
 851              		.loc 1 353 17
 852 0078 03F40033 		and	r3, r3, #131072
 853 007c 002B     		cmp	r3, #0
 854 007e 14BF     		ite	ne
 855 0080 0123     		movne	r3, #1
 856 0082 0023     		moveq	r3, #0
 857 0084 DBB2     		uxtb	r3, r3
 858 0086 1EE0     		b	.L70
 859              	.L65:
 354:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 355:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CR & RCC_CR_HSIRDY;
 860              		.loc 1 355 10
 861 0088 114B     		ldr	r3, .L71
 862 008a 1B68     		ldr	r3, [r3]
 863              		.loc 1 355 17
 864 008c 03F00203 		and	r3, r3, #2
 865 0090 002B     		cmp	r3, #0
 866 0092 14BF     		ite	ne
 867 0094 0123     		movne	r3, #1
 868 0096 0023     		moveq	r3, #0
 869 0098 DBB2     		uxtb	r3, r3
 870 009a 14E0     		b	.L70
 871              	.L64:
 356:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 357:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_BDCR & RCC_BDCR_LSERDY;
 872              		.loc 1 357 10
 873 009c 0D4B     		ldr	r3, .L71+4
 874 009e 1B68     		ldr	r3, [r3]
 875              		.loc 1 357 19
 876 00a0 03F00203 		and	r3, r3, #2
 877 00a4 002B     		cmp	r3, #0
 878 00a6 14BF     		ite	ne
 879 00a8 0123     		movne	r3, #1
 880 00aa 0023     		moveq	r3, #0
 881 00ac DBB2     		uxtb	r3, r3
 882 00ae 0AE0     		b	.L70
 883              	.L62:
 358:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 359:../libopencm3/lib/stm32/f1/rcc.c **** 		return RCC_CSR & RCC_CSR_LSIRDY;
 884              		.loc 1 359 10
 885 00b0 094B     		ldr	r3, .L71+8
 886 00b2 1B68     		ldr	r3, [r3]
 887              		.loc 1 359 18
 888 00b4 03F00203 		and	r3, r3, #2
 889 00b8 002B     		cmp	r3, #0
 890 00ba 14BF     		ite	ne
 891 00bc 0123     		movne	r3, #1
 892 00be 0023     		moveq	r3, #0
 893 00c0 DBB2     		uxtb	r3, r3
 894 00c2 00E0     		b	.L70
 895              	.L61:
 360:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 361:../libopencm3/lib/stm32/f1/rcc.c **** 	return false;
 896              		.loc 1 361 9
 897 00c4 0023     		movs	r3, #0
 898              	.L70:
 362:../libopencm3/lib/stm32/f1/rcc.c **** }
 899              		.loc 1 362 1
 900 00c6 1846     		mov	r0, r3
 901 00c8 0C37     		adds	r7, r7, #12
 902              		.cfi_def_cfa_offset 4
 903 00ca BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 00cc 80BC     		pop	{r7}
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 00ce 7047     		bx	lr
 910              	.L72:
 911              		.align	2
 912              	.L71:
 913 00d0 00100240 		.word	1073876992
 914 00d4 20100240 		.word	1073877024
 915 00d8 24100240 		.word	1073877028
 916              		.cfi_endproc
 917              	.LFE6:
 919              		.section	.text.rcc_wait_for_osc_ready,"ax",%progbits
 920              		.align	1
 921              		.global	rcc_wait_for_osc_ready
 922              		.syntax unified
 923              		.thumb
 924              		.thumb_func
 925              		.fpu softvfp
 927              	rcc_wait_for_osc_ready:
 928              	.LFB7:
 363:../libopencm3/lib/stm32/f1/rcc.c **** 
 364:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_wait_for_osc_ready(enum rcc_osc osc)
 365:../libopencm3/lib/stm32/f1/rcc.c **** {
 929              		.loc 1 365 1
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 8
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933 0000 80B5     		push	{r7, lr}
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 82B0     		sub	sp, sp, #8
 938              		.cfi_def_cfa_offset 16
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 0346     		mov	r3, r0
 942 0008 FB71     		strb	r3, [r7, #7]
 366:../libopencm3/lib/stm32/f1/rcc.c **** 	while (!rcc_is_osc_ready(osc));
 943              		.loc 1 366 8
 944 000a 00BF     		nop
 945              	.L74:
 946              		.loc 1 366 10 discriminator 1
 947 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 948 000e 1846     		mov	r0, r3
 949 0010 FFF7FEFF 		bl	rcc_is_osc_ready(PLT)
 950 0014 0346     		mov	r3, r0
 951              		.loc 1 366 9 discriminator 1
 952 0016 83F00103 		eor	r3, r3, #1
 953 001a DBB2     		uxtb	r3, r3
 954              		.loc 1 366 8 discriminator 1
 955 001c 002B     		cmp	r3, #0
 956 001e F5D1     		bne	.L74
 367:../libopencm3/lib/stm32/f1/rcc.c **** }
 957              		.loc 1 367 1
 958 0020 00BF     		nop
 959 0022 0837     		adds	r7, r7, #8
 960              		.cfi_def_cfa_offset 8
 961 0024 BD46     		mov	sp, r7
 962              		.cfi_def_cfa_register 13
 963              		@ sp needed
 964 0026 80BD     		pop	{r7, pc}
 965              		.cfi_endproc
 966              	.LFE7:
 968              		.section	.text.rcc_osc_on,"ax",%progbits
 969              		.align	1
 970              		.global	rcc_osc_on
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu softvfp
 976              	rcc_osc_on:
 977              	.LFB8:
 368:../libopencm3/lib/stm32/f1/rcc.c **** 
 369:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 370:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Turn on an Oscillator.
 371:../libopencm3/lib/stm32/f1/rcc.c **** 
 372:../libopencm3/lib/stm32/f1/rcc.c **** Enable an oscillator and power on. Each oscillator requires an amount of time
 373:../libopencm3/lib/stm32/f1/rcc.c **** to settle to a usable state. Refer to datasheets for time delay information. A
 374:../libopencm3/lib/stm32/f1/rcc.c **** status flag is available to indicate when the oscillator becomes ready (see
 375:../libopencm3/lib/stm32/f1/rcc.c **** @ref rcc_osc_ready_int_flag and @ref rcc_wait_for_osc_ready).
 376:../libopencm3/lib/stm32/f1/rcc.c **** 
 377:../libopencm3/lib/stm32/f1/rcc.c **** @note The LSE clock is in the backup domain and cannot be enabled until the
 378:../libopencm3/lib/stm32/f1/rcc.c **** backup domain write protection has been removed (see @ref
 379:../libopencm3/lib/stm32/f1/rcc.c **** pwr_disable_backup_domain_write_protect).
 380:../libopencm3/lib/stm32/f1/rcc.c **** 
 381:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] osc Oscillator ID
 382:../libopencm3/lib/stm32/f1/rcc.c **** */
 383:../libopencm3/lib/stm32/f1/rcc.c **** 
 384:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_osc_on(enum rcc_osc osc)
 385:../libopencm3/lib/stm32/f1/rcc.c **** {
 978              		.loc 1 385 1
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 8
 981              		@ frame_needed = 1, uses_anonymous_args = 0
 982              		@ link register save eliminated.
 983 0000 80B4     		push	{r7}
 984              		.cfi_def_cfa_offset 4
 985              		.cfi_offset 7, -4
 986 0002 83B0     		sub	sp, sp, #12
 987              		.cfi_def_cfa_offset 16
 988 0004 00AF     		add	r7, sp, #0
 989              		.cfi_def_cfa_register 7
 990 0006 0346     		mov	r3, r0
 991 0008 FB71     		strb	r3, [r7, #7]
 386:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 992              		.loc 1 386 2
 993 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 994 000c 062B     		cmp	r3, #6
 995 000e 44D8     		bhi	.L85
 996 0010 02A2     		adr	r2, .L78
 997 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 998 0016 1A44     		add	r2, r2, r3
 999 0018 1047     		bx	r2
 1000 001a 00BF     		.p2align 2
 1001              	.L78:
 1002 001c 1D000000 		.word	.L84+1-.L78
 1003 0020 2B000000 		.word	.L83+1-.L78
 1004 0024 39000000 		.word	.L82+1-.L78
 1005 0028 47000000 		.word	.L81+1-.L78
 1006 002c 55000000 		.word	.L80+1-.L78
 1007 0030 63000000 		.word	.L79+1-.L78
 1008 0034 71000000 		.word	.L77+1-.L78
 1009              		.p2align 1
 1010              	.L84:
 387:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 388:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_PLLON;
 1011              		.loc 1 388 10
 1012 0038 1A4B     		ldr	r3, .L86
 1013 003a 1B68     		ldr	r3, [r3]
 1014 003c 194A     		ldr	r2, .L86
 1015 003e 43F08073 		orr	r3, r3, #16777216
 1016 0042 1360     		str	r3, [r2]
 389:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1017              		.loc 1 389 3
 1018 0044 29E0     		b	.L76
 1019              	.L83:
 390:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 391:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_PLL2ON;
 1020              		.loc 1 391 10
 1021 0046 174B     		ldr	r3, .L86
 1022 0048 1B68     		ldr	r3, [r3]
 1023 004a 164A     		ldr	r2, .L86
 1024 004c 43F08063 		orr	r3, r3, #67108864
 1025 0050 1360     		str	r3, [r2]
 392:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1026              		.loc 1 392 3
 1027 0052 22E0     		b	.L76
 1028              	.L82:
 393:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 394:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_PLL3ON;
 1029              		.loc 1 394 10
 1030 0054 134B     		ldr	r3, .L86
 1031 0056 1B68     		ldr	r3, [r3]
 1032 0058 124A     		ldr	r2, .L86
 1033 005a 43F08053 		orr	r3, r3, #268435456
 1034 005e 1360     		str	r3, [r2]
 395:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1035              		.loc 1 395 3
 1036 0060 1BE0     		b	.L76
 1037              	.L81:
 396:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 397:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_HSEON;
 1038              		.loc 1 397 10
 1039 0062 104B     		ldr	r3, .L86
 1040 0064 1B68     		ldr	r3, [r3]
 1041 0066 0F4A     		ldr	r2, .L86
 1042 0068 43F48033 		orr	r3, r3, #65536
 1043 006c 1360     		str	r3, [r2]
 398:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1044              		.loc 1 398 3
 1045 006e 14E0     		b	.L76
 1046              	.L80:
 399:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 400:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_HSION;
 1047              		.loc 1 400 10
 1048 0070 0C4B     		ldr	r3, .L86
 1049 0072 1B68     		ldr	r3, [r3]
 1050 0074 0B4A     		ldr	r2, .L86
 1051 0076 43F00103 		orr	r3, r3, #1
 1052 007a 1360     		str	r3, [r2]
 401:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1053              		.loc 1 401 3
 1054 007c 0DE0     		b	.L76
 1055              	.L79:
 402:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 403:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR |= RCC_BDCR_LSEON;
 1056              		.loc 1 403 12
 1057 007e 0A4B     		ldr	r3, .L86+4
 1058 0080 1B68     		ldr	r3, [r3]
 1059 0082 094A     		ldr	r2, .L86+4
 1060 0084 43F00103 		orr	r3, r3, #1
 1061 0088 1360     		str	r3, [r2]
 404:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1062              		.loc 1 404 3
 1063 008a 06E0     		b	.L76
 1064              	.L77:
 405:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 406:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CSR |= RCC_CSR_LSION;
 1065              		.loc 1 406 11
 1066 008c 074B     		ldr	r3, .L86+8
 1067 008e 1B68     		ldr	r3, [r3]
 1068 0090 064A     		ldr	r2, .L86+8
 1069 0092 43F00103 		orr	r3, r3, #1
 1070 0096 1360     		str	r3, [r2]
 407:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1071              		.loc 1 407 3
 1072 0098 00BF     		nop
 1073              	.L76:
 1074              	.L85:
 408:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 409:../libopencm3/lib/stm32/f1/rcc.c **** }
 1075              		.loc 1 409 1
 1076 009a 00BF     		nop
 1077 009c 0C37     		adds	r7, r7, #12
 1078              		.cfi_def_cfa_offset 4
 1079 009e BD46     		mov	sp, r7
 1080              		.cfi_def_cfa_register 13
 1081              		@ sp needed
 1082 00a0 80BC     		pop	{r7}
 1083              		.cfi_restore 7
 1084              		.cfi_def_cfa_offset 0
 1085 00a2 7047     		bx	lr
 1086              	.L87:
 1087              		.align	2
 1088              	.L86:
 1089 00a4 00100240 		.word	1073876992
 1090 00a8 20100240 		.word	1073877024
 1091 00ac 24100240 		.word	1073877028
 1092              		.cfi_endproc
 1093              	.LFE8:
 1095              		.section	.text.rcc_osc_off,"ax",%progbits
 1096              		.align	1
 1097              		.global	rcc_osc_off
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1101              		.fpu softvfp
 1103              	rcc_osc_off:
 1104              	.LFB9:
 410:../libopencm3/lib/stm32/f1/rcc.c **** 
 411:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 412:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Turn off an Oscillator.
 413:../libopencm3/lib/stm32/f1/rcc.c **** 
 414:../libopencm3/lib/stm32/f1/rcc.c **** Disable an oscillator and power off.
 415:../libopencm3/lib/stm32/f1/rcc.c **** 
 416:../libopencm3/lib/stm32/f1/rcc.c **** @note An oscillator cannot be turned off if it is selected as the system clock.
 417:../libopencm3/lib/stm32/f1/rcc.c **** @note The LSE clock is in the backup domain and cannot be disabled until the
 418:../libopencm3/lib/stm32/f1/rcc.c **** backup domain write protection has been removed (see
 419:../libopencm3/lib/stm32/f1/rcc.c **** @ref pwr_disable_backup_domain_write_protect) or the backup domain has been
 420:../libopencm3/lib/stm32/f1/rcc.c **** (see reset @ref rcc_backupdomain_reset).
 421:../libopencm3/lib/stm32/f1/rcc.c **** 
 422:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] osc Oscillator ID
 423:../libopencm3/lib/stm32/f1/rcc.c **** */
 424:../libopencm3/lib/stm32/f1/rcc.c **** 
 425:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_osc_off(enum rcc_osc osc)
 426:../libopencm3/lib/stm32/f1/rcc.c **** {
 1105              		.loc 1 426 1
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 8
 1108              		@ frame_needed = 1, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110 0000 80B4     		push	{r7}
 1111              		.cfi_def_cfa_offset 4
 1112              		.cfi_offset 7, -4
 1113 0002 83B0     		sub	sp, sp, #12
 1114              		.cfi_def_cfa_offset 16
 1115 0004 00AF     		add	r7, sp, #0
 1116              		.cfi_def_cfa_register 7
 1117 0006 0346     		mov	r3, r0
 1118 0008 FB71     		strb	r3, [r7, #7]
 427:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (osc) {
 1119              		.loc 1 427 2
 1120 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1121 000c 062B     		cmp	r3, #6
 1122 000e 44D8     		bhi	.L98
 1123 0010 02A2     		adr	r2, .L91
 1124 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1125 0016 1A44     		add	r2, r2, r3
 1126 0018 1047     		bx	r2
 1127 001a 00BF     		.p2align 2
 1128              	.L91:
 1129 001c 1D000000 		.word	.L97+1-.L91
 1130 0020 2B000000 		.word	.L96+1-.L91
 1131 0024 39000000 		.word	.L95+1-.L91
 1132 0028 47000000 		.word	.L94+1-.L91
 1133 002c 55000000 		.word	.L93+1-.L91
 1134 0030 63000000 		.word	.L92+1-.L91
 1135 0034 71000000 		.word	.L90+1-.L91
 1136              		.p2align 1
 1137              	.L97:
 428:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 429:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR &= ~RCC_CR_PLLON;
 1138              		.loc 1 429 10
 1139 0038 1A4B     		ldr	r3, .L99
 1140 003a 1B68     		ldr	r3, [r3]
 1141 003c 194A     		ldr	r2, .L99
 1142 003e 23F08073 		bic	r3, r3, #16777216
 1143 0042 1360     		str	r3, [r2]
 430:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1144              		.loc 1 430 3
 1145 0044 29E0     		b	.L89
 1146              	.L96:
 431:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 432:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR &= ~RCC_CR_PLL2ON;
 1147              		.loc 1 432 10
 1148 0046 174B     		ldr	r3, .L99
 1149 0048 1B68     		ldr	r3, [r3]
 1150 004a 164A     		ldr	r2, .L99
 1151 004c 23F08063 		bic	r3, r3, #67108864
 1152 0050 1360     		str	r3, [r2]
 433:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1153              		.loc 1 433 3
 1154 0052 22E0     		b	.L89
 1155              	.L95:
 434:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 435:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR &= ~RCC_CR_PLL3ON;
 1156              		.loc 1 435 10
 1157 0054 134B     		ldr	r3, .L99
 1158 0056 1B68     		ldr	r3, [r3]
 1159 0058 124A     		ldr	r2, .L99
 1160 005a 23F08053 		bic	r3, r3, #268435456
 1161 005e 1360     		str	r3, [r2]
 436:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1162              		.loc 1 436 3
 1163 0060 1BE0     		b	.L89
 1164              	.L94:
 437:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 438:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR &= ~RCC_CR_HSEON;
 1165              		.loc 1 438 10
 1166 0062 104B     		ldr	r3, .L99
 1167 0064 1B68     		ldr	r3, [r3]
 1168 0066 0F4A     		ldr	r2, .L99
 1169 0068 23F48033 		bic	r3, r3, #65536
 1170 006c 1360     		str	r3, [r2]
 439:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1171              		.loc 1 439 3
 1172 006e 14E0     		b	.L89
 1173              	.L93:
 440:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 441:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR &= ~RCC_CR_HSION;
 1174              		.loc 1 441 10
 1175 0070 0C4B     		ldr	r3, .L99
 1176 0072 1B68     		ldr	r3, [r3]
 1177 0074 0B4A     		ldr	r2, .L99
 1178 0076 23F00103 		bic	r3, r3, #1
 1179 007a 1360     		str	r3, [r2]
 442:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1180              		.loc 1 442 3
 1181 007c 0DE0     		b	.L89
 1182              	.L92:
 443:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 444:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR &= ~RCC_BDCR_LSEON;
 1183              		.loc 1 444 12
 1184 007e 0A4B     		ldr	r3, .L99+4
 1185 0080 1B68     		ldr	r3, [r3]
 1186 0082 094A     		ldr	r2, .L99+4
 1187 0084 23F00103 		bic	r3, r3, #1
 1188 0088 1360     		str	r3, [r2]
 445:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1189              		.loc 1 445 3
 1190 008a 06E0     		b	.L89
 1191              	.L90:
 446:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 447:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CSR &= ~RCC_CSR_LSION;
 1192              		.loc 1 447 11
 1193 008c 074B     		ldr	r3, .L99+8
 1194 008e 1B68     		ldr	r3, [r3]
 1195 0090 064A     		ldr	r2, .L99+8
 1196 0092 23F00103 		bic	r3, r3, #1
 1197 0096 1360     		str	r3, [r2]
 448:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1198              		.loc 1 448 3
 1199 0098 00BF     		nop
 1200              	.L89:
 1201              	.L98:
 449:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 450:../libopencm3/lib/stm32/f1/rcc.c **** }
 1202              		.loc 1 450 1
 1203 009a 00BF     		nop
 1204 009c 0C37     		adds	r7, r7, #12
 1205              		.cfi_def_cfa_offset 4
 1206 009e BD46     		mov	sp, r7
 1207              		.cfi_def_cfa_register 13
 1208              		@ sp needed
 1209 00a0 80BC     		pop	{r7}
 1210              		.cfi_restore 7
 1211              		.cfi_def_cfa_offset 0
 1212 00a2 7047     		bx	lr
 1213              	.L100:
 1214              		.align	2
 1215              	.L99:
 1216 00a4 00100240 		.word	1073876992
 1217 00a8 20100240 		.word	1073877024
 1218 00ac 24100240 		.word	1073877028
 1219              		.cfi_endproc
 1220              	.LFE9:
 1222              		.section	.text.rcc_css_enable,"ax",%progbits
 1223              		.align	1
 1224              		.global	rcc_css_enable
 1225              		.syntax unified
 1226              		.thumb
 1227              		.thumb_func
 1228              		.fpu softvfp
 1230              	rcc_css_enable:
 1231              	.LFB10:
 451:../libopencm3/lib/stm32/f1/rcc.c **** 
 452:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 453:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Enable the Clock Security System.
 454:../libopencm3/lib/stm32/f1/rcc.c **** 
 455:../libopencm3/lib/stm32/f1/rcc.c **** */
 456:../libopencm3/lib/stm32/f1/rcc.c **** 
 457:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_css_enable(void)
 458:../libopencm3/lib/stm32/f1/rcc.c **** {
 1232              		.loc 1 458 1
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 1, uses_anonymous_args = 0
 1236              		@ link register save eliminated.
 1237 0000 80B4     		push	{r7}
 1238              		.cfi_def_cfa_offset 4
 1239              		.cfi_offset 7, -4
 1240 0002 00AF     		add	r7, sp, #0
 1241              		.cfi_def_cfa_register 7
 459:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CR |= RCC_CR_CSSON;
 1242              		.loc 1 459 9
 1243 0004 044B     		ldr	r3, .L102
 1244 0006 1B68     		ldr	r3, [r3]
 1245 0008 034A     		ldr	r2, .L102
 1246 000a 43F40023 		orr	r3, r3, #524288
 1247 000e 1360     		str	r3, [r2]
 460:../libopencm3/lib/stm32/f1/rcc.c **** }
 1248              		.loc 1 460 1
 1249 0010 00BF     		nop
 1250 0012 BD46     		mov	sp, r7
 1251              		.cfi_def_cfa_register 13
 1252              		@ sp needed
 1253 0014 80BC     		pop	{r7}
 1254              		.cfi_restore 7
 1255              		.cfi_def_cfa_offset 0
 1256 0016 7047     		bx	lr
 1257              	.L103:
 1258              		.align	2
 1259              	.L102:
 1260 0018 00100240 		.word	1073876992
 1261              		.cfi_endproc
 1262              	.LFE10:
 1264              		.section	.text.rcc_css_disable,"ax",%progbits
 1265              		.align	1
 1266              		.global	rcc_css_disable
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu softvfp
 1272              	rcc_css_disable:
 1273              	.LFB11:
 461:../libopencm3/lib/stm32/f1/rcc.c **** 
 462:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 463:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Disable the Clock Security System.
 464:../libopencm3/lib/stm32/f1/rcc.c **** 
 465:../libopencm3/lib/stm32/f1/rcc.c **** */
 466:../libopencm3/lib/stm32/f1/rcc.c **** 
 467:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_css_disable(void)
 468:../libopencm3/lib/stm32/f1/rcc.c **** {
 1274              		.loc 1 468 1
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 0
 1277              		@ frame_needed = 1, uses_anonymous_args = 0
 1278              		@ link register save eliminated.
 1279 0000 80B4     		push	{r7}
 1280              		.cfi_def_cfa_offset 4
 1281              		.cfi_offset 7, -4
 1282 0002 00AF     		add	r7, sp, #0
 1283              		.cfi_def_cfa_register 7
 469:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CR &= ~RCC_CR_CSSON;
 1284              		.loc 1 469 9
 1285 0004 044B     		ldr	r3, .L105
 1286 0006 1B68     		ldr	r3, [r3]
 1287 0008 034A     		ldr	r2, .L105
 1288 000a 23F40023 		bic	r3, r3, #524288
 1289 000e 1360     		str	r3, [r2]
 470:../libopencm3/lib/stm32/f1/rcc.c **** }
 1290              		.loc 1 470 1
 1291 0010 00BF     		nop
 1292 0012 BD46     		mov	sp, r7
 1293              		.cfi_def_cfa_register 13
 1294              		@ sp needed
 1295 0014 80BC     		pop	{r7}
 1296              		.cfi_restore 7
 1297              		.cfi_def_cfa_offset 0
 1298 0016 7047     		bx	lr
 1299              	.L106:
 1300              		.align	2
 1301              	.L105:
 1302 0018 00100240 		.word	1073876992
 1303              		.cfi_endproc
 1304              	.LFE11:
 1306              		.section	.text.rcc_set_sysclk_source,"ax",%progbits
 1307              		.align	1
 1308              		.global	rcc_set_sysclk_source
 1309              		.syntax unified
 1310              		.thumb
 1311              		.thumb_func
 1312              		.fpu softvfp
 1314              	rcc_set_sysclk_source:
 1315              	.LFB12:
 471:../libopencm3/lib/stm32/f1/rcc.c **** 
 472:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 473:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the Source for the System Clock.
 474:../libopencm3/lib/stm32/f1/rcc.c **** 
 475:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
 476:../libopencm3/lib/stm32/f1/rcc.c **** */
 477:../libopencm3/lib/stm32/f1/rcc.c **** 
 478:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_sysclk_source(uint32_t clk)
 479:../libopencm3/lib/stm32/f1/rcc.c **** {
 1316              		.loc 1 479 1
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 8
 1319              		@ frame_needed = 1, uses_anonymous_args = 0
 1320              		@ link register save eliminated.
 1321 0000 80B4     		push	{r7}
 1322              		.cfi_def_cfa_offset 4
 1323              		.cfi_offset 7, -4
 1324 0002 83B0     		sub	sp, sp, #12
 1325              		.cfi_def_cfa_offset 16
 1326 0004 00AF     		add	r7, sp, #0
 1327              		.cfi_def_cfa_register 7
 1328 0006 7860     		str	r0, [r7, #4]
 480:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 1329              		.loc 1 480 14
 1330 0008 064B     		ldr	r3, .L108
 1331 000a 1B68     		ldr	r3, [r3]
 1332              		.loc 1 480 23
 1333 000c 23F00302 		bic	r2, r3, #3
 1334              		.loc 1 480 2
 1335 0010 0449     		ldr	r1, .L108
 1336              		.loc 1 480 39
 1337 0012 7B68     		ldr	r3, [r7, #4]
 1338 0014 1343     		orrs	r3, r3, r2
 1339              		.loc 1 480 11
 1340 0016 0B60     		str	r3, [r1]
 481:../libopencm3/lib/stm32/f1/rcc.c **** 			(clk << RCC_CFGR_SW_SHIFT);
 482:../libopencm3/lib/stm32/f1/rcc.c **** }
 1341              		.loc 1 482 1
 1342 0018 00BF     		nop
 1343 001a 0C37     		adds	r7, r7, #12
 1344              		.cfi_def_cfa_offset 4
 1345 001c BD46     		mov	sp, r7
 1346              		.cfi_def_cfa_register 13
 1347              		@ sp needed
 1348 001e 80BC     		pop	{r7}
 1349              		.cfi_restore 7
 1350              		.cfi_def_cfa_offset 0
 1351 0020 7047     		bx	lr
 1352              	.L109:
 1353 0022 00BF     		.align	2
 1354              	.L108:
 1355 0024 04100240 		.word	1073876996
 1356              		.cfi_endproc
 1357              	.LFE12:
 1359              		.section	.text.rcc_set_pll_multiplication_factor,"ax",%progbits
 1360              		.align	1
 1361              		.global	rcc_set_pll_multiplication_factor
 1362              		.syntax unified
 1363              		.thumb
 1364              		.thumb_func
 1365              		.fpu softvfp
 1367              	rcc_set_pll_multiplication_factor:
 1368              	.LFB13:
 483:../libopencm3/lib/stm32/f1/rcc.c **** 
 484:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 485:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the PLL Multiplication Factor.
 486:../libopencm3/lib/stm32/f1/rcc.c **** 
 487:../libopencm3/lib/stm32/f1/rcc.c **** @note This only has effect when the PLL is disabled.
 488:../libopencm3/lib/stm32/f1/rcc.c **** 
 489:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
 490:../libopencm3/lib/stm32/f1/rcc.c **** */
 491:../libopencm3/lib/stm32/f1/rcc.c **** 
 492:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_pll_multiplication_factor(uint32_t mul)
 493:../libopencm3/lib/stm32/f1/rcc.c **** {
 1369              		.loc 1 493 1
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 8
 1372              		@ frame_needed = 1, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374 0000 80B4     		push	{r7}
 1375              		.cfi_def_cfa_offset 4
 1376              		.cfi_offset 7, -4
 1377 0002 83B0     		sub	sp, sp, #12
 1378              		.cfi_def_cfa_offset 16
 1379 0004 00AF     		add	r7, sp, #0
 1380              		.cfi_def_cfa_register 7
 1381 0006 7860     		str	r0, [r7, #4]
 494:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 1382              		.loc 1 494 14
 1383 0008 064B     		ldr	r3, .L111
 1384 000a 1B68     		ldr	r3, [r3]
 1385              		.loc 1 494 23
 1386 000c 23F47012 		bic	r2, r3, #3932160
 495:../libopencm3/lib/stm32/f1/rcc.c **** 			(mul << RCC_CFGR_PLLMUL_SHIFT);
 1387              		.loc 1 495 9
 1388 0010 7B68     		ldr	r3, [r7, #4]
 1389 0012 9B04     		lsls	r3, r3, #18
 494:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 1390              		.loc 1 494 2
 1391 0014 0349     		ldr	r1, .L111
 494:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 1392              		.loc 1 494 43
 1393 0016 1343     		orrs	r3, r3, r2
 494:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 1394              		.loc 1 494 11
 1395 0018 0B60     		str	r3, [r1]
 496:../libopencm3/lib/stm32/f1/rcc.c **** }
 1396              		.loc 1 496 1
 1397 001a 00BF     		nop
 1398 001c 0C37     		adds	r7, r7, #12
 1399              		.cfi_def_cfa_offset 4
 1400 001e BD46     		mov	sp, r7
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 0020 80BC     		pop	{r7}
 1404              		.cfi_restore 7
 1405              		.cfi_def_cfa_offset 0
 1406 0022 7047     		bx	lr
 1407              	.L112:
 1408              		.align	2
 1409              	.L111:
 1410 0024 04100240 		.word	1073876996
 1411              		.cfi_endproc
 1412              	.LFE13:
 1414              		.section	.text.rcc_set_pll2_multiplication_factor,"ax",%progbits
 1415              		.align	1
 1416              		.global	rcc_set_pll2_multiplication_factor
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1420              		.fpu softvfp
 1422              	rcc_set_pll2_multiplication_factor:
 1423              	.LFB14:
 497:../libopencm3/lib/stm32/f1/rcc.c **** 
 498:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 499:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the PLL2 Multiplication Factor.
 500:../libopencm3/lib/stm32/f1/rcc.c **** 
 501:../libopencm3/lib/stm32/f1/rcc.c **** @note This only has effect when the PLL is disabled.
 502:../libopencm3/lib/stm32/f1/rcc.c **** 
 503:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
 504:../libopencm3/lib/stm32/f1/rcc.c **** */
 505:../libopencm3/lib/stm32/f1/rcc.c **** 
 506:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_pll2_multiplication_factor(uint32_t mul)
 507:../libopencm3/lib/stm32/f1/rcc.c **** {
 1424              		.loc 1 507 1
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 8
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428              		@ link register save eliminated.
 1429 0000 80B4     		push	{r7}
 1430              		.cfi_def_cfa_offset 4
 1431              		.cfi_offset 7, -4
 1432 0002 83B0     		sub	sp, sp, #12
 1433              		.cfi_def_cfa_offset 16
 1434 0004 00AF     		add	r7, sp, #0
 1435              		.cfi_def_cfa_register 7
 1436 0006 7860     		str	r0, [r7, #4]
 508:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL2MUL) |
 1437              		.loc 1 508 15
 1438 0008 064B     		ldr	r3, .L114
 1439 000a 1B68     		ldr	r3, [r3]
 1440              		.loc 1 508 25
 1441 000c 23F47062 		bic	r2, r3, #3840
 509:../libopencm3/lib/stm32/f1/rcc.c **** 			(mul << RCC_CFGR2_PLL2MUL_SHIFT);
 1442              		.loc 1 509 9
 1443 0010 7B68     		ldr	r3, [r7, #4]
 1444 0012 1B02     		lsls	r3, r3, #8
 508:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL2MUL) |
 1445              		.loc 1 508 2
 1446 0014 0349     		ldr	r1, .L114
 508:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL2MUL) |
 1447              		.loc 1 508 47
 1448 0016 1343     		orrs	r3, r3, r2
 508:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL2MUL) |
 1449              		.loc 1 508 12
 1450 0018 0B60     		str	r3, [r1]
 510:../libopencm3/lib/stm32/f1/rcc.c **** }
 1451              		.loc 1 510 1
 1452 001a 00BF     		nop
 1453 001c 0C37     		adds	r7, r7, #12
 1454              		.cfi_def_cfa_offset 4
 1455 001e BD46     		mov	sp, r7
 1456              		.cfi_def_cfa_register 13
 1457              		@ sp needed
 1458 0020 80BC     		pop	{r7}
 1459              		.cfi_restore 7
 1460              		.cfi_def_cfa_offset 0
 1461 0022 7047     		bx	lr
 1462              	.L115:
 1463              		.align	2
 1464              	.L114:
 1465 0024 2C100240 		.word	1073877036
 1466              		.cfi_endproc
 1467              	.LFE14:
 1469              		.section	.text.rcc_set_pll3_multiplication_factor,"ax",%progbits
 1470              		.align	1
 1471              		.global	rcc_set_pll3_multiplication_factor
 1472              		.syntax unified
 1473              		.thumb
 1474              		.thumb_func
 1475              		.fpu softvfp
 1477              	rcc_set_pll3_multiplication_factor:
 1478              	.LFB15:
 511:../libopencm3/lib/stm32/f1/rcc.c **** 
 512:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 513:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the PLL3 Multiplication Factor.
 514:../libopencm3/lib/stm32/f1/rcc.c **** 
 515:../libopencm3/lib/stm32/f1/rcc.c **** @note This only has effect when the PLL is disabled.
 516:../libopencm3/lib/stm32/f1/rcc.c **** 
 517:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
 518:../libopencm3/lib/stm32/f1/rcc.c **** */
 519:../libopencm3/lib/stm32/f1/rcc.c **** 
 520:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_pll3_multiplication_factor(uint32_t mul)
 521:../libopencm3/lib/stm32/f1/rcc.c **** {
 1479              		.loc 1 521 1
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 8
 1482              		@ frame_needed = 1, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484 0000 80B4     		push	{r7}
 1485              		.cfi_def_cfa_offset 4
 1486              		.cfi_offset 7, -4
 1487 0002 83B0     		sub	sp, sp, #12
 1488              		.cfi_def_cfa_offset 16
 1489 0004 00AF     		add	r7, sp, #0
 1490              		.cfi_def_cfa_register 7
 1491 0006 7860     		str	r0, [r7, #4]
 522:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL3MUL) |
 1492              		.loc 1 522 15
 1493 0008 064B     		ldr	r3, .L117
 1494 000a 1B68     		ldr	r3, [r3]
 1495              		.loc 1 522 25
 1496 000c 23F47042 		bic	r2, r3, #61440
 523:../libopencm3/lib/stm32/f1/rcc.c **** 			(mul << RCC_CFGR2_PLL3MUL_SHIFT);
 1497              		.loc 1 523 9
 1498 0010 7B68     		ldr	r3, [r7, #4]
 1499 0012 1B03     		lsls	r3, r3, #12
 522:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL3MUL) |
 1500              		.loc 1 522 2
 1501 0014 0349     		ldr	r1, .L117
 522:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL3MUL) |
 1502              		.loc 1 522 47
 1503 0016 1343     		orrs	r3, r3, r2
 522:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PLL3MUL) |
 1504              		.loc 1 522 12
 1505 0018 0B60     		str	r3, [r1]
 524:../libopencm3/lib/stm32/f1/rcc.c **** }
 1506              		.loc 1 524 1
 1507 001a 00BF     		nop
 1508 001c 0C37     		adds	r7, r7, #12
 1509              		.cfi_def_cfa_offset 4
 1510 001e BD46     		mov	sp, r7
 1511              		.cfi_def_cfa_register 13
 1512              		@ sp needed
 1513 0020 80BC     		pop	{r7}
 1514              		.cfi_restore 7
 1515              		.cfi_def_cfa_offset 0
 1516 0022 7047     		bx	lr
 1517              	.L118:
 1518              		.align	2
 1519              	.L117:
 1520 0024 2C100240 		.word	1073877036
 1521              		.cfi_endproc
 1522              	.LFE15:
 1524              		.section	.text.rcc_set_pll_source,"ax",%progbits
 1525              		.align	1
 1526              		.global	rcc_set_pll_source
 1527              		.syntax unified
 1528              		.thumb
 1529              		.thumb_func
 1530              		.fpu softvfp
 1532              	rcc_set_pll_source:
 1533              	.LFB16:
 525:../libopencm3/lib/stm32/f1/rcc.c **** 
 526:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 527:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the PLL Clock Source.
 528:../libopencm3/lib/stm32/f1/rcc.c **** 
 529:../libopencm3/lib/stm32/f1/rcc.c **** @note This only has effect when the PLL is disabled.
 530:../libopencm3/lib/stm32/f1/rcc.c **** 
 531:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
 532:../libopencm3/lib/stm32/f1/rcc.c **** */
 533:../libopencm3/lib/stm32/f1/rcc.c **** 
 534:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_pll_source(uint32_t pllsrc)
 535:../libopencm3/lib/stm32/f1/rcc.c **** {
 1534              		.loc 1 535 1
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 8
 1537              		@ frame_needed = 1, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 1539 0000 80B4     		push	{r7}
 1540              		.cfi_def_cfa_offset 4
 1541              		.cfi_offset 7, -4
 1542 0002 83B0     		sub	sp, sp, #12
 1543              		.cfi_def_cfa_offset 16
 1544 0004 00AF     		add	r7, sp, #0
 1545              		.cfi_def_cfa_register 7
 1546 0006 7860     		str	r0, [r7, #4]
 536:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 1547              		.loc 1 536 14
 1548 0008 064B     		ldr	r3, .L120
 1549 000a 1B68     		ldr	r3, [r3]
 1550              		.loc 1 536 23
 1551 000c 23F48032 		bic	r2, r3, #65536
 537:../libopencm3/lib/stm32/f1/rcc.c **** 			(pllsrc << 16);
 1552              		.loc 1 537 12
 1553 0010 7B68     		ldr	r3, [r7, #4]
 1554 0012 1B04     		lsls	r3, r3, #16
 536:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 1555              		.loc 1 536 2
 1556 0014 0349     		ldr	r1, .L120
 536:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 1557              		.loc 1 536 43
 1558 0016 1343     		orrs	r3, r3, r2
 536:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 1559              		.loc 1 536 11
 1560 0018 0B60     		str	r3, [r1]
 538:../libopencm3/lib/stm32/f1/rcc.c **** }
 1561              		.loc 1 538 1
 1562 001a 00BF     		nop
 1563 001c 0C37     		adds	r7, r7, #12
 1564              		.cfi_def_cfa_offset 4
 1565 001e BD46     		mov	sp, r7
 1566              		.cfi_def_cfa_register 13
 1567              		@ sp needed
 1568 0020 80BC     		pop	{r7}
 1569              		.cfi_restore 7
 1570              		.cfi_def_cfa_offset 0
 1571 0022 7047     		bx	lr
 1572              	.L121:
 1573              		.align	2
 1574              	.L120:
 1575 0024 04100240 		.word	1073876996
 1576              		.cfi_endproc
 1577              	.LFE16:
 1579              		.section	.text.rcc_set_pllxtpre,"ax",%progbits
 1580              		.align	1
 1581              		.global	rcc_set_pllxtpre
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1585              		.fpu softvfp
 1587              	rcc_set_pllxtpre:
 1588              	.LFB17:
 539:../libopencm3/lib/stm32/f1/rcc.c **** 
 540:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 541:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the HSE Frequency Divider used as PLL Clock Source.
 542:../libopencm3/lib/stm32/f1/rcc.c **** 
 543:../libopencm3/lib/stm32/f1/rcc.c **** @note This only has effect when the PLL is disabled.
 544:../libopencm3/lib/stm32/f1/rcc.c **** 
 545:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
 546:../libopencm3/lib/stm32/f1/rcc.c **** */
 547:../libopencm3/lib/stm32/f1/rcc.c **** 
 548:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_pllxtpre(uint32_t pllxtpre)
 549:../libopencm3/lib/stm32/f1/rcc.c **** {
 1589              		.loc 1 549 1
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 8
 1592              		@ frame_needed = 1, uses_anonymous_args = 0
 1593              		@ link register save eliminated.
 1594 0000 80B4     		push	{r7}
 1595              		.cfi_def_cfa_offset 4
 1596              		.cfi_offset 7, -4
 1597 0002 83B0     		sub	sp, sp, #12
 1598              		.cfi_def_cfa_offset 16
 1599 0004 00AF     		add	r7, sp, #0
 1600              		.cfi_def_cfa_register 7
 1601 0006 7860     		str	r0, [r7, #4]
 550:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 1602              		.loc 1 550 14
 1603 0008 064B     		ldr	r3, .L123
 1604 000a 1B68     		ldr	r3, [r3]
 1605              		.loc 1 550 23
 1606 000c 23F40032 		bic	r2, r3, #131072
 551:../libopencm3/lib/stm32/f1/rcc.c **** 			(pllxtpre << 17);
 1607              		.loc 1 551 14
 1608 0010 7B68     		ldr	r3, [r7, #4]
 1609 0012 5B04     		lsls	r3, r3, #17
 550:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 1610              		.loc 1 550 2
 1611 0014 0349     		ldr	r1, .L123
 550:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 1612              		.loc 1 550 45
 1613 0016 1343     		orrs	r3, r3, r2
 550:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 1614              		.loc 1 550 11
 1615 0018 0B60     		str	r3, [r1]
 552:../libopencm3/lib/stm32/f1/rcc.c **** }
 1616              		.loc 1 552 1
 1617 001a 00BF     		nop
 1618 001c 0C37     		adds	r7, r7, #12
 1619              		.cfi_def_cfa_offset 4
 1620 001e BD46     		mov	sp, r7
 1621              		.cfi_def_cfa_register 13
 1622              		@ sp needed
 1623 0020 80BC     		pop	{r7}
 1624              		.cfi_restore 7
 1625              		.cfi_def_cfa_offset 0
 1626 0022 7047     		bx	lr
 1627              	.L124:
 1628              		.align	2
 1629              	.L123:
 1630 0024 04100240 		.word	1073876996
 1631              		.cfi_endproc
 1632              	.LFE17:
 1634              		.section	.text.rcc_rtc_clock_enabled_flag,"ax",%progbits
 1635              		.align	1
 1636              		.global	rcc_rtc_clock_enabled_flag
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1640              		.fpu softvfp
 1642              	rcc_rtc_clock_enabled_flag:
 1643              	.LFB18:
 553:../libopencm3/lib/stm32/f1/rcc.c **** 
 554:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 555:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC RTC Clock Enabled Flag
 556:../libopencm3/lib/stm32/f1/rcc.c **** 
 557:../libopencm3/lib/stm32/f1/rcc.c **** @returns uint32_t. Nonzero if the RTC Clock is enabled.
 558:../libopencm3/lib/stm32/f1/rcc.c **** */
 559:../libopencm3/lib/stm32/f1/rcc.c **** 
 560:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_rtc_clock_enabled_flag(void)
 561:../libopencm3/lib/stm32/f1/rcc.c **** {
 1644              		.loc 1 561 1
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 1, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 1649 0000 80B4     		push	{r7}
 1650              		.cfi_def_cfa_offset 4
 1651              		.cfi_offset 7, -4
 1652 0002 00AF     		add	r7, sp, #0
 1653              		.cfi_def_cfa_register 7
 562:../libopencm3/lib/stm32/f1/rcc.c **** 	return RCC_BDCR & RCC_BDCR_RTCEN;
 1654              		.loc 1 562 18
 1655 0004 034B     		ldr	r3, .L127
 1656 0006 1B68     		ldr	r3, [r3]
 1657 0008 03F40043 		and	r3, r3, #32768
 563:../libopencm3/lib/stm32/f1/rcc.c **** }
 1658              		.loc 1 563 1
 1659 000c 1846     		mov	r0, r3
 1660 000e BD46     		mov	sp, r7
 1661              		.cfi_def_cfa_register 13
 1662              		@ sp needed
 1663 0010 80BC     		pop	{r7}
 1664              		.cfi_restore 7
 1665              		.cfi_def_cfa_offset 0
 1666 0012 7047     		bx	lr
 1667              	.L128:
 1668              		.align	2
 1669              	.L127:
 1670 0014 20100240 		.word	1073877024
 1671              		.cfi_endproc
 1672              	.LFE18:
 1674              		.section	.text.rcc_enable_rtc_clock,"ax",%progbits
 1675              		.align	1
 1676              		.global	rcc_enable_rtc_clock
 1677              		.syntax unified
 1678              		.thumb
 1679              		.thumb_func
 1680              		.fpu softvfp
 1682              	rcc_enable_rtc_clock:
 1683              	.LFB19:
 564:../libopencm3/lib/stm32/f1/rcc.c **** 
 565:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 566:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Enable the RTC clock
 567:../libopencm3/lib/stm32/f1/rcc.c **** 
 568:../libopencm3/lib/stm32/f1/rcc.c **** */
 569:../libopencm3/lib/stm32/f1/rcc.c **** 
 570:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_enable_rtc_clock(void)
 571:../libopencm3/lib/stm32/f1/rcc.c **** {
 1684              		.loc 1 571 1
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 0
 1687              		@ frame_needed = 1, uses_anonymous_args = 0
 1688              		@ link register save eliminated.
 1689 0000 80B4     		push	{r7}
 1690              		.cfi_def_cfa_offset 4
 1691              		.cfi_offset 7, -4
 1692 0002 00AF     		add	r7, sp, #0
 1693              		.cfi_def_cfa_register 7
 572:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_BDCR |= RCC_BDCR_RTCEN;
 1694              		.loc 1 572 11
 1695 0004 044B     		ldr	r3, .L130
 1696 0006 1B68     		ldr	r3, [r3]
 1697 0008 034A     		ldr	r2, .L130
 1698 000a 43F40043 		orr	r3, r3, #32768
 1699 000e 1360     		str	r3, [r2]
 573:../libopencm3/lib/stm32/f1/rcc.c **** }
 1700              		.loc 1 573 1
 1701 0010 00BF     		nop
 1702 0012 BD46     		mov	sp, r7
 1703              		.cfi_def_cfa_register 13
 1704              		@ sp needed
 1705 0014 80BC     		pop	{r7}
 1706              		.cfi_restore 7
 1707              		.cfi_def_cfa_offset 0
 1708 0016 7047     		bx	lr
 1709              	.L131:
 1710              		.align	2
 1711              	.L130:
 1712 0018 20100240 		.word	1073877024
 1713              		.cfi_endproc
 1714              	.LFE19:
 1716              		.section	.text.rcc_set_rtc_clock_source,"ax",%progbits
 1717              		.align	1
 1718              		.global	rcc_set_rtc_clock_source
 1719              		.syntax unified
 1720              		.thumb
 1721              		.thumb_func
 1722              		.fpu softvfp
 1724              	rcc_set_rtc_clock_source:
 1725              	.LFB20:
 574:../libopencm3/lib/stm32/f1/rcc.c **** 
 575:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 576:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the Source for the RTC clock
 577:../libopencm3/lib/stm32/f1/rcc.c **** 
 578:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] clock_source RTC clock source. Only HSE/128, LSE and LSI.
 579:../libopencm3/lib/stm32/f1/rcc.c **** */
 580:../libopencm3/lib/stm32/f1/rcc.c **** 
 581:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
 582:../libopencm3/lib/stm32/f1/rcc.c **** {
 1726              		.loc 1 582 1
 1727              		.cfi_startproc
 1728              		@ args = 0, pretend = 0, frame = 16
 1729              		@ frame_needed = 1, uses_anonymous_args = 0
 1730              		@ link register save eliminated.
 1731 0000 80B4     		push	{r7}
 1732              		.cfi_def_cfa_offset 4
 1733              		.cfi_offset 7, -4
 1734 0002 85B0     		sub	sp, sp, #20
 1735              		.cfi_def_cfa_offset 24
 1736 0004 00AF     		add	r7, sp, #0
 1737              		.cfi_def_cfa_register 7
 1738 0006 0346     		mov	r3, r0
 1739 0008 FB71     		strb	r3, [r7, #7]
 583:../libopencm3/lib/stm32/f1/rcc.c **** 	uint32_t reg32;
 584:../libopencm3/lib/stm32/f1/rcc.c **** 
 585:../libopencm3/lib/stm32/f1/rcc.c **** 	switch (clock_source) {
 1740              		.loc 1 585 2
 1741 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1742 000c 062B     		cmp	r3, #6
 1743 000e 6ED8     		bhi	.L142
 1744 0010 02A2     		adr	r2, .L135
 1745 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1746 0016 1A44     		add	r2, r2, r3
 1747 0018 1047     		bx	r2
 1748 001a 00BF     		.p2align 2
 1749              	.L135:
 1750 001c C5000000 		.word	.L137+1-.L135
 1751 0020 C5000000 		.word	.L137+1-.L135
 1752 0024 C5000000 		.word	.L137+1-.L135
 1753 0028 8D000000 		.word	.L138+1-.L135
 1754 002c C5000000 		.word	.L137+1-.L135
 1755 0030 1D000000 		.word	.L136+1-.L135
 1756 0034 55000000 		.word	.L134+1-.L135
 1757              		.p2align 1
 1758              	.L136:
 586:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSE:
 587:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Turn the LSE on and wait while it stabilises. */
 588:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR |= RCC_BDCR_LSEON;
 1759              		.loc 1 588 12
 1760 0038 2F4B     		ldr	r3, .L143
 1761 003a 1B68     		ldr	r3, [r3]
 1762 003c 2E4A     		ldr	r2, .L143
 1763 003e 43F00103 		orr	r3, r3, #1
 1764 0042 1360     		str	r3, [r2]
 589:../libopencm3/lib/stm32/f1/rcc.c **** 		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 1765              		.loc 1 589 9
 1766 0044 00BF     		nop
 1767              	.L139:
 1768              		.loc 1 589 20 discriminator 1
 1769 0046 2C4B     		ldr	r3, .L143
 1770 0048 1B68     		ldr	r3, [r3]
 1771              		.loc 1 589 17 discriminator 1
 1772 004a 03F00203 		and	r3, r3, #2
 1773 004e FB60     		str	r3, [r7, #12]
 1774              		.loc 1 589 9 discriminator 1
 1775 0050 FB68     		ldr	r3, [r7, #12]
 1776 0052 002B     		cmp	r3, #0
 1777 0054 F7D0     		beq	.L139
 590:../libopencm3/lib/stm32/f1/rcc.c **** 
 591:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Choose LSE as the RTC clock source. */
 592:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 1778              		.loc 1 592 12
 1779 0056 284B     		ldr	r3, .L143
 1780 0058 1B68     		ldr	r3, [r3]
 1781 005a 274A     		ldr	r2, .L143
 1782 005c 23F44073 		bic	r3, r3, #768
 1783 0060 1360     		str	r3, [r2]
 593:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR |= (1 << 8);
 1784              		.loc 1 593 12
 1785 0062 254B     		ldr	r3, .L143
 1786 0064 1B68     		ldr	r3, [r3]
 1787 0066 244A     		ldr	r2, .L143
 1788 0068 43F48073 		orr	r3, r3, #256
 1789 006c 1360     		str	r3, [r2]
 594:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1790              		.loc 1 594 3
 1791 006e 3EE0     		b	.L133
 1792              	.L134:
 595:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_LSI:
 596:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Turn the LSI on and wait while it stabilises. */
 597:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CSR |= RCC_CSR_LSION;
 1793              		.loc 1 597 11
 1794 0070 224B     		ldr	r3, .L143+4
 1795 0072 1B68     		ldr	r3, [r3]
 1796 0074 214A     		ldr	r2, .L143+4
 1797 0076 43F00103 		orr	r3, r3, #1
 1798 007a 1360     		str	r3, [r2]
 598:../libopencm3/lib/stm32/f1/rcc.c **** 		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 1799              		.loc 1 598 9
 1800 007c 00BF     		nop
 1801              	.L140:
 1802              		.loc 1 598 20 discriminator 1
 1803 007e 1F4B     		ldr	r3, .L143+4
 1804 0080 1B68     		ldr	r3, [r3]
 1805              		.loc 1 598 17 discriminator 1
 1806 0082 03F00203 		and	r3, r3, #2
 1807 0086 FB60     		str	r3, [r7, #12]
 1808              		.loc 1 598 9 discriminator 1
 1809 0088 FB68     		ldr	r3, [r7, #12]
 1810 008a 002B     		cmp	r3, #0
 1811 008c F7D0     		beq	.L140
 599:../libopencm3/lib/stm32/f1/rcc.c **** 
 600:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Choose LSI as the RTC clock source. */
 601:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 1812              		.loc 1 601 12
 1813 008e 1A4B     		ldr	r3, .L143
 1814 0090 1B68     		ldr	r3, [r3]
 1815 0092 194A     		ldr	r2, .L143
 1816 0094 23F44073 		bic	r3, r3, #768
 1817 0098 1360     		str	r3, [r2]
 602:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR |= (1 << 9);
 1818              		.loc 1 602 12
 1819 009a 174B     		ldr	r3, .L143
 1820 009c 1B68     		ldr	r3, [r3]
 1821 009e 164A     		ldr	r2, .L143
 1822 00a0 43F40073 		orr	r3, r3, #512
 1823 00a4 1360     		str	r3, [r2]
 603:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1824              		.loc 1 603 3
 1825 00a6 22E0     		b	.L133
 1826              	.L138:
 604:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSE:
 605:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Turn the HSE on and wait while it stabilises. */
 606:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CR |= RCC_CR_HSEON;
 1827              		.loc 1 606 10
 1828 00a8 154B     		ldr	r3, .L143+8
 1829 00aa 1B68     		ldr	r3, [r3]
 1830 00ac 144A     		ldr	r2, .L143+8
 1831 00ae 43F48033 		orr	r3, r3, #65536
 1832 00b2 1360     		str	r3, [r2]
 607:../libopencm3/lib/stm32/f1/rcc.c **** 		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 1833              		.loc 1 607 9
 1834 00b4 00BF     		nop
 1835              	.L141:
 1836              		.loc 1 607 20 discriminator 1
 1837 00b6 124B     		ldr	r3, .L143+8
 1838 00b8 1B68     		ldr	r3, [r3]
 1839              		.loc 1 607 17 discriminator 1
 1840 00ba 03F40033 		and	r3, r3, #131072
 1841 00be FB60     		str	r3, [r7, #12]
 1842              		.loc 1 607 9 discriminator 1
 1843 00c0 FB68     		ldr	r3, [r7, #12]
 1844 00c2 002B     		cmp	r3, #0
 1845 00c4 F7D0     		beq	.L141
 608:../libopencm3/lib/stm32/f1/rcc.c **** 
 609:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Choose HSE as the RTC clock source. */
 610:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 1846              		.loc 1 610 12
 1847 00c6 0C4B     		ldr	r3, .L143
 1848 00c8 1B68     		ldr	r3, [r3]
 1849 00ca 0B4A     		ldr	r2, .L143
 1850 00cc 23F44073 		bic	r3, r3, #768
 1851 00d0 1360     		str	r3, [r2]
 611:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR |= (1 << 9) | (1 << 8);
 1852              		.loc 1 611 12
 1853 00d2 094B     		ldr	r3, .L143
 1854 00d4 1B68     		ldr	r3, [r3]
 1855 00d6 084A     		ldr	r2, .L143
 1856 00d8 43F44073 		orr	r3, r3, #768
 1857 00dc 1360     		str	r3, [r2]
 612:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1858              		.loc 1 612 3
 1859 00de 06E0     		b	.L133
 1860              	.L137:
 613:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL:
 614:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL2:
 615:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_PLL3:
 616:../libopencm3/lib/stm32/f1/rcc.c **** 	case RCC_HSI:
 617:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Unusable clock source, here to prevent warnings. */
 618:../libopencm3/lib/stm32/f1/rcc.c **** 		/* Turn off clock sources to RTC. */
 619:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 1861              		.loc 1 619 12
 1862 00e0 054B     		ldr	r3, .L143
 1863 00e2 1B68     		ldr	r3, [r3]
 1864 00e4 044A     		ldr	r2, .L143
 1865 00e6 23F44073 		bic	r3, r3, #768
 1866 00ea 1360     		str	r3, [r2]
 620:../libopencm3/lib/stm32/f1/rcc.c **** 		break;
 1867              		.loc 1 620 3
 1868 00ec 00BF     		nop
 1869              	.L133:
 1870              	.L142:
 621:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 622:../libopencm3/lib/stm32/f1/rcc.c **** }
 1871              		.loc 1 622 1
 1872 00ee 00BF     		nop
 1873 00f0 1437     		adds	r7, r7, #20
 1874              		.cfi_def_cfa_offset 4
 1875 00f2 BD46     		mov	sp, r7
 1876              		.cfi_def_cfa_register 13
 1877              		@ sp needed
 1878 00f4 80BC     		pop	{r7}
 1879              		.cfi_restore 7
 1880              		.cfi_def_cfa_offset 0
 1881 00f6 7047     		bx	lr
 1882              	.L144:
 1883              		.align	2
 1884              	.L143:
 1885 00f8 20100240 		.word	1073877024
 1886 00fc 24100240 		.word	1073877028
 1887 0100 00100240 		.word	1073876992
 1888              		.cfi_endproc
 1889              	.LFE20:
 1891              		.section	.text.rcc_set_adcpre,"ax",%progbits
 1892              		.align	1
 1893              		.global	rcc_set_adcpre
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu softvfp
 1899              	rcc_set_adcpre:
 1900              	.LFB21:
 623:../libopencm3/lib/stm32/f1/rcc.c **** 
 624:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 625:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief ADC Setup the A/D Clock
 626:../libopencm3/lib/stm32/f1/rcc.c **** 
 627:../libopencm3/lib/stm32/f1/rcc.c **** The ADC's have a common clock prescale setting.
 628:../libopencm3/lib/stm32/f1/rcc.c **** 
 629:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
 630:../libopencm3/lib/stm32/f1/rcc.c **** */
 631:../libopencm3/lib/stm32/f1/rcc.c **** 
 632:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_adcpre(uint32_t adcpre)
 633:../libopencm3/lib/stm32/f1/rcc.c **** {
 1901              		.loc 1 633 1
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906 0000 80B4     		push	{r7}
 1907              		.cfi_def_cfa_offset 4
 1908              		.cfi_offset 7, -4
 1909 0002 83B0     		sub	sp, sp, #12
 1910              		.cfi_def_cfa_offset 16
 1911 0004 00AF     		add	r7, sp, #0
 1912              		.cfi_def_cfa_register 7
 1913 0006 7860     		str	r0, [r7, #4]
 634:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 1914              		.loc 1 634 14
 1915 0008 064B     		ldr	r3, .L146
 1916 000a 1B68     		ldr	r3, [r3]
 1917              		.loc 1 634 23
 1918 000c 23F44042 		bic	r2, r3, #49152
 635:../libopencm3/lib/stm32/f1/rcc.c **** 			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
 1919              		.loc 1 635 12
 1920 0010 7B68     		ldr	r3, [r7, #4]
 1921 0012 9B03     		lsls	r3, r3, #14
 634:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 1922              		.loc 1 634 2
 1923 0014 0349     		ldr	r1, .L146
 634:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 1924              		.loc 1 634 43
 1925 0016 1343     		orrs	r3, r3, r2
 634:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 1926              		.loc 1 634 11
 1927 0018 0B60     		str	r3, [r1]
 636:../libopencm3/lib/stm32/f1/rcc.c **** }
 1928              		.loc 1 636 1
 1929 001a 00BF     		nop
 1930 001c 0C37     		adds	r7, r7, #12
 1931              		.cfi_def_cfa_offset 4
 1932 001e BD46     		mov	sp, r7
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 0020 80BC     		pop	{r7}
 1936              		.cfi_restore 7
 1937              		.cfi_def_cfa_offset 0
 1938 0022 7047     		bx	lr
 1939              	.L147:
 1940              		.align	2
 1941              	.L146:
 1942 0024 04100240 		.word	1073876996
 1943              		.cfi_endproc
 1944              	.LFE21:
 1946              		.section	.text.rcc_set_ppre2,"ax",%progbits
 1947              		.align	1
 1948              		.global	rcc_set_ppre2
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.fpu softvfp
 1954              	rcc_set_ppre2:
 1955              	.LFB22:
 637:../libopencm3/lib/stm32/f1/rcc.c **** 
 638:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 639:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the APB2 Prescale Factor.
 640:../libopencm3/lib/stm32/f1/rcc.c **** 
 641:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
 642:../libopencm3/lib/stm32/f1/rcc.c **** */
 643:../libopencm3/lib/stm32/f1/rcc.c **** 
 644:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_ppre2(uint32_t ppre2)
 645:../libopencm3/lib/stm32/f1/rcc.c **** {
 1956              		.loc 1 645 1
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 8
 1959              		@ frame_needed = 1, uses_anonymous_args = 0
 1960              		@ link register save eliminated.
 1961 0000 80B4     		push	{r7}
 1962              		.cfi_def_cfa_offset 4
 1963              		.cfi_offset 7, -4
 1964 0002 83B0     		sub	sp, sp, #12
 1965              		.cfi_def_cfa_offset 16
 1966 0004 00AF     		add	r7, sp, #0
 1967              		.cfi_def_cfa_register 7
 1968 0006 7860     		str	r0, [r7, #4]
 646:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 1969              		.loc 1 646 14
 1970 0008 064B     		ldr	r3, .L149
 1971 000a 1B68     		ldr	r3, [r3]
 1972              		.loc 1 646 23
 1973 000c 23F46052 		bic	r2, r3, #14336
 647:../libopencm3/lib/stm32/f1/rcc.c **** 			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
 1974              		.loc 1 647 11
 1975 0010 7B68     		ldr	r3, [r7, #4]
 1976 0012 DB02     		lsls	r3, r3, #11
 646:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 1977              		.loc 1 646 2
 1978 0014 0349     		ldr	r1, .L149
 646:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 1979              		.loc 1 646 42
 1980 0016 1343     		orrs	r3, r3, r2
 646:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 1981              		.loc 1 646 11
 1982 0018 0B60     		str	r3, [r1]
 648:../libopencm3/lib/stm32/f1/rcc.c **** }
 1983              		.loc 1 648 1
 1984 001a 00BF     		nop
 1985 001c 0C37     		adds	r7, r7, #12
 1986              		.cfi_def_cfa_offset 4
 1987 001e BD46     		mov	sp, r7
 1988              		.cfi_def_cfa_register 13
 1989              		@ sp needed
 1990 0020 80BC     		pop	{r7}
 1991              		.cfi_restore 7
 1992              		.cfi_def_cfa_offset 0
 1993 0022 7047     		bx	lr
 1994              	.L150:
 1995              		.align	2
 1996              	.L149:
 1997 0024 04100240 		.word	1073876996
 1998              		.cfi_endproc
 1999              	.LFE22:
 2001              		.section	.text.rcc_set_ppre1,"ax",%progbits
 2002              		.align	1
 2003              		.global	rcc_set_ppre1
 2004              		.syntax unified
 2005              		.thumb
 2006              		.thumb_func
 2007              		.fpu softvfp
 2009              	rcc_set_ppre1:
 2010              	.LFB23:
 649:../libopencm3/lib/stm32/f1/rcc.c **** 
 650:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 651:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the APB1 Prescale Factor.
 652:../libopencm3/lib/stm32/f1/rcc.c **** 
 653:../libopencm3/lib/stm32/f1/rcc.c **** @note The APB1 clock frequency must not exceed 36MHz.
 654:../libopencm3/lib/stm32/f1/rcc.c **** 
 655:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
 656:../libopencm3/lib/stm32/f1/rcc.c **** */
 657:../libopencm3/lib/stm32/f1/rcc.c **** 
 658:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_ppre1(uint32_t ppre1)
 659:../libopencm3/lib/stm32/f1/rcc.c **** {
 2011              		.loc 1 659 1
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 8
 2014              		@ frame_needed = 1, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
 2016 0000 80B4     		push	{r7}
 2017              		.cfi_def_cfa_offset 4
 2018              		.cfi_offset 7, -4
 2019 0002 83B0     		sub	sp, sp, #12
 2020              		.cfi_def_cfa_offset 16
 2021 0004 00AF     		add	r7, sp, #0
 2022              		.cfi_def_cfa_register 7
 2023 0006 7860     		str	r0, [r7, #4]
 660:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 2024              		.loc 1 660 14
 2025 0008 064B     		ldr	r3, .L152
 2026 000a 1B68     		ldr	r3, [r3]
 2027              		.loc 1 660 23
 2028 000c 23F4E062 		bic	r2, r3, #1792
 661:../libopencm3/lib/stm32/f1/rcc.c **** 			(ppre1 << RCC_CFGR_PPRE1_SHIFT);
 2029              		.loc 1 661 11
 2030 0010 7B68     		ldr	r3, [r7, #4]
 2031 0012 1B02     		lsls	r3, r3, #8
 660:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 2032              		.loc 1 660 2
 2033 0014 0349     		ldr	r1, .L152
 660:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 2034              		.loc 1 660 42
 2035 0016 1343     		orrs	r3, r3, r2
 660:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 2036              		.loc 1 660 11
 2037 0018 0B60     		str	r3, [r1]
 662:../libopencm3/lib/stm32/f1/rcc.c **** 
 663:../libopencm3/lib/stm32/f1/rcc.c **** }
 2038              		.loc 1 663 1
 2039 001a 00BF     		nop
 2040 001c 0C37     		adds	r7, r7, #12
 2041              		.cfi_def_cfa_offset 4
 2042 001e BD46     		mov	sp, r7
 2043              		.cfi_def_cfa_register 13
 2044              		@ sp needed
 2045 0020 80BC     		pop	{r7}
 2046              		.cfi_restore 7
 2047              		.cfi_def_cfa_offset 0
 2048 0022 7047     		bx	lr
 2049              	.L153:
 2050              		.align	2
 2051              	.L152:
 2052 0024 04100240 		.word	1073876996
 2053              		.cfi_endproc
 2054              	.LFE23:
 2056              		.section	.text.rcc_set_hpre,"ax",%progbits
 2057              		.align	1
 2058              		.global	rcc_set_hpre
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu softvfp
 2064              	rcc_set_hpre:
 2065              	.LFB24:
 664:../libopencm3/lib/stm32/f1/rcc.c **** 
 665:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 666:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the AHB Prescale Factor.
 667:../libopencm3/lib/stm32/f1/rcc.c **** 
 668:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 669:../libopencm3/lib/stm32/f1/rcc.c **** */
 670:../libopencm3/lib/stm32/f1/rcc.c **** 
 671:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_hpre(uint32_t hpre)
 672:../libopencm3/lib/stm32/f1/rcc.c **** {
 2066              		.loc 1 672 1
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 8
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070              		@ link register save eliminated.
 2071 0000 80B4     		push	{r7}
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 7, -4
 2074 0002 83B0     		sub	sp, sp, #12
 2075              		.cfi_def_cfa_offset 16
 2076 0004 00AF     		add	r7, sp, #0
 2077              		.cfi_def_cfa_register 7
 2078 0006 7860     		str	r0, [r7, #4]
 673:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 2079              		.loc 1 673 14
 2080 0008 064B     		ldr	r3, .L155
 2081 000a 1B68     		ldr	r3, [r3]
 2082              		.loc 1 673 23
 2083 000c 23F0F002 		bic	r2, r3, #240
 674:../libopencm3/lib/stm32/f1/rcc.c **** 			(hpre << RCC_CFGR_HPRE_SHIFT);
 2084              		.loc 1 674 10
 2085 0010 7B68     		ldr	r3, [r7, #4]
 2086 0012 1B01     		lsls	r3, r3, #4
 673:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 2087              		.loc 1 673 2
 2088 0014 0349     		ldr	r1, .L155
 673:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 2089              		.loc 1 673 41
 2090 0016 1343     		orrs	r3, r3, r2
 673:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 2091              		.loc 1 673 11
 2092 0018 0B60     		str	r3, [r1]
 675:../libopencm3/lib/stm32/f1/rcc.c **** 
 676:../libopencm3/lib/stm32/f1/rcc.c **** }
 2093              		.loc 1 676 1
 2094 001a 00BF     		nop
 2095 001c 0C37     		adds	r7, r7, #12
 2096              		.cfi_def_cfa_offset 4
 2097 001e BD46     		mov	sp, r7
 2098              		.cfi_def_cfa_register 13
 2099              		@ sp needed
 2100 0020 80BC     		pop	{r7}
 2101              		.cfi_restore 7
 2102              		.cfi_def_cfa_offset 0
 2103 0022 7047     		bx	lr
 2104              	.L156:
 2105              		.align	2
 2106              	.L155:
 2107 0024 04100240 		.word	1073876996
 2108              		.cfi_endproc
 2109              	.LFE24:
 2111              		.section	.text.rcc_set_usbpre,"ax",%progbits
 2112              		.align	1
 2113              		.global	rcc_set_usbpre
 2114              		.syntax unified
 2115              		.thumb
 2116              		.thumb_func
 2117              		.fpu softvfp
 2119              	rcc_set_usbpre:
 2120              	.LFB25:
 677:../libopencm3/lib/stm32/f1/rcc.c **** 
 678:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 679:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set the USB Prescale Factor.
 680:../libopencm3/lib/stm32/f1/rcc.c **** 
 681:../libopencm3/lib/stm32/f1/rcc.c **** The prescale factor can be set to 1 (no prescale) for use when the PLL clock is
 682:../libopencm3/lib/stm32/f1/rcc.c **** 48MHz, or 1.5 to generate the 48MHz USB clock from a 72MHz PLL clock.
 683:../libopencm3/lib/stm32/f1/rcc.c **** 
 684:../libopencm3/lib/stm32/f1/rcc.c **** @note This bit cannot be reset while the USB clock is enabled.
 685:../libopencm3/lib/stm32/f1/rcc.c **** 
 686:../libopencm3/lib/stm32/f1/rcc.c **** @param[in] usbpre Unsigned int32. USB prescale factor @ref rcc_cfgr_usbpre
 687:../libopencm3/lib/stm32/f1/rcc.c **** */
 688:../libopencm3/lib/stm32/f1/rcc.c **** 
 689:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_usbpre(uint32_t usbpre)
 690:../libopencm3/lib/stm32/f1/rcc.c **** {
 2121              		.loc 1 690 1
 2122              		.cfi_startproc
 2123              		@ args = 0, pretend = 0, frame = 8
 2124              		@ frame_needed = 1, uses_anonymous_args = 0
 2125              		@ link register save eliminated.
 2126 0000 80B4     		push	{r7}
 2127              		.cfi_def_cfa_offset 4
 2128              		.cfi_offset 7, -4
 2129 0002 83B0     		sub	sp, sp, #12
 2130              		.cfi_def_cfa_offset 16
 2131 0004 00AF     		add	r7, sp, #0
 2132              		.cfi_def_cfa_register 7
 2133 0006 7860     		str	r0, [r7, #4]
 691:../libopencm3/lib/stm32/f1/rcc.c **** 	if (usbpre) {
 2134              		.loc 1 691 5
 2135 0008 7B68     		ldr	r3, [r7, #4]
 2136 000a 002B     		cmp	r3, #0
 2137 000c 06D0     		beq	.L158
 692:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CFGR |= RCC_CFGR_USBPRE;
 2138              		.loc 1 692 12
 2139 000e 094B     		ldr	r3, .L161
 2140 0010 1B68     		ldr	r3, [r3]
 2141 0012 084A     		ldr	r2, .L161
 2142 0014 43F48003 		orr	r3, r3, #4194304
 2143 0018 1360     		str	r3, [r2]
 693:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
 694:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CFGR &= ~RCC_CFGR_USBPRE;
 695:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 696:../libopencm3/lib/stm32/f1/rcc.c **** }
 2144              		.loc 1 696 1
 2145 001a 05E0     		b	.L160
 2146              	.L158:
 694:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 2147              		.loc 1 694 12
 2148 001c 054B     		ldr	r3, .L161
 2149 001e 1B68     		ldr	r3, [r3]
 2150 0020 044A     		ldr	r2, .L161
 2151 0022 23F48003 		bic	r3, r3, #4194304
 2152 0026 1360     		str	r3, [r2]
 2153              	.L160:
 2154              		.loc 1 696 1
 2155 0028 00BF     		nop
 2156 002a 0C37     		adds	r7, r7, #12
 2157              		.cfi_def_cfa_offset 4
 2158 002c BD46     		mov	sp, r7
 2159              		.cfi_def_cfa_register 13
 2160              		@ sp needed
 2161 002e 80BC     		pop	{r7}
 2162              		.cfi_restore 7
 2163              		.cfi_def_cfa_offset 0
 2164 0030 7047     		bx	lr
 2165              	.L162:
 2166 0032 00BF     		.align	2
 2167              	.L161:
 2168 0034 04100240 		.word	1073876996
 2169              		.cfi_endproc
 2170              	.LFE25:
 2172              		.section	.text.rcc_set_prediv1,"ax",%progbits
 2173              		.align	1
 2174              		.global	rcc_set_prediv1
 2175              		.syntax unified
 2176              		.thumb
 2177              		.thumb_func
 2178              		.fpu softvfp
 2180              	rcc_set_prediv1:
 2181              	.LFB26:
 697:../libopencm3/lib/stm32/f1/rcc.c **** 
 698:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_prediv1(uint32_t prediv)
 699:../libopencm3/lib/stm32/f1/rcc.c **** {
 2182              		.loc 1 699 1
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 8
 2185              		@ frame_needed = 1, uses_anonymous_args = 0
 2186              		@ link register save eliminated.
 2187 0000 80B4     		push	{r7}
 2188              		.cfi_def_cfa_offset 4
 2189              		.cfi_offset 7, -4
 2190 0002 83B0     		sub	sp, sp, #12
 2191              		.cfi_def_cfa_offset 16
 2192 0004 00AF     		add	r7, sp, #0
 2193              		.cfi_def_cfa_register 7
 2194 0006 7860     		str	r0, [r7, #4]
 700:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV1) |
 2195              		.loc 1 700 15
 2196 0008 064B     		ldr	r3, .L164
 2197 000a 1B68     		ldr	r3, [r3]
 2198              		.loc 1 700 25
 2199 000c 23F00F02 		bic	r2, r3, #15
 2200              		.loc 1 700 2
 2201 0010 0449     		ldr	r1, .L164
 2202              		.loc 1 700 47
 2203 0012 7B68     		ldr	r3, [r7, #4]
 2204 0014 1343     		orrs	r3, r3, r2
 2205              		.loc 1 700 12
 2206 0016 0B60     		str	r3, [r1]
 701:../libopencm3/lib/stm32/f1/rcc.c **** 			(prediv << RCC_CFGR2_PREDIV1_SHIFT);
 702:../libopencm3/lib/stm32/f1/rcc.c **** }
 2207              		.loc 1 702 1
 2208 0018 00BF     		nop
 2209 001a 0C37     		adds	r7, r7, #12
 2210              		.cfi_def_cfa_offset 4
 2211 001c BD46     		mov	sp, r7
 2212              		.cfi_def_cfa_register 13
 2213              		@ sp needed
 2214 001e 80BC     		pop	{r7}
 2215              		.cfi_restore 7
 2216              		.cfi_def_cfa_offset 0
 2217 0020 7047     		bx	lr
 2218              	.L165:
 2219 0022 00BF     		.align	2
 2220              	.L164:
 2221 0024 2C100240 		.word	1073877036
 2222              		.cfi_endproc
 2223              	.LFE26:
 2225              		.section	.text.rcc_set_prediv2,"ax",%progbits
 2226              		.align	1
 2227              		.global	rcc_set_prediv2
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
 2231              		.fpu softvfp
 2233              	rcc_set_prediv2:
 2234              	.LFB27:
 703:../libopencm3/lib/stm32/f1/rcc.c **** 
 704:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_prediv2(uint32_t prediv)
 705:../libopencm3/lib/stm32/f1/rcc.c **** {
 2235              		.loc 1 705 1
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 1, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
 2240 0000 80B4     		push	{r7}
 2241              		.cfi_def_cfa_offset 4
 2242              		.cfi_offset 7, -4
 2243 0002 83B0     		sub	sp, sp, #12
 2244              		.cfi_def_cfa_offset 16
 2245 0004 00AF     		add	r7, sp, #0
 2246              		.cfi_def_cfa_register 7
 2247 0006 7860     		str	r0, [r7, #4]
 706:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV2) |
 2248              		.loc 1 706 15
 2249 0008 064B     		ldr	r3, .L167
 2250 000a 1B68     		ldr	r3, [r3]
 2251              		.loc 1 706 25
 2252 000c 23F0F002 		bic	r2, r3, #240
 707:../libopencm3/lib/stm32/f1/rcc.c **** 			(prediv << RCC_CFGR2_PREDIV2_SHIFT);
 2253              		.loc 1 707 12
 2254 0010 7B68     		ldr	r3, [r7, #4]
 2255 0012 1B01     		lsls	r3, r3, #4
 706:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV2) |
 2256              		.loc 1 706 2
 2257 0014 0349     		ldr	r1, .L167
 706:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV2) |
 2258              		.loc 1 706 47
 2259 0016 1343     		orrs	r3, r3, r2
 706:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV2) |
 2260              		.loc 1 706 12
 2261 0018 0B60     		str	r3, [r1]
 708:../libopencm3/lib/stm32/f1/rcc.c **** }
 2262              		.loc 1 708 1
 2263 001a 00BF     		nop
 2264 001c 0C37     		adds	r7, r7, #12
 2265              		.cfi_def_cfa_offset 4
 2266 001e BD46     		mov	sp, r7
 2267              		.cfi_def_cfa_register 13
 2268              		@ sp needed
 2269 0020 80BC     		pop	{r7}
 2270              		.cfi_restore 7
 2271              		.cfi_def_cfa_offset 0
 2272 0022 7047     		bx	lr
 2273              	.L168:
 2274              		.align	2
 2275              	.L167:
 2276 0024 2C100240 		.word	1073877036
 2277              		.cfi_endproc
 2278              	.LFE27:
 2280              		.section	.text.rcc_set_prediv1_source,"ax",%progbits
 2281              		.align	1
 2282              		.global	rcc_set_prediv1_source
 2283              		.syntax unified
 2284              		.thumb
 2285              		.thumb_func
 2286              		.fpu softvfp
 2288              	rcc_set_prediv1_source:
 2289              	.LFB28:
 709:../libopencm3/lib/stm32/f1/rcc.c **** 
 710:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_set_prediv1_source(uint32_t rccsrc)
 711:../libopencm3/lib/stm32/f1/rcc.c **** {
 2290              		.loc 1 711 1
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 8
 2293              		@ frame_needed = 1, uses_anonymous_args = 0
 2294              		@ link register save eliminated.
 2295 0000 80B4     		push	{r7}
 2296              		.cfi_def_cfa_offset 4
 2297              		.cfi_offset 7, -4
 2298 0002 83B0     		sub	sp, sp, #12
 2299              		.cfi_def_cfa_offset 16
 2300 0004 00AF     		add	r7, sp, #0
 2301              		.cfi_def_cfa_register 7
 2302 0006 7860     		str	r0, [r7, #4]
 712:../libopencm3/lib/stm32/f1/rcc.c **** 	if (rccsrc) {
 2303              		.loc 1 712 5
 2304 0008 7B68     		ldr	r3, [r7, #4]
 2305 000a 002B     		cmp	r3, #0
 2306 000c 06D0     		beq	.L170
 713:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CFGR2 |= RCC_CFGR2_PREDIV1SRC;
 2307              		.loc 1 713 13
 2308 000e 094B     		ldr	r3, .L173
 2309 0010 1B68     		ldr	r3, [r3]
 2310 0012 084A     		ldr	r2, .L173
 2311 0014 43F48033 		orr	r3, r3, #65536
 2312 0018 1360     		str	r3, [r2]
 714:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
 715:../libopencm3/lib/stm32/f1/rcc.c **** 		RCC_CFGR2 &= ~RCC_CFGR2_PREDIV1SRC;
 716:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 717:../libopencm3/lib/stm32/f1/rcc.c **** }
 2313              		.loc 1 717 1
 2314 001a 05E0     		b	.L172
 2315              	.L170:
 715:../libopencm3/lib/stm32/f1/rcc.c **** 	}
 2316              		.loc 1 715 13
 2317 001c 054B     		ldr	r3, .L173
 2318 001e 1B68     		ldr	r3, [r3]
 2319 0020 044A     		ldr	r2, .L173
 2320 0022 23F48033 		bic	r3, r3, #65536
 2321 0026 1360     		str	r3, [r2]
 2322              	.L172:
 2323              		.loc 1 717 1
 2324 0028 00BF     		nop
 2325 002a 0C37     		adds	r7, r7, #12
 2326              		.cfi_def_cfa_offset 4
 2327 002c BD46     		mov	sp, r7
 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 002e 80BC     		pop	{r7}
 2331              		.cfi_restore 7
 2332              		.cfi_def_cfa_offset 0
 2333 0030 7047     		bx	lr
 2334              	.L174:
 2335 0032 00BF     		.align	2
 2336              	.L173:
 2337 0034 2C100240 		.word	1073877036
 2338              		.cfi_endproc
 2339              	.LFE28:
 2341              		.section	.text.rcc_system_clock_source,"ax",%progbits
 2342              		.align	1
 2343              		.global	rcc_system_clock_source
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu softvfp
 2349              	rcc_system_clock_source:
 2350              	.LFB29:
 718:../libopencm3/lib/stm32/f1/rcc.c **** 
 719:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 720:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Get the System Clock Source.
 721:../libopencm3/lib/stm32/f1/rcc.c **** 
 722:../libopencm3/lib/stm32/f1/rcc.c **** @returns Unsigned int32. System clock source:
 723:../libopencm3/lib/stm32/f1/rcc.c **** @li 00 indicates HSE
 724:../libopencm3/lib/stm32/f1/rcc.c **** @li 01 indicates LSE
 725:../libopencm3/lib/stm32/f1/rcc.c **** @li 02 indicates PLL
 726:../libopencm3/lib/stm32/f1/rcc.c **** */
 727:../libopencm3/lib/stm32/f1/rcc.c **** 
 728:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_system_clock_source(void)
 729:../libopencm3/lib/stm32/f1/rcc.c **** {
 2351              		.loc 1 729 1
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 1, uses_anonymous_args = 0
 2355              		@ link register save eliminated.
 2356 0000 80B4     		push	{r7}
 2357              		.cfi_def_cfa_offset 4
 2358              		.cfi_offset 7, -4
 2359 0002 00AF     		add	r7, sp, #0
 2360              		.cfi_def_cfa_register 7
 730:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Return the clock source which is used as system clock. */
 731:../libopencm3/lib/stm32/f1/rcc.c **** 	return (RCC_CFGR & RCC_CFGR_SWS) >> RCC_CFGR_SWS_SHIFT;
 2361              		.loc 1 731 10
 2362 0004 044B     		ldr	r3, .L177
 2363 0006 1B68     		ldr	r3, [r3]
 2364              		.loc 1 731 35
 2365 0008 9B08     		lsrs	r3, r3, #2
 2366 000a 03F00303 		and	r3, r3, #3
 732:../libopencm3/lib/stm32/f1/rcc.c **** }
 2367              		.loc 1 732 1
 2368 000e 1846     		mov	r0, r3
 2369 0010 BD46     		mov	sp, r7
 2370              		.cfi_def_cfa_register 13
 2371              		@ sp needed
 2372 0012 80BC     		pop	{r7}
 2373              		.cfi_restore 7
 2374              		.cfi_def_cfa_offset 0
 2375 0014 7047     		bx	lr
 2376              	.L178:
 2377 0016 00BF     		.align	2
 2378              	.L177:
 2379 0018 04100240 		.word	1073876996
 2380              		.cfi_endproc
 2381              	.LFE29:
 2383              		.section	.text.rcc_clock_setup_in_hsi_out_64mhz,"ax",%progbits
 2384              		.align	1
 2385              		.global	rcc_clock_setup_in_hsi_out_64mhz
 2386              		.syntax unified
 2387              		.thumb
 2388              		.thumb_func
 2389              		.fpu softvfp
 2391              	rcc_clock_setup_in_hsi_out_64mhz:
 2392              	.LFB30:
 733:../libopencm3/lib/stm32/f1/rcc.c **** 
 734:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 735:../libopencm3/lib/stm32/f1/rcc.c **** /*
 736:../libopencm3/lib/stm32/f1/rcc.c ****  * These functions are setting up the whole clock system for the most common
 737:../libopencm3/lib/stm32/f1/rcc.c ****  * input clock and output clock configurations.
 738:../libopencm3/lib/stm32/f1/rcc.c ****  */
 739:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 740:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 64MHz from HSI
 741:../libopencm3/lib/stm32/f1/rcc.c **** 
 742:../libopencm3/lib/stm32/f1/rcc.c **** */
 743:../libopencm3/lib/stm32/f1/rcc.c **** 
 744:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hsi_out_64mhz(void)
 745:../libopencm3/lib/stm32/f1/rcc.c **** {
 2393              		.loc 1 745 1
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 1, uses_anonymous_args = 0
 2397 0000 80B5     		push	{r7, lr}
 2398              		.cfi_def_cfa_offset 8
 2399              		.cfi_offset 7, -8
 2400              		.cfi_offset 14, -4
 2401 0002 00AF     		add	r7, sp, #0
 2402              		.cfi_def_cfa_register 7
 746:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
 747:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2403              		.loc 1 747 2
 2404 0004 0420     		movs	r0, #4
 2405 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
 748:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2406              		.loc 1 748 2
 2407 000a 0420     		movs	r0, #4
 2408 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 749:../libopencm3/lib/stm32/f1/rcc.c **** 
 750:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
 751:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2409              		.loc 1 751 2
 2410 0010 0020     		movs	r0, #0
 2411 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 752:../libopencm3/lib/stm32/f1/rcc.c **** 
 753:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 754:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
 755:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
 756:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 757:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);   /* Set. 64MHz Max. 72MHz */
 2412              		.loc 1 757 2
 2413 0016 0020     		movs	r0, #0
 2414 0018 FFF7FEFF 		bl	rcc_set_hpre(PLT)
 758:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV8); /* Set.  8MHz Max. 14MHz */
 2415              		.loc 1 758 2
 2416 001c 0320     		movs	r0, #3
 2417 001e FFF7FEFF 		bl	rcc_set_adcpre(PLT)
 759:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);    /* Set. 32MHz Max. 36MHz */
 2418              		.loc 1 759 2
 2419 0022 0420     		movs	r0, #4
 2420 0024 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
 760:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);   /* Set. 64MHz Max. 72MHz */
 2421              		.loc 1 760 2
 2422 0028 0020     		movs	r0, #0
 2423 002a FFF7FEFF 		bl	rcc_set_ppre2(PLT)
 761:../libopencm3/lib/stm32/f1/rcc.c **** 
 762:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 763:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk is running with 64MHz -> 2 waitstates.
 764:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
 765:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
 766:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
 767:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 768:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 2424              		.loc 1 768 2
 2425 002e 0220     		movs	r0, #2
 2426 0030 FFF7FEFF 		bl	flash_set_ws(PLT)
 769:../libopencm3/lib/stm32/f1/rcc.c **** 
 770:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 771:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 16.
 772:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 8MHz (internal) * 16 (multiplier) / 2 (PLLSRC_HSI_CLK_DIV2) = 64MHz
 773:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 774:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL16);
 2427              		.loc 1 774 2
 2428 0034 0E20     		movs	r0, #14
 2429 0036 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
 775:../libopencm3/lib/stm32/f1/rcc.c **** 
 776:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI/2 as PLL source. */
 777:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSI_CLK_DIV2);
 2430              		.loc 1 777 2
 2431 003a 0020     		movs	r0, #0
 2432 003c FFF7FEFF 		bl	rcc_set_pll_source(PLT)
 778:../libopencm3/lib/stm32/f1/rcc.c **** 
 779:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
 780:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2433              		.loc 1 780 2
 2434 0040 0020     		movs	r0, #0
 2435 0042 FFF7FEFF 		bl	rcc_osc_on(PLT)
 781:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2436              		.loc 1 781 2
 2437 0046 0020     		movs	r0, #0
 2438 0048 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 782:../libopencm3/lib/stm32/f1/rcc.c **** 
 783:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
 784:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2439              		.loc 1 784 2
 2440 004c 0220     		movs	r0, #2
 2441 004e FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 785:../libopencm3/lib/stm32/f1/rcc.c **** 
 786:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
 787:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 64000000;
 2442              		.loc 1 787 20
 2443 0052 0C4B     		ldr	r3, .L180+8
 2444 0054 59F80330 		ldr	r3, [r9, r3]
 2445 0058 1A46     		mov	r2, r3
 2446 005a 084B     		ldr	r3, .L180
 2447 005c 1360     		str	r3, [r2]
 788:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 32000000;
 2448              		.loc 1 788 21
 2449 005e 0A4B     		ldr	r3, .L180+12
 2450 0060 59F80330 		ldr	r3, [r9, r3]
 2451 0064 1A46     		mov	r2, r3
 2452 0066 064B     		ldr	r3, .L180+4
 2453 0068 1360     		str	r3, [r2]
 789:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 64000000;
 2454              		.loc 1 789 21
 2455 006a 084B     		ldr	r3, .L180+16
 2456 006c 59F80330 		ldr	r3, [r9, r3]
 2457 0070 1A46     		mov	r2, r3
 2458 0072 024B     		ldr	r3, .L180
 2459 0074 1360     		str	r3, [r2]
 790:../libopencm3/lib/stm32/f1/rcc.c **** }
 2460              		.loc 1 790 1
 2461 0076 00BF     		nop
 2462 0078 80BD     		pop	{r7, pc}
 2463              	.L181:
 2464 007a 00BF     		.align	2
 2465              	.L180:
 2466 007c 0090D003 		.word	64000000
 2467 0080 0048E801 		.word	32000000
 2468 0084 00000000 		.word	rcc_ahb_frequency(GOT)
 2469 0088 00000000 		.word	rcc_apb1_frequency(GOT)
 2470 008c 00000000 		.word	rcc_apb2_frequency(GOT)
 2471              		.cfi_endproc
 2472              	.LFE30:
 2474              		.section	.text.rcc_clock_setup_in_hsi_out_48mhz,"ax",%progbits
 2475              		.align	1
 2476              		.global	rcc_clock_setup_in_hsi_out_48mhz
 2477              		.syntax unified
 2478              		.thumb
 2479              		.thumb_func
 2480              		.fpu softvfp
 2482              	rcc_clock_setup_in_hsi_out_48mhz:
 2483              	.LFB31:
 791:../libopencm3/lib/stm32/f1/rcc.c **** 
 792:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 793:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 48MHz from HSI
 794:../libopencm3/lib/stm32/f1/rcc.c **** 
 795:../libopencm3/lib/stm32/f1/rcc.c **** */
 796:../libopencm3/lib/stm32/f1/rcc.c **** 
 797:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hsi_out_48mhz(void)
 798:../libopencm3/lib/stm32/f1/rcc.c **** {
 2484              		.loc 1 798 1
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 1, uses_anonymous_args = 0
 2488 0000 80B5     		push	{r7, lr}
 2489              		.cfi_def_cfa_offset 8
 2490              		.cfi_offset 7, -8
 2491              		.cfi_offset 14, -4
 2492 0002 00AF     		add	r7, sp, #0
 2493              		.cfi_def_cfa_register 7
 799:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
 800:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2494              		.loc 1 800 2
 2495 0004 0420     		movs	r0, #4
 2496 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
 801:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2497              		.loc 1 801 2
 2498 000a 0420     		movs	r0, #4
 2499 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 802:../libopencm3/lib/stm32/f1/rcc.c **** 
 803:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
 804:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2500              		.loc 1 804 2
 2501 0010 0020     		movs	r0, #0
 2502 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 805:../libopencm3/lib/stm32/f1/rcc.c **** 
 806:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 807:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
 808:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
 809:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 810:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);	/*Set.48MHz Max.72MHz */
 2503              		.loc 1 810 2
 2504 0016 0020     		movs	r0, #0
 2505 0018 FFF7FEFF 		bl	rcc_set_hpre(PLT)
 811:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV8);	/*Set. 6MHz Max.14MHz */
 2506              		.loc 1 811 2
 2507 001c 0320     		movs	r0, #3
 2508 001e FFF7FEFF 		bl	rcc_set_adcpre(PLT)
 812:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);	/*Set.24MHz Max.36MHz */
 2509              		.loc 1 812 2
 2510 0022 0420     		movs	r0, #4
 2511 0024 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
 813:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);	/*Set.48MHz Max.72MHz */
 2512              		.loc 1 813 2
 2513 0028 0020     		movs	r0, #0
 2514 002a FFF7FEFF 		bl	rcc_set_ppre2(PLT)
 814:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_usbpre(RCC_CFGR_USBPRE_PLL_CLK_NODIV);  /*Set.48MHz Max.48MHz */
 2515              		.loc 1 814 2
 2516 002e 0120     		movs	r0, #1
 2517 0030 FFF7FEFF 		bl	rcc_set_usbpre(PLT)
 815:../libopencm3/lib/stm32/f1/rcc.c **** 
 816:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 817:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 48MHz -> 1 waitstates.
 818:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
 819:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
 820:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
 821:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 822:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_1WS);
 2518              		.loc 1 822 2
 2519 0034 0120     		movs	r0, #1
 2520 0036 FFF7FEFF 		bl	flash_set_ws(PLT)
 823:../libopencm3/lib/stm32/f1/rcc.c **** 
 824:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 825:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 12.
 826:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 8MHz (internal) * 12 (multiplier) / 2 (PLLSRC_HSI_CLK_DIV2) = 48MHz
 827:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 828:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL12);
 2521              		.loc 1 828 2
 2522 003a 0A20     		movs	r0, #10
 2523 003c FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
 829:../libopencm3/lib/stm32/f1/rcc.c **** 
 830:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI/2 as PLL source. */
 831:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSI_CLK_DIV2);
 2524              		.loc 1 831 2
 2525 0040 0020     		movs	r0, #0
 2526 0042 FFF7FEFF 		bl	rcc_set_pll_source(PLT)
 832:../libopencm3/lib/stm32/f1/rcc.c **** 
 833:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
 834:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2527              		.loc 1 834 2
 2528 0046 0020     		movs	r0, #0
 2529 0048 FFF7FEFF 		bl	rcc_osc_on(PLT)
 835:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2530              		.loc 1 835 2
 2531 004c 0020     		movs	r0, #0
 2532 004e FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 836:../libopencm3/lib/stm32/f1/rcc.c **** 
 837:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
 838:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2533              		.loc 1 838 2
 2534 0052 0220     		movs	r0, #2
 2535 0054 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 839:../libopencm3/lib/stm32/f1/rcc.c **** 
 840:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
 841:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 48000000;
 2536              		.loc 1 841 20
 2537 0058 0B4B     		ldr	r3, .L183+8
 2538 005a 59F80330 		ldr	r3, [r9, r3]
 2539 005e 1A46     		mov	r2, r3
 2540 0060 074B     		ldr	r3, .L183
 2541 0062 1360     		str	r3, [r2]
 842:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 24000000;
 2542              		.loc 1 842 21
 2543 0064 094B     		ldr	r3, .L183+12
 2544 0066 59F80330 		ldr	r3, [r9, r3]
 2545 006a 1A46     		mov	r2, r3
 2546 006c 054B     		ldr	r3, .L183+4
 2547 006e 1360     		str	r3, [r2]
 843:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 48000000;
 2548              		.loc 1 843 21
 2549 0070 074B     		ldr	r3, .L183+16
 2550 0072 59F80330 		ldr	r3, [r9, r3]
 2551 0076 1A46     		mov	r2, r3
 2552 0078 014B     		ldr	r3, .L183
 2553 007a 1360     		str	r3, [r2]
 844:../libopencm3/lib/stm32/f1/rcc.c **** }
 2554              		.loc 1 844 1
 2555 007c 00BF     		nop
 2556 007e 80BD     		pop	{r7, pc}
 2557              	.L184:
 2558              		.align	2
 2559              	.L183:
 2560 0080 006CDC02 		.word	48000000
 2561 0084 00366E01 		.word	24000000
 2562 0088 00000000 		.word	rcc_ahb_frequency(GOT)
 2563 008c 00000000 		.word	rcc_apb1_frequency(GOT)
 2564 0090 00000000 		.word	rcc_apb2_frequency(GOT)
 2565              		.cfi_endproc
 2566              	.LFE31:
 2568              		.section	.text.rcc_clock_setup_in_hsi_out_24mhz,"ax",%progbits
 2569              		.align	1
 2570              		.global	rcc_clock_setup_in_hsi_out_24mhz
 2571              		.syntax unified
 2572              		.thumb
 2573              		.thumb_func
 2574              		.fpu softvfp
 2576              	rcc_clock_setup_in_hsi_out_24mhz:
 2577              	.LFB32:
 845:../libopencm3/lib/stm32/f1/rcc.c **** 
 846:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 847:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 24MHz from HSI
 848:../libopencm3/lib/stm32/f1/rcc.c **** 
 849:../libopencm3/lib/stm32/f1/rcc.c **** */
 850:../libopencm3/lib/stm32/f1/rcc.c **** 
 851:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hsi_out_24mhz(void)
 852:../libopencm3/lib/stm32/f1/rcc.c **** {
 2578              		.loc 1 852 1
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582 0000 80B5     		push	{r7, lr}
 2583              		.cfi_def_cfa_offset 8
 2584              		.cfi_offset 7, -8
 2585              		.cfi_offset 14, -4
 2586 0002 00AF     		add	r7, sp, #0
 2587              		.cfi_def_cfa_register 7
 853:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
 854:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2588              		.loc 1 854 2
 2589 0004 0420     		movs	r0, #4
 2590 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
 855:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2591              		.loc 1 855 2
 2592 000a 0420     		movs	r0, #4
 2593 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 856:../libopencm3/lib/stm32/f1/rcc.c **** 
 857:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
 858:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2594              		.loc 1 858 2
 2595 0010 0020     		movs	r0, #0
 2596 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 859:../libopencm3/lib/stm32/f1/rcc.c **** 
 860:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 861:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
 862:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
 863:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 864:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV); /* Set. 24MHz Max. 24MHz */
 2597              		.loc 1 864 2
 2598 0016 0020     		movs	r0, #0
 2599 0018 FFF7FEFF 		bl	rcc_set_hpre(PLT)
 865:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV2); /* Set. 12MHz Max. 12MHz */
 2600              		.loc 1 865 2
 2601 001c 0020     		movs	r0, #0
 2602 001e FFF7FEFF 		bl	rcc_set_adcpre(PLT)
 866:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_NODIV); /* Set. 24MHz Max. 24MHz */
 2603              		.loc 1 866 2
 2604 0022 0020     		movs	r0, #0
 2605 0024 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
 867:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV); /* Set. 24MHz Max. 24MHz */
 2606              		.loc 1 867 2
 2607 0028 0020     		movs	r0, #0
 2608 002a FFF7FEFF 		bl	rcc_set_ppre2(PLT)
 868:../libopencm3/lib/stm32/f1/rcc.c **** 
 869:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 870:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk is (will be) running with 24MHz -> 0 waitstates.
 871:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
 872:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
 873:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
 874:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 875:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 2609              		.loc 1 875 2
 2610 002e 0020     		movs	r0, #0
 2611 0030 FFF7FEFF 		bl	flash_set_ws(PLT)
 876:../libopencm3/lib/stm32/f1/rcc.c **** 
 877:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 878:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 6.
 879:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 8MHz (internal) * 6 (multiplier) / 2 (PLLSRC_HSI_CLK_DIV2) = 24MHz
 880:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 881:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL6);
 2612              		.loc 1 881 2
 2613 0034 0420     		movs	r0, #4
 2614 0036 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
 882:../libopencm3/lib/stm32/f1/rcc.c **** 
 883:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI/2 as PLL source. */
 884:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSI_CLK_DIV2);
 2615              		.loc 1 884 2
 2616 003a 0020     		movs	r0, #0
 2617 003c FFF7FEFF 		bl	rcc_set_pll_source(PLT)
 885:../libopencm3/lib/stm32/f1/rcc.c **** 
 886:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
 887:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2618              		.loc 1 887 2
 2619 0040 0020     		movs	r0, #0
 2620 0042 FFF7FEFF 		bl	rcc_osc_on(PLT)
 888:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2621              		.loc 1 888 2
 2622 0046 0020     		movs	r0, #0
 2623 0048 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 889:../libopencm3/lib/stm32/f1/rcc.c **** 
 890:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
 891:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2624              		.loc 1 891 2
 2625 004c 0220     		movs	r0, #2
 2626 004e FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 892:../libopencm3/lib/stm32/f1/rcc.c **** 
 893:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
 894:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 24000000;
 2627              		.loc 1 894 20
 2628 0052 0B4B     		ldr	r3, .L186+4
 2629 0054 59F80330 		ldr	r3, [r9, r3]
 2630 0058 1A46     		mov	r2, r3
 2631 005a 084B     		ldr	r3, .L186
 2632 005c 1360     		str	r3, [r2]
 895:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 24000000;
 2633              		.loc 1 895 21
 2634 005e 094B     		ldr	r3, .L186+8
 2635 0060 59F80330 		ldr	r3, [r9, r3]
 2636 0064 1A46     		mov	r2, r3
 2637 0066 054B     		ldr	r3, .L186
 2638 0068 1360     		str	r3, [r2]
 896:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 24000000;
 2639              		.loc 1 896 21
 2640 006a 074B     		ldr	r3, .L186+12
 2641 006c 59F80330 		ldr	r3, [r9, r3]
 2642 0070 1A46     		mov	r2, r3
 2643 0072 024B     		ldr	r3, .L186
 2644 0074 1360     		str	r3, [r2]
 897:../libopencm3/lib/stm32/f1/rcc.c **** }
 2645              		.loc 1 897 1
 2646 0076 00BF     		nop
 2647 0078 80BD     		pop	{r7, pc}
 2648              	.L187:
 2649 007a 00BF     		.align	2
 2650              	.L186:
 2651 007c 00366E01 		.word	24000000
 2652 0080 00000000 		.word	rcc_ahb_frequency(GOT)
 2653 0084 00000000 		.word	rcc_apb1_frequency(GOT)
 2654 0088 00000000 		.word	rcc_apb2_frequency(GOT)
 2655              		.cfi_endproc
 2656              	.LFE32:
 2658              		.section	.text.rcc_clock_setup_in_hse_8mhz_out_24mhz,"ax",%progbits
 2659              		.align	1
 2660              		.global	rcc_clock_setup_in_hse_8mhz_out_24mhz
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2664              		.fpu softvfp
 2666              	rcc_clock_setup_in_hse_8mhz_out_24mhz:
 2667              	.LFB33:
 898:../libopencm3/lib/stm32/f1/rcc.c **** 
 899:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 900:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 24MHz from HSE at 8MHz
 901:../libopencm3/lib/stm32/f1/rcc.c **** 
 902:../libopencm3/lib/stm32/f1/rcc.c **** */
 903:../libopencm3/lib/stm32/f1/rcc.c **** 
 904:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hse_8mhz_out_24mhz(void)
 905:../libopencm3/lib/stm32/f1/rcc.c **** {
 2668              		.loc 1 905 1
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 0
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672 0000 80B5     		push	{r7, lr}
 2673              		.cfi_def_cfa_offset 8
 2674              		.cfi_offset 7, -8
 2675              		.cfi_offset 14, -4
 2676 0002 00AF     		add	r7, sp, #0
 2677              		.cfi_def_cfa_register 7
 906:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
 907:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2678              		.loc 1 907 2
 2679 0004 0420     		movs	r0, #4
 2680 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
 908:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2681              		.loc 1 908 2
 2682 000a 0420     		movs	r0, #4
 2683 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 909:../libopencm3/lib/stm32/f1/rcc.c **** 
 910:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
 911:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2684              		.loc 1 911 2
 2685 0010 0020     		movs	r0, #0
 2686 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 912:../libopencm3/lib/stm32/f1/rcc.c **** 
 913:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable external high-speed oscillator 8MHz. */
 914:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSE);
 2687              		.loc 1 914 2
 2688 0016 0320     		movs	r0, #3
 2689 0018 FFF7FEFF 		bl	rcc_osc_on(PLT)
 915:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSE);
 2690              		.loc 1 915 2
 2691 001c 0320     		movs	r0, #3
 2692 001e FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 916:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 2693              		.loc 1 916 2
 2694 0022 0120     		movs	r0, #1
 2695 0024 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 917:../libopencm3/lib/stm32/f1/rcc.c **** 
 918:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 919:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
 920:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
 921:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 922:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);    /* Set. 24MHz Max. 72MHz */
 2696              		.loc 1 922 2
 2697 0028 0020     		movs	r0, #0
 2698 002a FFF7FEFF 		bl	rcc_set_hpre(PLT)
 923:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV2);  /* Set. 12MHz Max. 14MHz */
 2699              		.loc 1 923 2
 2700 002e 0020     		movs	r0, #0
 2701 0030 FFF7FEFF 		bl	rcc_set_adcpre(PLT)
 924:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_NODIV);    /* Set. 24MHz Max. 36MHz */
 2702              		.loc 1 924 2
 2703 0034 0020     		movs	r0, #0
 2704 0036 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
 925:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);    /* Set. 24MHz Max. 72MHz */
 2705              		.loc 1 925 2
 2706 003a 0020     		movs	r0, #0
 2707 003c FFF7FEFF 		bl	rcc_set_ppre2(PLT)
 926:../libopencm3/lib/stm32/f1/rcc.c **** 
 927:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 928:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 24MHz -> 0 waitstates.
 929:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
 930:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
 931:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
 932:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 933:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 2708              		.loc 1 933 2
 2709 0040 0020     		movs	r0, #0
 2710 0042 FFF7FEFF 		bl	flash_set_ws(PLT)
 934:../libopencm3/lib/stm32/f1/rcc.c **** 
 935:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 936:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 3.
 937:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 8MHz (external) * 3 (multiplier) = 24MHz
 938:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 939:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL3);
 2711              		.loc 1 939 2
 2712 0046 0120     		movs	r0, #1
 2713 0048 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
 940:../libopencm3/lib/stm32/f1/rcc.c **** 
 941:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSE as PLL source. */
 942:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 2714              		.loc 1 942 2
 2715 004c 0120     		movs	r0, #1
 2716 004e FFF7FEFF 		bl	rcc_set_pll_source(PLT)
 943:../libopencm3/lib/stm32/f1/rcc.c **** 
 944:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 945:../libopencm3/lib/stm32/f1/rcc.c **** 	 * External frequency undivided before entering PLL
 946:../libopencm3/lib/stm32/f1/rcc.c **** 	 * (only valid/needed for HSE).
 947:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 948:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 2717              		.loc 1 948 2
 2718 0052 0020     		movs	r0, #0
 2719 0054 FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
 949:../libopencm3/lib/stm32/f1/rcc.c **** 
 950:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
 951:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2720              		.loc 1 951 2
 2721 0058 0020     		movs	r0, #0
 2722 005a FFF7FEFF 		bl	rcc_osc_on(PLT)
 952:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2723              		.loc 1 952 2
 2724 005e 0020     		movs	r0, #0
 2725 0060 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 953:../libopencm3/lib/stm32/f1/rcc.c **** 
 954:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
 955:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2726              		.loc 1 955 2
 2727 0064 0220     		movs	r0, #2
 2728 0066 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 956:../libopencm3/lib/stm32/f1/rcc.c **** 
 957:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
 958:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 24000000;
 2729              		.loc 1 958 20
 2730 006a 0B4B     		ldr	r3, .L189+4
 2731 006c 59F80330 		ldr	r3, [r9, r3]
 2732 0070 1A46     		mov	r2, r3
 2733 0072 084B     		ldr	r3, .L189
 2734 0074 1360     		str	r3, [r2]
 959:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 24000000;
 2735              		.loc 1 959 21
 2736 0076 094B     		ldr	r3, .L189+8
 2737 0078 59F80330 		ldr	r3, [r9, r3]
 2738 007c 1A46     		mov	r2, r3
 2739 007e 054B     		ldr	r3, .L189
 2740 0080 1360     		str	r3, [r2]
 960:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 24000000;
 2741              		.loc 1 960 21
 2742 0082 074B     		ldr	r3, .L189+12
 2743 0084 59F80330 		ldr	r3, [r9, r3]
 2744 0088 1A46     		mov	r2, r3
 2745 008a 024B     		ldr	r3, .L189
 2746 008c 1360     		str	r3, [r2]
 961:../libopencm3/lib/stm32/f1/rcc.c **** }
 2747              		.loc 1 961 1
 2748 008e 00BF     		nop
 2749 0090 80BD     		pop	{r7, pc}
 2750              	.L190:
 2751 0092 00BF     		.align	2
 2752              	.L189:
 2753 0094 00366E01 		.word	24000000
 2754 0098 00000000 		.word	rcc_ahb_frequency(GOT)
 2755 009c 00000000 		.word	rcc_apb1_frequency(GOT)
 2756 00a0 00000000 		.word	rcc_apb2_frequency(GOT)
 2757              		.cfi_endproc
 2758              	.LFE33:
 2760              		.section	.text.rcc_clock_setup_in_hse_8mhz_out_72mhz,"ax",%progbits
 2761              		.align	1
 2762              		.global	rcc_clock_setup_in_hse_8mhz_out_72mhz
 2763              		.syntax unified
 2764              		.thumb
 2765              		.thumb_func
 2766              		.fpu softvfp
 2768              	rcc_clock_setup_in_hse_8mhz_out_72mhz:
 2769              	.LFB34:
 962:../libopencm3/lib/stm32/f1/rcc.c **** 
 963:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
 964:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz
 965:../libopencm3/lib/stm32/f1/rcc.c **** 
 966:../libopencm3/lib/stm32/f1/rcc.c **** */
 967:../libopencm3/lib/stm32/f1/rcc.c **** 
 968:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
 969:../libopencm3/lib/stm32/f1/rcc.c **** {
 2770              		.loc 1 969 1
 2771              		.cfi_startproc
 2772              		@ args = 0, pretend = 0, frame = 0
 2773              		@ frame_needed = 1, uses_anonymous_args = 0
 2774 0000 80B5     		push	{r7, lr}
 2775              		.cfi_def_cfa_offset 8
 2776              		.cfi_offset 7, -8
 2777              		.cfi_offset 14, -4
 2778 0002 00AF     		add	r7, sp, #0
 2779              		.cfi_def_cfa_register 7
 970:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
 971:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2780              		.loc 1 971 2
 2781 0004 0420     		movs	r0, #4
 2782 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
 972:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2783              		.loc 1 972 2
 2784 000a 0420     		movs	r0, #4
 2785 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 973:../libopencm3/lib/stm32/f1/rcc.c **** 
 974:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
 975:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2786              		.loc 1 975 2
 2787 0010 0020     		movs	r0, #0
 2788 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 976:../libopencm3/lib/stm32/f1/rcc.c **** 
 977:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable external high-speed oscillator 8MHz. */
 978:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSE);
 2789              		.loc 1 978 2
 2790 0016 0320     		movs	r0, #3
 2791 0018 FFF7FEFF 		bl	rcc_osc_on(PLT)
 979:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSE);
 2792              		.loc 1 979 2
 2793 001c 0320     		movs	r0, #3
 2794 001e FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 980:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 2795              		.loc 1 980 2
 2796 0022 0120     		movs	r0, #1
 2797 0024 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
 981:../libopencm3/lib/stm32/f1/rcc.c **** 
 982:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 983:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
 984:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
 985:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 986:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 2798              		.loc 1 986 2
 2799 0028 0020     		movs	r0, #0
 2800 002a FFF7FEFF 		bl	rcc_set_hpre(PLT)
 987:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV8);  /* Set.  9MHz Max. 14MHz */
 2801              		.loc 1 987 2
 2802 002e 0320     		movs	r0, #3
 2803 0030 FFF7FEFF 		bl	rcc_set_adcpre(PLT)
 988:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);     /* Set. 36MHz Max. 36MHz */
 2804              		.loc 1 988 2
 2805 0034 0420     		movs	r0, #4
 2806 0036 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
 989:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 2807              		.loc 1 989 2
 2808 003a 0020     		movs	r0, #0
 2809 003c FFF7FEFF 		bl	rcc_set_ppre2(PLT)
 990:../libopencm3/lib/stm32/f1/rcc.c **** 
 991:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
 992:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 72MHz -> 2 waitstates.
 993:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
 994:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
 995:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
 996:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
 997:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 2810              		.loc 1 997 2
 2811 0040 0220     		movs	r0, #2
 2812 0042 FFF7FEFF 		bl	flash_set_ws(PLT)
 998:../libopencm3/lib/stm32/f1/rcc.c **** 
 999:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1000:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 9.
1001:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 8MHz (external) * 9 (multiplier) = 72MHz
1002:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1003:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 2813              		.loc 1 1003 2
 2814 0046 0720     		movs	r0, #7
 2815 0048 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
1004:../libopencm3/lib/stm32/f1/rcc.c **** 
1005:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSE as PLL source. */
1006:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 2816              		.loc 1 1006 2
 2817 004c 0120     		movs	r0, #1
 2818 004e FFF7FEFF 		bl	rcc_set_pll_source(PLT)
1007:../libopencm3/lib/stm32/f1/rcc.c **** 
1008:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1009:../libopencm3/lib/stm32/f1/rcc.c **** 	 * External frequency undivided before entering PLL
1010:../libopencm3/lib/stm32/f1/rcc.c **** 	 * (only valid/needed for HSE).
1011:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1012:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 2819              		.loc 1 1012 2
 2820 0052 0020     		movs	r0, #0
 2821 0054 FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
1013:../libopencm3/lib/stm32/f1/rcc.c **** 
1014:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
1015:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2822              		.loc 1 1015 2
 2823 0058 0020     		movs	r0, #0
 2824 005a FFF7FEFF 		bl	rcc_osc_on(PLT)
1016:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2825              		.loc 1 1016 2
 2826 005e 0020     		movs	r0, #0
 2827 0060 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1017:../libopencm3/lib/stm32/f1/rcc.c **** 
1018:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
1019:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2828              		.loc 1 1019 2
 2829 0064 0220     		movs	r0, #2
 2830 0066 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1020:../libopencm3/lib/stm32/f1/rcc.c **** 
1021:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
1022:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 72000000;
 2831              		.loc 1 1022 20
 2832 006a 0C4B     		ldr	r3, .L192+8
 2833 006c 59F80330 		ldr	r3, [r9, r3]
 2834 0070 1A46     		mov	r2, r3
 2835 0072 084B     		ldr	r3, .L192
 2836 0074 1360     		str	r3, [r2]
1023:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 36000000;
 2837              		.loc 1 1023 21
 2838 0076 0A4B     		ldr	r3, .L192+12
 2839 0078 59F80330 		ldr	r3, [r9, r3]
 2840 007c 1A46     		mov	r2, r3
 2841 007e 064B     		ldr	r3, .L192+4
 2842 0080 1360     		str	r3, [r2]
1024:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 72000000;
 2843              		.loc 1 1024 21
 2844 0082 084B     		ldr	r3, .L192+16
 2845 0084 59F80330 		ldr	r3, [r9, r3]
 2846 0088 1A46     		mov	r2, r3
 2847 008a 024B     		ldr	r3, .L192
 2848 008c 1360     		str	r3, [r2]
1025:../libopencm3/lib/stm32/f1/rcc.c **** }
 2849              		.loc 1 1025 1
 2850 008e 00BF     		nop
 2851 0090 80BD     		pop	{r7, pc}
 2852              	.L193:
 2853 0092 00BF     		.align	2
 2854              	.L192:
 2855 0094 00A24A04 		.word	72000000
 2856 0098 00512502 		.word	36000000
 2857 009c 00000000 		.word	rcc_ahb_frequency(GOT)
 2858 00a0 00000000 		.word	rcc_apb1_frequency(GOT)
 2859 00a4 00000000 		.word	rcc_apb2_frequency(GOT)
 2860              		.cfi_endproc
 2861              	.LFE34:
 2863              		.section	.text.rcc_clock_setup_in_hse_12mhz_out_72mhz,"ax",%progbits
 2864              		.align	1
 2865              		.global	rcc_clock_setup_in_hse_12mhz_out_72mhz
 2866              		.syntax unified
 2867              		.thumb
 2868              		.thumb_func
 2869              		.fpu softvfp
 2871              	rcc_clock_setup_in_hse_12mhz_out_72mhz:
 2872              	.LFB35:
1026:../libopencm3/lib/stm32/f1/rcc.c **** 
1027:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1028:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 72MHz from HSE at 12MHz
1029:../libopencm3/lib/stm32/f1/rcc.c **** 
1030:../libopencm3/lib/stm32/f1/rcc.c **** */
1031:../libopencm3/lib/stm32/f1/rcc.c **** 
1032:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hse_12mhz_out_72mhz(void)
1033:../libopencm3/lib/stm32/f1/rcc.c **** {
 2873              		.loc 1 1033 1
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 0
 2876              		@ frame_needed = 1, uses_anonymous_args = 0
 2877 0000 80B5     		push	{r7, lr}
 2878              		.cfi_def_cfa_offset 8
 2879              		.cfi_offset 7, -8
 2880              		.cfi_offset 14, -4
 2881 0002 00AF     		add	r7, sp, #0
 2882              		.cfi_def_cfa_register 7
1034:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
1035:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2883              		.loc 1 1035 2
 2884 0004 0420     		movs	r0, #4
 2885 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
1036:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2886              		.loc 1 1036 2
 2887 000a 0420     		movs	r0, #4
 2888 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1037:../libopencm3/lib/stm32/f1/rcc.c **** 
1038:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
1039:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2889              		.loc 1 1039 2
 2890 0010 0020     		movs	r0, #0
 2891 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1040:../libopencm3/lib/stm32/f1/rcc.c **** 
1041:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable external high-speed oscillator 16MHz. */
1042:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSE);
 2892              		.loc 1 1042 2
 2893 0016 0320     		movs	r0, #3
 2894 0018 FFF7FEFF 		bl	rcc_osc_on(PLT)
1043:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSE);
 2895              		.loc 1 1043 2
 2896 001c 0320     		movs	r0, #3
 2897 001e FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1044:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 2898              		.loc 1 1044 2
 2899 0022 0120     		movs	r0, #1
 2900 0024 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1045:../libopencm3/lib/stm32/f1/rcc.c **** 
1046:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1047:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
1048:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
1049:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1050:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 2901              		.loc 1 1050 2
 2902 0028 0020     		movs	r0, #0
 2903 002a FFF7FEFF 		bl	rcc_set_hpre(PLT)
1051:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV6);  /* Set. 12MHz Max. 14MHz */
 2904              		.loc 1 1051 2
 2905 002e 0220     		movs	r0, #2
 2906 0030 FFF7FEFF 		bl	rcc_set_adcpre(PLT)
1052:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);     /* Set. 36MHz Max. 36MHz */
 2907              		.loc 1 1052 2
 2908 0034 0420     		movs	r0, #4
 2909 0036 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
1053:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 2910              		.loc 1 1053 2
 2911 003a 0020     		movs	r0, #0
 2912 003c FFF7FEFF 		bl	rcc_set_ppre2(PLT)
1054:../libopencm3/lib/stm32/f1/rcc.c **** 
1055:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1056:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 72MHz -> 2 waitstates.
1057:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
1058:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
1059:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
1060:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1061:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 2913              		.loc 1 1061 2
 2914 0040 0220     		movs	r0, #2
 2915 0042 FFF7FEFF 		bl	flash_set_ws(PLT)
1062:../libopencm3/lib/stm32/f1/rcc.c **** 
1063:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1064:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 9.
1065:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 12MHz (external) * 6 (multiplier) / 1 (PLLXTPRE_HSE_CLK) = 72MHz
1066:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1067:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL6);
 2916              		.loc 1 1067 2
 2917 0046 0420     		movs	r0, #4
 2918 0048 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
1068:../libopencm3/lib/stm32/f1/rcc.c **** 
1069:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as PLL source. */
1070:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 2919              		.loc 1 1070 2
 2920 004c 0120     		movs	r0, #1
 2921 004e FFF7FEFF 		bl	rcc_set_pll_source(PLT)
1071:../libopencm3/lib/stm32/f1/rcc.c **** 
1072:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1073:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Divide external frequency by 2 before entering PLL
1074:../libopencm3/lib/stm32/f1/rcc.c **** 	 * (only valid/needed for HSE).
1075:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1076:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 2922              		.loc 1 1076 2
 2923 0052 0020     		movs	r0, #0
 2924 0054 FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
1077:../libopencm3/lib/stm32/f1/rcc.c **** 
1078:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
1079:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 2925              		.loc 1 1079 2
 2926 0058 0020     		movs	r0, #0
 2927 005a FFF7FEFF 		bl	rcc_osc_on(PLT)
1080:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 2928              		.loc 1 1080 2
 2929 005e 0020     		movs	r0, #0
 2930 0060 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1081:../libopencm3/lib/stm32/f1/rcc.c **** 
1082:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
1083:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 2931              		.loc 1 1083 2
 2932 0064 0220     		movs	r0, #2
 2933 0066 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1084:../libopencm3/lib/stm32/f1/rcc.c **** 
1085:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
1086:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 72000000;
 2934              		.loc 1 1086 20
 2935 006a 0C4B     		ldr	r3, .L195+8
 2936 006c 59F80330 		ldr	r3, [r9, r3]
 2937 0070 1A46     		mov	r2, r3
 2938 0072 084B     		ldr	r3, .L195
 2939 0074 1360     		str	r3, [r2]
1087:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 36000000;
 2940              		.loc 1 1087 21
 2941 0076 0A4B     		ldr	r3, .L195+12
 2942 0078 59F80330 		ldr	r3, [r9, r3]
 2943 007c 1A46     		mov	r2, r3
 2944 007e 064B     		ldr	r3, .L195+4
 2945 0080 1360     		str	r3, [r2]
1088:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 72000000;
 2946              		.loc 1 1088 21
 2947 0082 084B     		ldr	r3, .L195+16
 2948 0084 59F80330 		ldr	r3, [r9, r3]
 2949 0088 1A46     		mov	r2, r3
 2950 008a 024B     		ldr	r3, .L195
 2951 008c 1360     		str	r3, [r2]
1089:../libopencm3/lib/stm32/f1/rcc.c **** }
 2952              		.loc 1 1089 1
 2953 008e 00BF     		nop
 2954 0090 80BD     		pop	{r7, pc}
 2955              	.L196:
 2956 0092 00BF     		.align	2
 2957              	.L195:
 2958 0094 00A24A04 		.word	72000000
 2959 0098 00512502 		.word	36000000
 2960 009c 00000000 		.word	rcc_ahb_frequency(GOT)
 2961 00a0 00000000 		.word	rcc_apb1_frequency(GOT)
 2962 00a4 00000000 		.word	rcc_apb2_frequency(GOT)
 2963              		.cfi_endproc
 2964              	.LFE35:
 2966              		.section	.text.rcc_clock_setup_in_hse_16mhz_out_72mhz,"ax",%progbits
 2967              		.align	1
 2968              		.global	rcc_clock_setup_in_hse_16mhz_out_72mhz
 2969              		.syntax unified
 2970              		.thumb
 2971              		.thumb_func
 2972              		.fpu softvfp
 2974              	rcc_clock_setup_in_hse_16mhz_out_72mhz:
 2975              	.LFB36:
1090:../libopencm3/lib/stm32/f1/rcc.c **** 
1091:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1092:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 72MHz from HSE at 16MHz
1093:../libopencm3/lib/stm32/f1/rcc.c **** 
1094:../libopencm3/lib/stm32/f1/rcc.c **** */
1095:../libopencm3/lib/stm32/f1/rcc.c **** 
1096:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hse_16mhz_out_72mhz(void)
1097:../libopencm3/lib/stm32/f1/rcc.c **** {
 2976              		.loc 1 1097 1
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 1, uses_anonymous_args = 0
 2980 0000 80B5     		push	{r7, lr}
 2981              		.cfi_def_cfa_offset 8
 2982              		.cfi_offset 7, -8
 2983              		.cfi_offset 14, -4
 2984 0002 00AF     		add	r7, sp, #0
 2985              		.cfi_def_cfa_register 7
1098:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable internal high-speed oscillator. */
1099:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSI);
 2986              		.loc 1 1099 2
 2987 0004 0420     		movs	r0, #4
 2988 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
1100:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSI);
 2989              		.loc 1 1100 2
 2990 000a 0420     		movs	r0, #4
 2991 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1101:../libopencm3/lib/stm32/f1/rcc.c **** 
1102:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as SYSCLK source. */
1103:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 2992              		.loc 1 1103 2
 2993 0010 0020     		movs	r0, #0
 2994 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1104:../libopencm3/lib/stm32/f1/rcc.c **** 
1105:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable external high-speed oscillator 16MHz. */
1106:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSE);
 2995              		.loc 1 1106 2
 2996 0016 0320     		movs	r0, #3
 2997 0018 FFF7FEFF 		bl	rcc_osc_on(PLT)
1107:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSE);
 2998              		.loc 1 1107 2
 2999 001c 0320     		movs	r0, #3
 3000 001e FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1108:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 3001              		.loc 1 1108 2
 3002 0022 0120     		movs	r0, #1
 3003 0024 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1109:../libopencm3/lib/stm32/f1/rcc.c **** 
1110:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1111:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
1112:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
1113:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1114:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 3004              		.loc 1 1114 2
 3005 0028 0020     		movs	r0, #0
 3006 002a FFF7FEFF 		bl	rcc_set_hpre(PLT)
1115:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV6);  /* Set. 12MHz Max. 14MHz */
 3007              		.loc 1 1115 2
 3008 002e 0220     		movs	r0, #2
 3009 0030 FFF7FEFF 		bl	rcc_set_adcpre(PLT)
1116:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);     /* Set. 36MHz Max. 36MHz */
 3010              		.loc 1 1116 2
 3011 0034 0420     		movs	r0, #4
 3012 0036 FFF7FEFF 		bl	rcc_set_ppre1(PLT)
1117:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 3013              		.loc 1 1117 2
 3014 003a 0020     		movs	r0, #0
 3015 003c FFF7FEFF 		bl	rcc_set_ppre2(PLT)
1118:../libopencm3/lib/stm32/f1/rcc.c **** 
1119:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1120:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 72MHz -> 2 waitstates.
1121:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
1122:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
1123:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
1124:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1125:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 3016              		.loc 1 1125 2
 3017 0040 0220     		movs	r0, #2
 3018 0042 FFF7FEFF 		bl	flash_set_ws(PLT)
1126:../libopencm3/lib/stm32/f1/rcc.c **** 
1127:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1128:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set the PLL multiplication factor to 9.
1129:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 16MHz (external) * 9 (multiplier) / 2 (PLLXTPRE_HSE_CLK_DIV2) = 72MHz
1130:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1131:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 3019              		.loc 1 1131 2
 3020 0046 0720     		movs	r0, #7
 3021 0048 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
1132:../libopencm3/lib/stm32/f1/rcc.c **** 
1133:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select HSI as PLL source. */
1134:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 3022              		.loc 1 1134 2
 3023 004c 0120     		movs	r0, #1
 3024 004e FFF7FEFF 		bl	rcc_set_pll_source(PLT)
1135:../libopencm3/lib/stm32/f1/rcc.c **** 
1136:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1137:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Divide external frequency by 2 before entering PLL
1138:../libopencm3/lib/stm32/f1/rcc.c **** 	 * (only valid/needed for HSE).
1139:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1140:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK_DIV2);
 3025              		.loc 1 1140 2
 3026 0052 0120     		movs	r0, #1
 3027 0054 FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
1141:../libopencm3/lib/stm32/f1/rcc.c **** 
1142:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
1143:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 3028              		.loc 1 1143 2
 3029 0058 0020     		movs	r0, #0
 3030 005a FFF7FEFF 		bl	rcc_osc_on(PLT)
1144:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 3031              		.loc 1 1144 2
 3032 005e 0020     		movs	r0, #0
 3033 0060 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1145:../libopencm3/lib/stm32/f1/rcc.c **** 
1146:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
1147:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 3034              		.loc 1 1147 2
 3035 0064 0220     		movs	r0, #2
 3036 0066 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1148:../libopencm3/lib/stm32/f1/rcc.c **** 
1149:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
1150:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 72000000;
 3037              		.loc 1 1150 20
 3038 006a 0C4B     		ldr	r3, .L198+8
 3039 006c 59F80330 		ldr	r3, [r9, r3]
 3040 0070 1A46     		mov	r2, r3
 3041 0072 084B     		ldr	r3, .L198
 3042 0074 1360     		str	r3, [r2]
1151:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 36000000;
 3043              		.loc 1 1151 21
 3044 0076 0A4B     		ldr	r3, .L198+12
 3045 0078 59F80330 		ldr	r3, [r9, r3]
 3046 007c 1A46     		mov	r2, r3
 3047 007e 064B     		ldr	r3, .L198+4
 3048 0080 1360     		str	r3, [r2]
1152:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 72000000;
 3049              		.loc 1 1152 21
 3050 0082 084B     		ldr	r3, .L198+16
 3051 0084 59F80330 		ldr	r3, [r9, r3]
 3052 0088 1A46     		mov	r2, r3
 3053 008a 024B     		ldr	r3, .L198
 3054 008c 1360     		str	r3, [r2]
1153:../libopencm3/lib/stm32/f1/rcc.c **** }
 3055              		.loc 1 1153 1
 3056 008e 00BF     		nop
 3057 0090 80BD     		pop	{r7, pc}
 3058              	.L199:
 3059 0092 00BF     		.align	2
 3060              	.L198:
 3061 0094 00A24A04 		.word	72000000
 3062 0098 00512502 		.word	36000000
 3063 009c 00000000 		.word	rcc_ahb_frequency(GOT)
 3064 00a0 00000000 		.word	rcc_apb1_frequency(GOT)
 3065 00a4 00000000 		.word	rcc_apb2_frequency(GOT)
 3066              		.cfi_endproc
 3067              	.LFE36:
 3069              		.section	.text.rcc_clock_setup_in_hse_25mhz_out_72mhz,"ax",%progbits
 3070              		.align	1
 3071              		.global	rcc_clock_setup_in_hse_25mhz_out_72mhz
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3075              		.fpu softvfp
 3077              	rcc_clock_setup_in_hse_25mhz_out_72mhz:
 3078              	.LFB37:
1154:../libopencm3/lib/stm32/f1/rcc.c **** 
1155:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1156:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Set System Clock PLL at 72MHz from HSE at 25MHz
1157:../libopencm3/lib/stm32/f1/rcc.c **** 
1158:../libopencm3/lib/stm32/f1/rcc.c **** */
1159:../libopencm3/lib/stm32/f1/rcc.c **** 
1160:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_in_hse_25mhz_out_72mhz(void)
1161:../libopencm3/lib/stm32/f1/rcc.c **** {
 3079              		.loc 1 1161 1
 3080              		.cfi_startproc
 3081              		@ args = 0, pretend = 0, frame = 0
 3082              		@ frame_needed = 1, uses_anonymous_args = 0
 3083 0000 80B5     		push	{r7, lr}
 3084              		.cfi_def_cfa_offset 8
 3085              		.cfi_offset 7, -8
 3086              		.cfi_offset 14, -4
 3087 0002 00AF     		add	r7, sp, #0
 3088              		.cfi_def_cfa_register 7
1162:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable external high-speed oscillator 25MHz. */
1163:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_HSE);
 3089              		.loc 1 1163 2
 3090 0004 0320     		movs	r0, #3
 3091 0006 FFF7FEFF 		bl	rcc_osc_on(PLT)
1164:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_HSE);
 3092              		.loc 1 1164 2
 3093 000a 0320     		movs	r0, #3
 3094 000c FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1165:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 3095              		.loc 1 1165 2
 3096 0010 0120     		movs	r0, #1
 3097 0012 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1166:../libopencm3/lib/stm32/f1/rcc.c **** 
1167:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1168:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Sysclk runs with 72MHz -> 2 waitstates.
1169:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 0WS from 0-24MHz
1170:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 1WS from 24-48MHz
1171:../libopencm3/lib/stm32/f1/rcc.c **** 	 * 2WS from 48-72MHz
1172:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1173:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 3098              		.loc 1 1173 2
 3099 0016 0220     		movs	r0, #2
 3100 0018 FFF7FEFF 		bl	flash_set_ws(PLT)
1174:../libopencm3/lib/stm32/f1/rcc.c **** 
1175:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1176:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Set prescalers for AHB, ADC, APB1, APB2.
1177:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Do this before touching the PLL (TODO: why?).
1178:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1179:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 3101              		.loc 1 1179 2
 3102 001c 0020     		movs	r0, #0
 3103 001e FFF7FEFF 		bl	rcc_set_hpre(PLT)
1180:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(RCC_CFGR_ADCPRE_DIV6);  /* Set. 12MHz Max. 14MHz */
 3104              		.loc 1 1180 2
 3105 0022 0220     		movs	r0, #2
 3106 0024 FFF7FEFF 		bl	rcc_set_adcpre(PLT)
1181:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(RCC_CFGR_PPRE_DIV2);     /* Set. 36MHz Max. 36MHz */
 3107              		.loc 1 1181 2
 3108 0028 0420     		movs	r0, #4
 3109 002a FFF7FEFF 		bl	rcc_set_ppre1(PLT)
1182:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(RCC_CFGR_PPRE_NODIV);    /* Set. 72MHz Max. 72MHz */
 3110              		.loc 1 1182 2
 3111 002e 0020     		movs	r0, #0
 3112 0030 FFF7FEFF 		bl	rcc_set_ppre2(PLT)
1183:../libopencm3/lib/stm32/f1/rcc.c **** 
1184:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set pll2 prediv and multiplier */
1185:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_prediv2(RCC_CFGR2_PREDIV2_DIV5);
 3113              		.loc 1 1185 2
 3114 0034 0420     		movs	r0, #4
 3115 0036 FFF7FEFF 		bl	rcc_set_prediv2(PLT)
1186:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll2_multiplication_factor(RCC_CFGR2_PLL2MUL_PLL2_CLK_MUL8);
 3116              		.loc 1 1186 2
 3117 003a 0620     		movs	r0, #6
 3118 003c FFF7FEFF 		bl	rcc_set_pll2_multiplication_factor(PLT)
1187:../libopencm3/lib/stm32/f1/rcc.c **** 
1188:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL2 oscillator and wait for it to stabilize */
1189:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL2);
 3119              		.loc 1 1189 2
 3120 0040 0120     		movs	r0, #1
 3121 0042 FFF7FEFF 		bl	rcc_osc_on(PLT)
1190:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL2);
 3122              		.loc 1 1190 2
 3123 0046 0120     		movs	r0, #1
 3124 0048 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1191:../libopencm3/lib/stm32/f1/rcc.c **** 
1192:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set pll1 prediv/multiplier, prediv1 src, and usb predivider */
1193:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 3125              		.loc 1 1193 2
 3126 004c 0020     		movs	r0, #0
 3127 004e FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
1194:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_prediv1_source(RCC_CFGR2_PREDIV1SRC_PLL2_CLK);
 3128              		.loc 1 1194 2
 3129 0052 0120     		movs	r0, #1
 3130 0054 FFF7FEFF 		bl	rcc_set_prediv1_source(PLT)
1195:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_prediv1(RCC_CFGR2_PREDIV_DIV5);
 3131              		.loc 1 1195 2
 3132 0058 0420     		movs	r0, #4
 3133 005a FFF7FEFF 		bl	rcc_set_prediv1(PLT)
1196:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 3134              		.loc 1 1196 2
 3135 005e 0720     		movs	r0, #7
 3136 0060 FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
1197:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(RCC_CFGR_PLLSRC_PREDIV1_CLK);
 3137              		.loc 1 1197 2
 3138 0064 0120     		movs	r0, #1
 3139 0066 FFF7FEFF 		bl	rcc_set_pll_source(PLT)
1198:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_usbpre(RCC_CFGR_USBPRE_PLL_VCO_CLK_DIV3);
 3140              		.loc 1 1198 2
 3141 006a 0020     		movs	r0, #0
 3142 006c FFF7FEFF 		bl	rcc_set_usbpre(PLT)
1199:../libopencm3/lib/stm32/f1/rcc.c **** 
1200:../libopencm3/lib/stm32/f1/rcc.c **** 	/* enable PLL1 and wait for it to stabilize */
1201:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 3143              		.loc 1 1201 2
 3144 0070 0020     		movs	r0, #0
 3145 0072 FFF7FEFF 		bl	rcc_osc_on(PLT)
1202:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 3146              		.loc 1 1202 2
 3147 0076 0020     		movs	r0, #0
 3148 0078 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1203:../libopencm3/lib/stm32/f1/rcc.c **** 
1204:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
1205:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 3149              		.loc 1 1205 2
 3150 007c 0220     		movs	r0, #2
 3151 007e FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1206:../libopencm3/lib/stm32/f1/rcc.c **** 
1207:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used */
1208:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency = 72000000;
 3152              		.loc 1 1208 20
 3153 0082 0C4B     		ldr	r3, .L201+8
 3154 0084 59F80330 		ldr	r3, [r9, r3]
 3155 0088 1A46     		mov	r2, r3
 3156 008a 084B     		ldr	r3, .L201
 3157 008c 1360     		str	r3, [r2]
1209:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = 36000000;
 3158              		.loc 1 1209 21
 3159 008e 0A4B     		ldr	r3, .L201+12
 3160 0090 59F80330 		ldr	r3, [r9, r3]
 3161 0094 1A46     		mov	r2, r3
 3162 0096 064B     		ldr	r3, .L201+4
 3163 0098 1360     		str	r3, [r2]
1210:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = 72000000;
 3164              		.loc 1 1210 21
 3165 009a 084B     		ldr	r3, .L201+16
 3166 009c 59F80330 		ldr	r3, [r9, r3]
 3167 00a0 1A46     		mov	r2, r3
 3168 00a2 024B     		ldr	r3, .L201
 3169 00a4 1360     		str	r3, [r2]
1211:../libopencm3/lib/stm32/f1/rcc.c **** }
 3170              		.loc 1 1211 1
 3171 00a6 00BF     		nop
 3172 00a8 80BD     		pop	{r7, pc}
 3173              	.L202:
 3174 00aa 00BF     		.align	2
 3175              	.L201:
 3176 00ac 00A24A04 		.word	72000000
 3177 00b0 00512502 		.word	36000000
 3178 00b4 00000000 		.word	rcc_ahb_frequency(GOT)
 3179 00b8 00000000 		.word	rcc_apb1_frequency(GOT)
 3180 00bc 00000000 		.word	rcc_apb2_frequency(GOT)
 3181              		.cfi_endproc
 3182              	.LFE37:
 3184              		.section	.text.rcc_clock_setup_pll,"ax",%progbits
 3185              		.align	1
 3186              		.global	rcc_clock_setup_pll
 3187              		.syntax unified
 3188              		.thumb
 3189              		.thumb_func
 3190              		.fpu softvfp
 3192              	rcc_clock_setup_pll:
 3193              	.LFB38:
1212:../libopencm3/lib/stm32/f1/rcc.c **** 
1213:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_clock_setup_pll(const struct rcc_clock_scale *clock)
1214:../libopencm3/lib/stm32/f1/rcc.c **** {
 3194              		.loc 1 1214 1
 3195              		.cfi_startproc
 3196              		@ args = 0, pretend = 0, frame = 8
 3197              		@ frame_needed = 1, uses_anonymous_args = 0
 3198 0000 80B5     		push	{r7, lr}
 3199              		.cfi_def_cfa_offset 8
 3200              		.cfi_offset 7, -8
 3201              		.cfi_offset 14, -4
 3202 0002 82B0     		sub	sp, sp, #8
 3203              		.cfi_def_cfa_offset 16
 3204 0004 00AF     		add	r7, sp, #0
 3205              		.cfi_def_cfa_register 7
 3206 0006 7860     		str	r0, [r7, #4]
1215:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->pll_source == RCC_CFGR_PLLSRC_HSE_CLK) {
 3207              		.loc 1 1215 11
 3208 0008 7B68     		ldr	r3, [r7, #4]
 3209 000a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3210              		.loc 1 1215 5
 3211 000c 012B     		cmp	r3, #1
 3212 000e 06D1     		bne	.L204
1216:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_osc_on(RCC_HSE);
 3213              		.loc 1 1216 3
 3214 0010 0320     		movs	r0, #3
 3215 0012 FFF7FEFF 		bl	rcc_osc_on(PLT)
1217:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_wait_for_osc_ready(RCC_HSE);
 3216              		.loc 1 1217 3
 3217 0016 0320     		movs	r0, #3
 3218 0018 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 3219 001c 05E0     		b	.L205
 3220              	.L204:
1218:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
1219:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_osc_on(RCC_HSI);
 3221              		.loc 1 1219 3
 3222 001e 0420     		movs	r0, #4
 3223 0020 FFF7FEFF 		bl	rcc_osc_on(PLT)
1220:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_wait_for_osc_ready(RCC_HSI);
 3224              		.loc 1 1220 3
 3225 0024 0420     		movs	r0, #4
 3226 0026 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 3227              	.L205:
1221:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1222:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_hpre(clock->hpre);
 3228              		.loc 1 1222 20
 3229 002a 7B68     		ldr	r3, [r7, #4]
 3230 002c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3231              		.loc 1 1222 2
 3232 002e 1846     		mov	r0, r3
 3233 0030 FFF7FEFF 		bl	rcc_set_hpre(PLT)
1223:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre1(clock->ppre1);
 3234              		.loc 1 1223 21
 3235 0034 7B68     		ldr	r3, [r7, #4]
 3236 0036 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3237              		.loc 1 1223 2
 3238 0038 1846     		mov	r0, r3
 3239 003a FFF7FEFF 		bl	rcc_set_ppre1(PLT)
1224:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_ppre2(clock->ppre2);
 3240              		.loc 1 1224 21
 3241 003e 7B68     		ldr	r3, [r7, #4]
 3242 0040 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3243              		.loc 1 1224 2
 3244 0042 1846     		mov	r0, r3
 3245 0044 FFF7FEFF 		bl	rcc_set_ppre2(PLT)
1225:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_adcpre(clock->adcpre);
 3246              		.loc 1 1225 22
 3247 0048 7B68     		ldr	r3, [r7, #4]
 3248 004a 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 3249              		.loc 1 1225 2
 3250 004c 1846     		mov	r0, r3
 3251 004e FFF7FEFF 		bl	rcc_set_adcpre(PLT)
1226:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_usbpre(clock->usbpre);
 3252              		.loc 1 1226 22
 3253 0052 7B68     		ldr	r3, [r7, #4]
 3254 0054 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 3255              		.loc 1 1226 2
 3256 0056 1846     		mov	r0, r3
 3257 0058 FFF7FEFF 		bl	rcc_set_usbpre(PLT)
1227:../libopencm3/lib/stm32/f1/rcc.c **** 	flash_set_ws(clock->flash_waitstates);
 3258              		.loc 1 1227 20
 3259 005c 7B68     		ldr	r3, [r7, #4]
 3260 005e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 3261              		.loc 1 1227 2
 3262 0060 1846     		mov	r0, r3
 3263 0062 FFF7FEFF 		bl	flash_set_ws(PLT)
1228:../libopencm3/lib/stm32/f1/rcc.c **** 
1229:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_multiplication_factor(clock->pll_mul);
 3264              		.loc 1 1229 41
 3265 0066 7B68     		ldr	r3, [r7, #4]
 3266 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3267              		.loc 1 1229 2
 3268 006a 1846     		mov	r0, r3
 3269 006c FFF7FEFF 		bl	rcc_set_pll_multiplication_factor(PLT)
1230:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_pll_source(clock->pll_source);
 3270              		.loc 1 1230 26
 3271 0070 7B68     		ldr	r3, [r7, #4]
 3272 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3273              		.loc 1 1230 2
 3274 0074 1846     		mov	r0, r3
 3275 0076 FFF7FEFF 		bl	rcc_set_pll_source(PLT)
1231:../libopencm3/lib/stm32/f1/rcc.c **** 
1232:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1233:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Magically handle F105/7 parts too.
1234:../libopencm3/lib/stm32/f1/rcc.c **** 	 * xtpre == prediv1 bit 0.
1235:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1236:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->prediv1 > RCC_CFGR2_PREDIV_DIV2) {
 3276              		.loc 1 1236 11
 3277 007a 7B68     		ldr	r3, [r7, #4]
 3278 007c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3279              		.loc 1 1236 5
 3280 007e 012B     		cmp	r3, #1
 3281 0080 05D9     		bls	.L206
1237:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_prediv1(clock->prediv1);
 3282              		.loc 1 1237 24
 3283 0082 7B68     		ldr	r3, [r7, #4]
 3284 0084 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3285              		.loc 1 1237 3
 3286 0086 1846     		mov	r0, r3
 3287 0088 FFF7FEFF 		bl	rcc_set_prediv1(PLT)
 3288 008c 04E0     		b	.L207
 3289              	.L206:
1238:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
1239:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_pllxtpre(clock->prediv1);
 3290              		.loc 1 1239 25
 3291 008e 7B68     		ldr	r3, [r7, #4]
 3292 0090 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 3293              		.loc 1 1239 3
 3294 0092 1846     		mov	r0, r3
 3295 0094 FFF7FEFF 		bl	rcc_set_pllxtpre(PLT)
 3296              	.L207:
1240:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1241:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->prediv1_source) {
 3297              		.loc 1 1241 11
 3298 0098 7B68     		ldr	r3, [r7, #4]
 3299 009a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3300              		.loc 1 1241 5
 3301 009c 002B     		cmp	r3, #0
 3302 009e 04D0     		beq	.L208
1242:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_prediv1_source(clock->prediv1_source);
 3303              		.loc 1 1242 31
 3304 00a0 7B68     		ldr	r3, [r7, #4]
 3305 00a2 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 3306              		.loc 1 1242 3
 3307 00a4 1846     		mov	r0, r3
 3308 00a6 FFF7FEFF 		bl	rcc_set_prediv1_source(PLT)
 3309              	.L208:
1243:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1244:../libopencm3/lib/stm32/f1/rcc.c **** 
1245:../libopencm3/lib/stm32/f1/rcc.c **** 	/*
1246:../libopencm3/lib/stm32/f1/rcc.c **** 	 * Magically handle other plls/prescalers on other parts
1247:../libopencm3/lib/stm32/f1/rcc.c **** 	 */
1248:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->prediv2) {
 3310              		.loc 1 1248 11
 3311 00aa 7B68     		ldr	r3, [r7, #4]
 3312 00ac 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 3313              		.loc 1 1248 5
 3314 00ae 002B     		cmp	r3, #0
 3315 00b0 04D0     		beq	.L209
1249:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_prediv2(clock->prediv2);
 3316              		.loc 1 1249 24
 3317 00b2 7B68     		ldr	r3, [r7, #4]
 3318 00b4 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 3319              		.loc 1 1249 3
 3320 00b6 1846     		mov	r0, r3
 3321 00b8 FFF7FEFF 		bl	rcc_set_prediv2(PLT)
 3322              	.L209:
1250:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1251:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->pll2_mul) {
 3323              		.loc 1 1251 11
 3324 00bc 7B68     		ldr	r3, [r7, #4]
 3325 00be 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 3326              		.loc 1 1251 5
 3327 00c0 002B     		cmp	r3, #0
 3328 00c2 0AD0     		beq	.L210
1252:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_pll2_multiplication_factor(clock->pll2_mul);
 3329              		.loc 1 1252 43
 3330 00c4 7B68     		ldr	r3, [r7, #4]
 3331 00c6 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 3332              		.loc 1 1252 3
 3333 00c8 1846     		mov	r0, r3
 3334 00ca FFF7FEFF 		bl	rcc_set_pll2_multiplication_factor(PLT)
1253:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_osc_on(RCC_PLL2);
 3335              		.loc 1 1253 3
 3336 00ce 0120     		movs	r0, #1
 3337 00d0 FFF7FEFF 		bl	rcc_osc_on(PLT)
1254:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_wait_for_osc_ready(RCC_PLL2);
 3338              		.loc 1 1254 3
 3339 00d4 0120     		movs	r0, #1
 3340 00d6 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 3341              	.L210:
1255:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1256:../libopencm3/lib/stm32/f1/rcc.c **** 	if (clock->pll3_mul) {
 3342              		.loc 1 1256 11
 3343 00da 7B68     		ldr	r3, [r7, #4]
 3344 00dc DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3345              		.loc 1 1256 5
 3346 00de 002B     		cmp	r3, #0
 3347 00e0 0AD0     		beq	.L211
1257:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_set_pll3_multiplication_factor(clock->pll3_mul);
 3348              		.loc 1 1257 43
 3349 00e2 7B68     		ldr	r3, [r7, #4]
 3350 00e4 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3351              		.loc 1 1257 3
 3352 00e6 1846     		mov	r0, r3
 3353 00e8 FFF7FEFF 		bl	rcc_set_pll3_multiplication_factor(PLT)
1258:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_osc_on(RCC_PLL3);
 3354              		.loc 1 1258 3
 3355 00ec 0220     		movs	r0, #2
 3356 00ee FFF7FEFF 		bl	rcc_osc_on(PLT)
1259:../libopencm3/lib/stm32/f1/rcc.c **** 		rcc_wait_for_osc_ready(RCC_PLL3);
 3357              		.loc 1 1259 3
 3358 00f2 0220     		movs	r0, #2
 3359 00f4 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
 3360              	.L211:
1260:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1261:../libopencm3/lib/stm32/f1/rcc.c **** 
1262:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Enable PLL oscillator and wait for it to stabilize. */
1263:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_osc_on(RCC_PLL);
 3361              		.loc 1 1263 2
 3362 00f8 0020     		movs	r0, #0
 3363 00fa FFF7FEFF 		bl	rcc_osc_on(PLT)
1264:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_wait_for_osc_ready(RCC_PLL);
 3364              		.loc 1 1264 2
 3365 00fe 0020     		movs	r0, #0
 3366 0100 FFF7FEFF 		bl	rcc_wait_for_osc_ready(PLT)
1265:../libopencm3/lib/stm32/f1/rcc.c **** 
1266:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Select PLL as SYSCLK source. */
1267:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 3367              		.loc 1 1267 2
 3368 0104 0220     		movs	r0, #2
 3369 0106 FFF7FEFF 		bl	rcc_set_sysclk_source(PLT)
1268:../libopencm3/lib/stm32/f1/rcc.c **** 
1269:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the peripheral clock frequencies used. */
1270:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_ahb_frequency  = clock->ahb_frequency;
 3370              		.loc 1 1270 28
 3371 010a 7B68     		ldr	r3, [r7, #4]
 3372 010c 1B69     		ldr	r3, [r3, #16]
 3373              		.loc 1 1270 21
 3374 010e 0A4A     		ldr	r2, .L212
 3375 0110 59F80220 		ldr	r2, [r9, r2]
 3376 0114 1360     		str	r3, [r2]
1271:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb1_frequency = clock->apb1_frequency;
 3377              		.loc 1 1271 28
 3378 0116 7B68     		ldr	r3, [r7, #4]
 3379 0118 5B69     		ldr	r3, [r3, #20]
 3380              		.loc 1 1271 21
 3381 011a 084A     		ldr	r2, .L212+4
 3382 011c 59F80220 		ldr	r2, [r9, r2]
 3383 0120 1360     		str	r3, [r2]
1272:../libopencm3/lib/stm32/f1/rcc.c **** 	rcc_apb2_frequency = clock->apb2_frequency;
 3384              		.loc 1 1272 28
 3385 0122 7B68     		ldr	r3, [r7, #4]
 3386 0124 9B69     		ldr	r3, [r3, #24]
 3387              		.loc 1 1272 21
 3388 0126 064A     		ldr	r2, .L212+8
 3389 0128 59F80220 		ldr	r2, [r9, r2]
 3390 012c 1360     		str	r3, [r2]
1273:../libopencm3/lib/stm32/f1/rcc.c **** }
 3391              		.loc 1 1273 1
 3392 012e 00BF     		nop
 3393 0130 0837     		adds	r7, r7, #8
 3394              		.cfi_def_cfa_offset 8
 3395 0132 BD46     		mov	sp, r7
 3396              		.cfi_def_cfa_register 13
 3397              		@ sp needed
 3398 0134 80BD     		pop	{r7, pc}
 3399              	.L213:
 3400 0136 00BF     		.align	2
 3401              	.L212:
 3402 0138 00000000 		.word	rcc_ahb_frequency(GOT)
 3403 013c 00000000 		.word	rcc_apb1_frequency(GOT)
 3404 0140 00000000 		.word	rcc_apb2_frequency(GOT)
 3405              		.cfi_endproc
 3406              	.LFE38:
 3408              		.section	.text.rcc_backupdomain_reset,"ax",%progbits
 3409              		.align	1
 3410              		.global	rcc_backupdomain_reset
 3411              		.syntax unified
 3412              		.thumb
 3413              		.thumb_func
 3414              		.fpu softvfp
 3416              	rcc_backupdomain_reset:
 3417              	.LFB39:
1274:../libopencm3/lib/stm32/f1/rcc.c **** 
1275:../libopencm3/lib/stm32/f1/rcc.c **** 
1276:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1277:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief RCC Reset the Backup Domain
1278:../libopencm3/lib/stm32/f1/rcc.c **** 
1279:../libopencm3/lib/stm32/f1/rcc.c **** The backup domain registers are reset to disable RTC controls and clear user
1280:../libopencm3/lib/stm32/f1/rcc.c **** data.
1281:../libopencm3/lib/stm32/f1/rcc.c **** */
1282:../libopencm3/lib/stm32/f1/rcc.c **** 
1283:../libopencm3/lib/stm32/f1/rcc.c **** void rcc_backupdomain_reset(void)
1284:../libopencm3/lib/stm32/f1/rcc.c **** {
 3418              		.loc 1 1284 1
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 0
 3421              		@ frame_needed = 1, uses_anonymous_args = 0
 3422              		@ link register save eliminated.
 3423 0000 80B4     		push	{r7}
 3424              		.cfi_def_cfa_offset 4
 3425              		.cfi_offset 7, -4
 3426 0002 00AF     		add	r7, sp, #0
 3427              		.cfi_def_cfa_register 7
1285:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Set the backup domain software reset. */
1286:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_BDCR |= RCC_BDCR_BDRST;
 3428              		.loc 1 1286 11
 3429 0004 074B     		ldr	r3, .L215
 3430 0006 1B68     		ldr	r3, [r3]
 3431 0008 064A     		ldr	r2, .L215
 3432 000a 43F48033 		orr	r3, r3, #65536
 3433 000e 1360     		str	r3, [r2]
1287:../libopencm3/lib/stm32/f1/rcc.c **** 
1288:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Clear the backup domain software reset. */
1289:../libopencm3/lib/stm32/f1/rcc.c **** 	RCC_BDCR &= ~RCC_BDCR_BDRST;
 3434              		.loc 1 1289 11
 3435 0010 044B     		ldr	r3, .L215
 3436 0012 1B68     		ldr	r3, [r3]
 3437 0014 034A     		ldr	r2, .L215
 3438 0016 23F48033 		bic	r3, r3, #65536
 3439 001a 1360     		str	r3, [r2]
1290:../libopencm3/lib/stm32/f1/rcc.c **** }
 3440              		.loc 1 1290 1
 3441 001c 00BF     		nop
 3442 001e BD46     		mov	sp, r7
 3443              		.cfi_def_cfa_register 13
 3444              		@ sp needed
 3445 0020 80BC     		pop	{r7}
 3446              		.cfi_restore 7
 3447              		.cfi_def_cfa_offset 0
 3448 0022 7047     		bx	lr
 3449              	.L216:
 3450              		.align	2
 3451              	.L215:
 3452 0024 20100240 		.word	1073877024
 3453              		.cfi_endproc
 3454              	.LFE39:
 3456              		.section	.text.rcc_get_usart_clk_freq,"ax",%progbits
 3457              		.align	1
 3458              		.global	rcc_get_usart_clk_freq
 3459              		.syntax unified
 3460              		.thumb
 3461              		.thumb_func
 3462              		.fpu softvfp
 3464              	rcc_get_usart_clk_freq:
 3465              	.LFB40:
1291:../libopencm3/lib/stm32/f1/rcc.c **** 
1292:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1293:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief Get the peripheral clock speed for the USART at base specified.
1294:../libopencm3/lib/stm32/f1/rcc.c ****  * @param usart  Base address of USART to get clock frequency for.
1295:../libopencm3/lib/stm32/f1/rcc.c ****  */
1296:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_get_usart_clk_freq(uint32_t usart)
1297:../libopencm3/lib/stm32/f1/rcc.c **** {
 3466              		.loc 1 1297 1
 3467              		.cfi_startproc
 3468              		@ args = 0, pretend = 0, frame = 8
 3469              		@ frame_needed = 1, uses_anonymous_args = 0
 3470              		@ link register save eliminated.
 3471 0000 80B4     		push	{r7}
 3472              		.cfi_def_cfa_offset 4
 3473              		.cfi_offset 7, -4
 3474 0002 83B0     		sub	sp, sp, #12
 3475              		.cfi_def_cfa_offset 16
 3476 0004 00AF     		add	r7, sp, #0
 3477              		.cfi_def_cfa_register 7
 3478 0006 7860     		str	r0, [r7, #4]
1298:../libopencm3/lib/stm32/f1/rcc.c **** 	if (usart == USART1_BASE) {
 3479              		.loc 1 1298 5
 3480 0008 7B68     		ldr	r3, [r7, #4]
 3481 000a 084A     		ldr	r2, .L220
 3482 000c 9342     		cmp	r3, r2
 3483 000e 04D1     		bne	.L218
1299:../libopencm3/lib/stm32/f1/rcc.c **** 		return rcc_apb2_frequency;
 3484              		.loc 1 1299 10
 3485 0010 074B     		ldr	r3, .L220+4
 3486 0012 59F80330 		ldr	r3, [r9, r3]
 3487 0016 1B68     		ldr	r3, [r3]
 3488 0018 03E0     		b	.L219
 3489              	.L218:
1300:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
1301:../libopencm3/lib/stm32/f1/rcc.c **** 		return rcc_apb1_frequency;
 3490              		.loc 1 1301 10
 3491 001a 064B     		ldr	r3, .L220+8
 3492 001c 59F80330 		ldr	r3, [r9, r3]
 3493 0020 1B68     		ldr	r3, [r3]
 3494              	.L219:
1302:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1303:../libopencm3/lib/stm32/f1/rcc.c **** }
 3495              		.loc 1 1303 1
 3496 0022 1846     		mov	r0, r3
 3497 0024 0C37     		adds	r7, r7, #12
 3498              		.cfi_def_cfa_offset 4
 3499 0026 BD46     		mov	sp, r7
 3500              		.cfi_def_cfa_register 13
 3501              		@ sp needed
 3502 0028 80BC     		pop	{r7}
 3503              		.cfi_restore 7
 3504              		.cfi_def_cfa_offset 0
 3505 002a 7047     		bx	lr
 3506              	.L221:
 3507              		.align	2
 3508              	.L220:
 3509 002c 00380140 		.word	1073821696
 3510 0030 00000000 		.word	rcc_apb2_frequency(GOT)
 3511 0034 00000000 		.word	rcc_apb1_frequency(GOT)
 3512              		.cfi_endproc
 3513              	.LFE40:
 3515              		.section	.text.rcc_get_timer_clk_freq,"ax",%progbits
 3516              		.align	1
 3517              		.global	rcc_get_timer_clk_freq
 3518              		.syntax unified
 3519              		.thumb
 3520              		.thumb_func
 3521              		.fpu softvfp
 3523              	rcc_get_timer_clk_freq:
 3524              	.LFB41:
1304:../libopencm3/lib/stm32/f1/rcc.c **** 
1305:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1306:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief Get the peripheral clock speed for the Timer at base specified.
1307:../libopencm3/lib/stm32/f1/rcc.c ****  * @param timer  Base address of TIM to get clock frequency for.
1308:../libopencm3/lib/stm32/f1/rcc.c ****  */
1309:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_get_timer_clk_freq(uint32_t timer)
1310:../libopencm3/lib/stm32/f1/rcc.c **** {
 3525              		.loc 1 1310 1
 3526              		.cfi_startproc
 3527              		@ args = 0, pretend = 0, frame = 16
 3528              		@ frame_needed = 1, uses_anonymous_args = 0
 3529              		@ link register save eliminated.
 3530 0000 80B4     		push	{r7}
 3531              		.cfi_def_cfa_offset 4
 3532              		.cfi_offset 7, -4
 3533 0002 85B0     		sub	sp, sp, #20
 3534              		.cfi_def_cfa_offset 24
 3535 0004 00AF     		add	r7, sp, #0
 3536              		.cfi_def_cfa_register 7
 3537 0006 7860     		str	r0, [r7, #4]
1311:../libopencm3/lib/stm32/f1/rcc.c **** 	/* Handle APB1 timer clocks. */
1312:../libopencm3/lib/stm32/f1/rcc.c **** 	if (timer >= TIM2_BASE && timer <= TIM14_BASE) {
 3538              		.loc 1 1312 5
 3539 0008 7B68     		ldr	r3, [r7, #4]
 3540 000a B3F1804F 		cmp	r3, #1073741824
 3541 000e 18D3     		bcc	.L223
 3542              		.loc 1 1312 25 discriminator 1
 3543 0010 7B68     		ldr	r3, [r7, #4]
 3544 0012 184A     		ldr	r2, .L229
 3545 0014 9342     		cmp	r3, r2
 3546 0016 14D8     		bhi	.L223
 3547              	.LBB2:
1313:../libopencm3/lib/stm32/f1/rcc.c **** 		uint8_t ppre1 = (RCC_CFGR >> RCC_CFGR_PPRE1_SHIFT) & RCC_CFGR_PPRE1_MASK;
 3548              		.loc 1 1313 20
 3549 0018 174B     		ldr	r3, .L229+4
 3550 001a 1B68     		ldr	r3, [r3]
 3551              		.loc 1 1313 29
 3552 001c 1B0A     		lsrs	r3, r3, #8
 3553              		.loc 1 1313 54
 3554 001e DBB2     		uxtb	r3, r3
 3555              		.loc 1 1313 11
 3556 0020 03F00703 		and	r3, r3, #7
 3557 0024 FB73     		strb	r3, [r7, #15]
1314:../libopencm3/lib/stm32/f1/rcc.c **** 		return (ppre1 == RCC_CFGR_PPRE1_HCLK_NODIV) ? rcc_apb1_frequency
1315:../libopencm3/lib/stm32/f1/rcc.c **** 			: 2 * rcc_apb1_frequency;
 3558              		.loc 1 1315 4
 3559 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3560 0028 002B     		cmp	r3, #0
 3561 002a 05D0     		beq	.L224
 3562              		.loc 1 1315 4 is_stmt 0 discriminator 1
 3563 002c 134B     		ldr	r3, .L229+8
 3564 002e 59F80330 		ldr	r3, [r9, r3]
 3565 0032 1B68     		ldr	r3, [r3]
 3566 0034 5B00     		lsls	r3, r3, #1
 3567 0036 18E0     		b	.L226
 3568              	.L224:
 3569              		.loc 1 1315 4 discriminator 2
 3570 0038 104B     		ldr	r3, .L229+8
 3571 003a 59F80330 		ldr	r3, [r9, r3]
 3572 003e 1B68     		ldr	r3, [r3]
 3573 0040 13E0     		b	.L226
 3574              	.L223:
 3575              	.LBE2:
 3576              	.LBB3:
1316:../libopencm3/lib/stm32/f1/rcc.c **** 	} else {
1317:../libopencm3/lib/stm32/f1/rcc.c **** 		uint8_t ppre2 = (RCC_CFGR >> RCC_CFGR_PPRE2_SHIFT) & RCC_CFGR_PPRE2_MASK;
 3577              		.loc 1 1317 20 is_stmt 1
 3578 0042 0D4B     		ldr	r3, .L229+4
 3579 0044 1B68     		ldr	r3, [r3]
 3580              		.loc 1 1317 29
 3581 0046 DB0A     		lsrs	r3, r3, #11
 3582              		.loc 1 1317 54
 3583 0048 DBB2     		uxtb	r3, r3
 3584              		.loc 1 1317 11
 3585 004a 03F00703 		and	r3, r3, #7
 3586 004e BB73     		strb	r3, [r7, #14]
1318:../libopencm3/lib/stm32/f1/rcc.c **** 		return (ppre2 == RCC_CFGR_PPRE2_HCLK_NODIV) ? rcc_apb2_frequency
1319:../libopencm3/lib/stm32/f1/rcc.c **** 			: 2 * rcc_apb2_frequency;
 3587              		.loc 1 1319 4
 3588 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3589 0052 002B     		cmp	r3, #0
 3590 0054 05D0     		beq	.L227
 3591              		.loc 1 1319 4 is_stmt 0 discriminator 1
 3592 0056 0A4B     		ldr	r3, .L229+12
 3593 0058 59F80330 		ldr	r3, [r9, r3]
 3594 005c 1B68     		ldr	r3, [r3]
 3595 005e 5B00     		lsls	r3, r3, #1
 3596 0060 03E0     		b	.L226
 3597              	.L227:
 3598              		.loc 1 1319 4 discriminator 2
 3599 0062 074B     		ldr	r3, .L229+12
 3600 0064 59F80330 		ldr	r3, [r9, r3]
 3601 0068 1B68     		ldr	r3, [r3]
 3602              	.L226:
 3603              	.LBE3:
1320:../libopencm3/lib/stm32/f1/rcc.c **** 	}
1321:../libopencm3/lib/stm32/f1/rcc.c **** 	cm3_assert_not_reached();
1322:../libopencm3/lib/stm32/f1/rcc.c **** }
 3604              		.loc 1 1322 1 is_stmt 1
 3605 006a 1846     		mov	r0, r3
 3606 006c 1437     		adds	r7, r7, #20
 3607              		.cfi_def_cfa_offset 4
 3608 006e BD46     		mov	sp, r7
 3609              		.cfi_def_cfa_register 13
 3610              		@ sp needed
 3611 0070 80BC     		pop	{r7}
 3612              		.cfi_restore 7
 3613              		.cfi_def_cfa_offset 0
 3614 0072 7047     		bx	lr
 3615              	.L230:
 3616              		.align	2
 3617              	.L229:
 3618 0074 00200040 		.word	1073750016
 3619 0078 04100240 		.word	1073876996
 3620 007c 00000000 		.word	rcc_apb1_frequency(GOT)
 3621 0080 00000000 		.word	rcc_apb2_frequency(GOT)
 3622              		.cfi_endproc
 3623              	.LFE41:
 3625              		.section	.text.rcc_get_i2c_clk_freq,"ax",%progbits
 3626              		.align	1
 3627              		.global	rcc_get_i2c_clk_freq
 3628              		.syntax unified
 3629              		.thumb
 3630              		.thumb_func
 3631              		.fpu softvfp
 3633              	rcc_get_i2c_clk_freq:
 3634              	.LFB42:
1323:../libopencm3/lib/stm32/f1/rcc.c **** 
1324:../libopencm3/lib/stm32/f1/rcc.c **** /*---------------------------------------------------------------------------*/
1325:../libopencm3/lib/stm32/f1/rcc.c **** /** @brief Get the peripheral clock speed for the I2C device at base specified.
1326:../libopencm3/lib/stm32/f1/rcc.c ****  * @param i2c  Base address of I2C to get clock frequency for.
1327:../libopencm3/lib/stm32/f1/rcc.c ****  */
1328:../libopencm3/lib/stm32/f1/rcc.c **** uint32_t rcc_get_i2c_clk_freq(uint32_t i2c __attribute__((unused)))
1329:../libopencm3/lib/stm32/f1/rcc.c **** {
 3635              		.loc 1 1329 1
 3636              		.cfi_startproc
 3637              		@ args = 0, pretend = 0, frame = 8
 3638              		@ frame_needed = 1, uses_anonymous_args = 0
 3639              		@ link register save eliminated.
 3640 0000 80B4     		push	{r7}
 3641              		.cfi_def_cfa_offset 4
 3642              		.cfi_offset 7, -4
 3643 0002 83B0     		sub	sp, sp, #12
 3644              		.cfi_def_cfa_offset 16
 3645 0004 00AF     		add	r7, sp, #0
 3646              		.cfi_def_cfa_register 7
 3647 0006 7860     		str	r0, [r7, #4]
1330:../libopencm3/lib/stm32/f1/rcc.c **** 	return rcc_apb1_frequency;
 3648              		.loc 1 1330 9
 3649 0008 044B     		ldr	r3, .L233
 3650 000a 59F80330 		ldr	r3, [r9, r3]
 3651 000e 1B68     		ldr	r3, [r3]
1331:../libopencm3/lib/stm32/f1/rcc.c **** }
 3652              		.loc 1 1331 1
 3653 0010 1846     		mov	r0, r3
 3654 0012 0C37     		adds	r7, r7, #12
 3655              		.cfi_def_cfa_offset 4
 3656 0014 BD46     		mov	sp, r7
 3657              		.cfi_def_cfa_register 13
 3658              		@ sp needed
 3659 0016 80BC     		pop	{r7}
 3660              		.cfi_restore 7
 3661              		.cfi_def_cfa_offset 0
 3662 0018 7047     		bx	lr
 3663              	.L234:
 3664 001a 00BF     		.align	2
 3665              	.L233:
 3666 001c 00000000 		.word	rcc_apb1_frequency(GOT)
 3667              		.cfi_endproc
 3668              	.LFE42:
 3670              		.text
 3671              	.Letext0:
 3672              		.file 2 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default
 3673              		.file 3 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 3674              		.file 4 "/home/src/eclipse-workspace/stm32f1_dfu/libopencm3/include/libopencm3/stm32/f1/rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rcc.c
     /tmp/ccUhboGL.s:20     .data.rcc_apb1_frequency:0000000000000000 rcc_apb1_frequency
     /tmp/ccUhboGL.s:17     .data.rcc_apb1_frequency:0000000000000000 $d
     /tmp/ccUhboGL.s:27     .data.rcc_apb2_frequency:0000000000000000 rcc_apb2_frequency
     /tmp/ccUhboGL.s:24     .data.rcc_apb2_frequency:0000000000000000 $d
     /tmp/ccUhboGL.s:34     .data.rcc_ahb_frequency:0000000000000000 rcc_ahb_frequency
     /tmp/ccUhboGL.s:31     .data.rcc_ahb_frequency:0000000000000000 $d
     /tmp/ccUhboGL.s:41     .rodata.rcc_hse_configs:0000000000000000 rcc_hse_configs
     /tmp/ccUhboGL.s:38     .rodata.rcc_hse_configs:0000000000000000 $d
     /tmp/ccUhboGL.s:112    .rodata.rcc_hsi_configs:0000000000000000 rcc_hsi_configs
     /tmp/ccUhboGL.s:109    .rodata.rcc_hsi_configs:0000000000000000 $d
     /tmp/ccUhboGL.s:152    .text.rcc_osc_ready_int_clear:0000000000000000 $t
     /tmp/ccUhboGL.s:160    .text.rcc_osc_ready_int_clear:0000000000000000 rcc_osc_ready_int_clear
     /tmp/ccUhboGL.s:187    .text.rcc_osc_ready_int_clear:000000000000001c $d
     /tmp/ccUhboGL.s:194    .text.rcc_osc_ready_int_clear:0000000000000038 $t
     /tmp/ccUhboGL.s:274    .text.rcc_osc_ready_int_clear:00000000000000a4 $d
     /tmp/ccUhboGL.s:279    .text.rcc_osc_ready_int_enable:0000000000000000 $t
     /tmp/ccUhboGL.s:286    .text.rcc_osc_ready_int_enable:0000000000000000 rcc_osc_ready_int_enable
     /tmp/ccUhboGL.s:312    .text.rcc_osc_ready_int_enable:000000000000001c $d
     /tmp/ccUhboGL.s:319    .text.rcc_osc_ready_int_enable:0000000000000038 $t
     /tmp/ccUhboGL.s:399    .text.rcc_osc_ready_int_enable:00000000000000a4 $d
     /tmp/ccUhboGL.s:404    .text.rcc_osc_ready_int_disable:0000000000000000 $t
     /tmp/ccUhboGL.s:411    .text.rcc_osc_ready_int_disable:0000000000000000 rcc_osc_ready_int_disable
     /tmp/ccUhboGL.s:437    .text.rcc_osc_ready_int_disable:000000000000001c $d
     /tmp/ccUhboGL.s:444    .text.rcc_osc_ready_int_disable:0000000000000038 $t
     /tmp/ccUhboGL.s:524    .text.rcc_osc_ready_int_disable:00000000000000a4 $d
     /tmp/ccUhboGL.s:529    .text.rcc_osc_ready_int_flag:0000000000000000 $t
     /tmp/ccUhboGL.s:536    .text.rcc_osc_ready_int_flag:0000000000000000 rcc_osc_ready_int_flag
     /tmp/ccUhboGL.s:562    .text.rcc_osc_ready_int_flag:000000000000001c $d
     /tmp/ccUhboGL.s:569    .text.rcc_osc_ready_int_flag:0000000000000038 $t
     /tmp/ccUhboGL.s:676    .text.rcc_osc_ready_int_flag:00000000000000d0 $d
     /tmp/ccUhboGL.s:681    .text.rcc_css_int_clear:0000000000000000 $t
     /tmp/ccUhboGL.s:688    .text.rcc_css_int_clear:0000000000000000 rcc_css_int_clear
     /tmp/ccUhboGL.s:718    .text.rcc_css_int_clear:0000000000000018 $d
     /tmp/ccUhboGL.s:723    .text.rcc_css_int_flag:0000000000000000 $t
     /tmp/ccUhboGL.s:730    .text.rcc_css_int_flag:0000000000000000 rcc_css_int_flag
     /tmp/ccUhboGL.s:765    .text.rcc_css_int_flag:0000000000000020 $d
     /tmp/ccUhboGL.s:770    .text.rcc_is_osc_ready:0000000000000000 $t
     /tmp/ccUhboGL.s:777    .text.rcc_is_osc_ready:0000000000000000 rcc_is_osc_ready
     /tmp/ccUhboGL.s:803    .text.rcc_is_osc_ready:000000000000001c $d
     /tmp/ccUhboGL.s:810    .text.rcc_is_osc_ready:0000000000000038 $t
     /tmp/ccUhboGL.s:913    .text.rcc_is_osc_ready:00000000000000d0 $d
     /tmp/ccUhboGL.s:920    .text.rcc_wait_for_osc_ready:0000000000000000 $t
     /tmp/ccUhboGL.s:927    .text.rcc_wait_for_osc_ready:0000000000000000 rcc_wait_for_osc_ready
     /tmp/ccUhboGL.s:969    .text.rcc_osc_on:0000000000000000 $t
     /tmp/ccUhboGL.s:976    .text.rcc_osc_on:0000000000000000 rcc_osc_on
     /tmp/ccUhboGL.s:1002   .text.rcc_osc_on:000000000000001c $d
     /tmp/ccUhboGL.s:1009   .text.rcc_osc_on:0000000000000038 $t
     /tmp/ccUhboGL.s:1089   .text.rcc_osc_on:00000000000000a4 $d
     /tmp/ccUhboGL.s:1096   .text.rcc_osc_off:0000000000000000 $t
     /tmp/ccUhboGL.s:1103   .text.rcc_osc_off:0000000000000000 rcc_osc_off
     /tmp/ccUhboGL.s:1129   .text.rcc_osc_off:000000000000001c $d
     /tmp/ccUhboGL.s:1136   .text.rcc_osc_off:0000000000000038 $t
     /tmp/ccUhboGL.s:1216   .text.rcc_osc_off:00000000000000a4 $d
     /tmp/ccUhboGL.s:1223   .text.rcc_css_enable:0000000000000000 $t
     /tmp/ccUhboGL.s:1230   .text.rcc_css_enable:0000000000000000 rcc_css_enable
     /tmp/ccUhboGL.s:1260   .text.rcc_css_enable:0000000000000018 $d
     /tmp/ccUhboGL.s:1265   .text.rcc_css_disable:0000000000000000 $t
     /tmp/ccUhboGL.s:1272   .text.rcc_css_disable:0000000000000000 rcc_css_disable
     /tmp/ccUhboGL.s:1302   .text.rcc_css_disable:0000000000000018 $d
     /tmp/ccUhboGL.s:1307   .text.rcc_set_sysclk_source:0000000000000000 $t
     /tmp/ccUhboGL.s:1314   .text.rcc_set_sysclk_source:0000000000000000 rcc_set_sysclk_source
     /tmp/ccUhboGL.s:1355   .text.rcc_set_sysclk_source:0000000000000024 $d
     /tmp/ccUhboGL.s:1360   .text.rcc_set_pll_multiplication_factor:0000000000000000 $t
     /tmp/ccUhboGL.s:1367   .text.rcc_set_pll_multiplication_factor:0000000000000000 rcc_set_pll_multiplication_factor
     /tmp/ccUhboGL.s:1410   .text.rcc_set_pll_multiplication_factor:0000000000000024 $d
     /tmp/ccUhboGL.s:1415   .text.rcc_set_pll2_multiplication_factor:0000000000000000 $t
     /tmp/ccUhboGL.s:1422   .text.rcc_set_pll2_multiplication_factor:0000000000000000 rcc_set_pll2_multiplication_factor
     /tmp/ccUhboGL.s:1465   .text.rcc_set_pll2_multiplication_factor:0000000000000024 $d
     /tmp/ccUhboGL.s:1470   .text.rcc_set_pll3_multiplication_factor:0000000000000000 $t
     /tmp/ccUhboGL.s:1477   .text.rcc_set_pll3_multiplication_factor:0000000000000000 rcc_set_pll3_multiplication_factor
     /tmp/ccUhboGL.s:1520   .text.rcc_set_pll3_multiplication_factor:0000000000000024 $d
     /tmp/ccUhboGL.s:1525   .text.rcc_set_pll_source:0000000000000000 $t
     /tmp/ccUhboGL.s:1532   .text.rcc_set_pll_source:0000000000000000 rcc_set_pll_source
     /tmp/ccUhboGL.s:1575   .text.rcc_set_pll_source:0000000000000024 $d
     /tmp/ccUhboGL.s:1580   .text.rcc_set_pllxtpre:0000000000000000 $t
     /tmp/ccUhboGL.s:1587   .text.rcc_set_pllxtpre:0000000000000000 rcc_set_pllxtpre
     /tmp/ccUhboGL.s:1630   .text.rcc_set_pllxtpre:0000000000000024 $d
     /tmp/ccUhboGL.s:1635   .text.rcc_rtc_clock_enabled_flag:0000000000000000 $t
     /tmp/ccUhboGL.s:1642   .text.rcc_rtc_clock_enabled_flag:0000000000000000 rcc_rtc_clock_enabled_flag
     /tmp/ccUhboGL.s:1670   .text.rcc_rtc_clock_enabled_flag:0000000000000014 $d
     /tmp/ccUhboGL.s:1675   .text.rcc_enable_rtc_clock:0000000000000000 $t
     /tmp/ccUhboGL.s:1682   .text.rcc_enable_rtc_clock:0000000000000000 rcc_enable_rtc_clock
     /tmp/ccUhboGL.s:1712   .text.rcc_enable_rtc_clock:0000000000000018 $d
     /tmp/ccUhboGL.s:1717   .text.rcc_set_rtc_clock_source:0000000000000000 $t
     /tmp/ccUhboGL.s:1724   .text.rcc_set_rtc_clock_source:0000000000000000 rcc_set_rtc_clock_source
     /tmp/ccUhboGL.s:1750   .text.rcc_set_rtc_clock_source:000000000000001c $d
     /tmp/ccUhboGL.s:1757   .text.rcc_set_rtc_clock_source:0000000000000038 $t
     /tmp/ccUhboGL.s:1885   .text.rcc_set_rtc_clock_source:00000000000000f8 $d
     /tmp/ccUhboGL.s:1892   .text.rcc_set_adcpre:0000000000000000 $t
     /tmp/ccUhboGL.s:1899   .text.rcc_set_adcpre:0000000000000000 rcc_set_adcpre
     /tmp/ccUhboGL.s:1942   .text.rcc_set_adcpre:0000000000000024 $d
     /tmp/ccUhboGL.s:1947   .text.rcc_set_ppre2:0000000000000000 $t
     /tmp/ccUhboGL.s:1954   .text.rcc_set_ppre2:0000000000000000 rcc_set_ppre2
     /tmp/ccUhboGL.s:1997   .text.rcc_set_ppre2:0000000000000024 $d
     /tmp/ccUhboGL.s:2002   .text.rcc_set_ppre1:0000000000000000 $t
     /tmp/ccUhboGL.s:2009   .text.rcc_set_ppre1:0000000000000000 rcc_set_ppre1
     /tmp/ccUhboGL.s:2052   .text.rcc_set_ppre1:0000000000000024 $d
     /tmp/ccUhboGL.s:2057   .text.rcc_set_hpre:0000000000000000 $t
     /tmp/ccUhboGL.s:2064   .text.rcc_set_hpre:0000000000000000 rcc_set_hpre
     /tmp/ccUhboGL.s:2107   .text.rcc_set_hpre:0000000000000024 $d
     /tmp/ccUhboGL.s:2112   .text.rcc_set_usbpre:0000000000000000 $t
     /tmp/ccUhboGL.s:2119   .text.rcc_set_usbpre:0000000000000000 rcc_set_usbpre
     /tmp/ccUhboGL.s:2168   .text.rcc_set_usbpre:0000000000000034 $d
     /tmp/ccUhboGL.s:2173   .text.rcc_set_prediv1:0000000000000000 $t
     /tmp/ccUhboGL.s:2180   .text.rcc_set_prediv1:0000000000000000 rcc_set_prediv1
     /tmp/ccUhboGL.s:2221   .text.rcc_set_prediv1:0000000000000024 $d
     /tmp/ccUhboGL.s:2226   .text.rcc_set_prediv2:0000000000000000 $t
     /tmp/ccUhboGL.s:2233   .text.rcc_set_prediv2:0000000000000000 rcc_set_prediv2
     /tmp/ccUhboGL.s:2276   .text.rcc_set_prediv2:0000000000000024 $d
     /tmp/ccUhboGL.s:2281   .text.rcc_set_prediv1_source:0000000000000000 $t
     /tmp/ccUhboGL.s:2288   .text.rcc_set_prediv1_source:0000000000000000 rcc_set_prediv1_source
     /tmp/ccUhboGL.s:2337   .text.rcc_set_prediv1_source:0000000000000034 $d
     /tmp/ccUhboGL.s:2342   .text.rcc_system_clock_source:0000000000000000 $t
     /tmp/ccUhboGL.s:2349   .text.rcc_system_clock_source:0000000000000000 rcc_system_clock_source
     /tmp/ccUhboGL.s:2379   .text.rcc_system_clock_source:0000000000000018 $d
     /tmp/ccUhboGL.s:2384   .text.rcc_clock_setup_in_hsi_out_64mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2391   .text.rcc_clock_setup_in_hsi_out_64mhz:0000000000000000 rcc_clock_setup_in_hsi_out_64mhz
     /tmp/ccUhboGL.s:2466   .text.rcc_clock_setup_in_hsi_out_64mhz:000000000000007c $d
     /tmp/ccUhboGL.s:2475   .text.rcc_clock_setup_in_hsi_out_48mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2482   .text.rcc_clock_setup_in_hsi_out_48mhz:0000000000000000 rcc_clock_setup_in_hsi_out_48mhz
     /tmp/ccUhboGL.s:2560   .text.rcc_clock_setup_in_hsi_out_48mhz:0000000000000080 $d
     /tmp/ccUhboGL.s:2569   .text.rcc_clock_setup_in_hsi_out_24mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2576   .text.rcc_clock_setup_in_hsi_out_24mhz:0000000000000000 rcc_clock_setup_in_hsi_out_24mhz
     /tmp/ccUhboGL.s:2651   .text.rcc_clock_setup_in_hsi_out_24mhz:000000000000007c $d
     /tmp/ccUhboGL.s:2659   .text.rcc_clock_setup_in_hse_8mhz_out_24mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2666   .text.rcc_clock_setup_in_hse_8mhz_out_24mhz:0000000000000000 rcc_clock_setup_in_hse_8mhz_out_24mhz
     /tmp/ccUhboGL.s:2753   .text.rcc_clock_setup_in_hse_8mhz_out_24mhz:0000000000000094 $d
     /tmp/ccUhboGL.s:2761   .text.rcc_clock_setup_in_hse_8mhz_out_72mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2768   .text.rcc_clock_setup_in_hse_8mhz_out_72mhz:0000000000000000 rcc_clock_setup_in_hse_8mhz_out_72mhz
     /tmp/ccUhboGL.s:2855   .text.rcc_clock_setup_in_hse_8mhz_out_72mhz:0000000000000094 $d
     /tmp/ccUhboGL.s:2864   .text.rcc_clock_setup_in_hse_12mhz_out_72mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2871   .text.rcc_clock_setup_in_hse_12mhz_out_72mhz:0000000000000000 rcc_clock_setup_in_hse_12mhz_out_72mhz
     /tmp/ccUhboGL.s:2958   .text.rcc_clock_setup_in_hse_12mhz_out_72mhz:0000000000000094 $d
     /tmp/ccUhboGL.s:2967   .text.rcc_clock_setup_in_hse_16mhz_out_72mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:2974   .text.rcc_clock_setup_in_hse_16mhz_out_72mhz:0000000000000000 rcc_clock_setup_in_hse_16mhz_out_72mhz
     /tmp/ccUhboGL.s:3061   .text.rcc_clock_setup_in_hse_16mhz_out_72mhz:0000000000000094 $d
     /tmp/ccUhboGL.s:3070   .text.rcc_clock_setup_in_hse_25mhz_out_72mhz:0000000000000000 $t
     /tmp/ccUhboGL.s:3077   .text.rcc_clock_setup_in_hse_25mhz_out_72mhz:0000000000000000 rcc_clock_setup_in_hse_25mhz_out_72mhz
     /tmp/ccUhboGL.s:3176   .text.rcc_clock_setup_in_hse_25mhz_out_72mhz:00000000000000ac $d
     /tmp/ccUhboGL.s:3185   .text.rcc_clock_setup_pll:0000000000000000 $t
     /tmp/ccUhboGL.s:3192   .text.rcc_clock_setup_pll:0000000000000000 rcc_clock_setup_pll
     /tmp/ccUhboGL.s:3402   .text.rcc_clock_setup_pll:0000000000000138 $d
     /tmp/ccUhboGL.s:3409   .text.rcc_backupdomain_reset:0000000000000000 $t
     /tmp/ccUhboGL.s:3416   .text.rcc_backupdomain_reset:0000000000000000 rcc_backupdomain_reset
     /tmp/ccUhboGL.s:3452   .text.rcc_backupdomain_reset:0000000000000024 $d
     /tmp/ccUhboGL.s:3457   .text.rcc_get_usart_clk_freq:0000000000000000 $t
     /tmp/ccUhboGL.s:3464   .text.rcc_get_usart_clk_freq:0000000000000000 rcc_get_usart_clk_freq
     /tmp/ccUhboGL.s:3509   .text.rcc_get_usart_clk_freq:000000000000002c $d
     /tmp/ccUhboGL.s:3516   .text.rcc_get_timer_clk_freq:0000000000000000 $t
     /tmp/ccUhboGL.s:3523   .text.rcc_get_timer_clk_freq:0000000000000000 rcc_get_timer_clk_freq
     /tmp/ccUhboGL.s:3618   .text.rcc_get_timer_clk_freq:0000000000000074 $d
     /tmp/ccUhboGL.s:3626   .text.rcc_get_i2c_clk_freq:0000000000000000 $t
     /tmp/ccUhboGL.s:3633   .text.rcc_get_i2c_clk_freq:0000000000000000 rcc_get_i2c_clk_freq
     /tmp/ccUhboGL.s:3666   .text.rcc_get_i2c_clk_freq:000000000000001c $d
                           .group:0000000000000000 wm4.0.5634517379934ab330ad1f3d5297a544
                           .group:0000000000000000 wm4.common.h.21.c9066c2f6b12c71b40226ea6107829a4
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.common.h.67.5c568a1f62c8e726909b04e29f9e1fc0
                           .group:0000000000000000 wm4.assert.h.53.565a4ee64503b1a51b0509de816d9092
                           .group:0000000000000000 wm4.memorymap.h.21.8c90486dae5eea2d8efddd23fe5d09d9
                           .group:0000000000000000 wm4.memorymap.h.28.604d7358fc0612658e4a83c212b80b62
                           .group:0000000000000000 wm4.rcc.h.41.95732b09c707a3cd05d8e73deda4763f
                           .group:0000000000000000 wm4.flash_common_f01.h.35.08a510204460b203acd9a4d6dd59edc6
                           .group:0000000000000000 wm4.flash.h.55.42f95aa46a0865597bcfe2be66f7631d

UNDEFINED SYMBOLS
cm3_assert_failed
flash_set_ws
