   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"rcc_common_all.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.rcc_peripheral_enable_clock,"ax",%progbits
  16              		.align	1
  17              		.global	rcc_peripheral_enable_clock
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	rcc_peripheral_enable_clock:
  25              	.LFB0:
  26              		.file 1 "../libopencm3/lib/stm32/common/rcc_common_all.c"
   1:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @addtogroup rcc_file RCC peripheral API
   2:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @ingroup peripheral_apis
   3:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
   4:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*
   5:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * This file is part of the libopencm3 project.
   6:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
   7:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Copyright (C) 2013 Frantisek Burian <bufran@seznam.cz>
   8:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * .. file is merged from many other copyrighted files of stm32 family
   9:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  10:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * This library is free software: you can redistribute it and/or modify
  11:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * it under the terms of the GNU Lesser General Public License as published by
  12:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * the Free Software Foundation, either version 3 of the License, or
  13:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * (at your option) any later version.
  14:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  15:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * This library is distributed in the hope that it will be useful,
  16:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * GNU Lesser General Public License for more details.
  19:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  20:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * You should have received a copy of the GNU Lesser General Public License
  21:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * along with this library.  If not, see <http://www.gnu.org/licenses/>.
  22:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
  23:../libopencm3/lib/stm32/common/rcc_common_all.c **** /**@{*/
  24:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  25:../libopencm3/lib/stm32/common/rcc_common_all.c **** #include <libopencm3/stm32/rcc.h>
  26:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  27:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
  28:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief RCC Enable Peripheral Clocks.
  29:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  30:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Enable the clock on particular peripherals. There are three registers
  31:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * involved, each one controlling the enabling of clocks associated with the
  32:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * AHB, APB1 and APB2 respectively. Several peripherals could be enabled
  33:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * simultaneously <em>only if they are controlled by the same register</em>.
  34:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_clock_enable for a less error prone version, if you only
  35:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * need to enable a single peripheral.
  36:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  37:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] *reg Unsigned int32. Pointer to a Clock Enable Register
  38:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *			 (either RCC_AHBENR, RCC_APB1ENR or RCC_APB2ENR)
  39:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  40:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] en Unsigned int32. Logical OR of all enables to be set
  41:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_AHBENR, from @ref rcc_ahbenr_en
  42:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB1ENR, from @ref rcc_apb1enr_en
  43:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
  44:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
  45:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  46:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
  47:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
  27              		.loc 1 47 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  48:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	*reg |= en;
  41              		.loc 1 48 7
  42 000a 7B68     		ldr	r3, [r7, #4]
  43 000c 1A68     		ldr	r2, [r3]
  44 000e 3B68     		ldr	r3, [r7]
  45 0010 1A43     		orrs	r2, r2, r3
  46 0012 7B68     		ldr	r3, [r7, #4]
  47 0014 1A60     		str	r2, [r3]
  49:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
  48              		.loc 1 49 1
  49 0016 00BF     		nop
  50 0018 0C37     		adds	r7, r7, #12
  51              		.cfi_def_cfa_offset 4
  52 001a BD46     		mov	sp, r7
  53              		.cfi_def_cfa_register 13
  54              		@ sp needed
  55 001c 80BC     		pop	{r7}
  56              		.cfi_restore 7
  57              		.cfi_def_cfa_offset 0
  58 001e 7047     		bx	lr
  59              		.cfi_endproc
  60              	.LFE0:
  62              		.section	.text.rcc_peripheral_disable_clock,"ax",%progbits
  63              		.align	1
  64              		.global	rcc_peripheral_disable_clock
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu softvfp
  70              	rcc_peripheral_disable_clock:
  71              	.LFB1:
  50:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  51:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
  52:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief RCC Disable Peripheral Clocks.
  53:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  54:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Disable the clock on particular peripherals. There are three registers
  55:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * involved, each one controlling the enabling of clocks associated with
  56:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * the AHB, APB1 and APB2 respectively. Several peripherals could be disabled
  57:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * simultaneously <em>only if they are controlled by the same register</em>.
  58:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_clock_disable for a less error prone version, if you only
  59:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * need to disable a single peripheral.
  60:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  61:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] *reg Unsigned int32. Pointer to a Clock Enable Register
  62:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *			 (either RCC_AHBENR, RCC_APB1ENR or RCC_APB2ENR)
  63:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] en Unsigned int32. Logical OR of all enables to be used for
  64:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * disabling.
  65:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_AHBENR, from @ref rcc_ahbenr_en
  66:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB1ENR, from @ref rcc_apb1enr_en
  67:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
  68:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
  69:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_peripheral_disable_clock(volatile uint32_t *reg, uint32_t en)
  70:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
  72              		.loc 1 70 1
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 8
  75              		@ frame_needed = 1, uses_anonymous_args = 0
  76              		@ link register save eliminated.
  77 0000 80B4     		push	{r7}
  78              		.cfi_def_cfa_offset 4
  79              		.cfi_offset 7, -4
  80 0002 83B0     		sub	sp, sp, #12
  81              		.cfi_def_cfa_offset 16
  82 0004 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
  84 0006 7860     		str	r0, [r7, #4]
  85 0008 3960     		str	r1, [r7]
  71:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	*reg &= ~en;
  86              		.loc 1 71 7
  87 000a 7B68     		ldr	r3, [r7, #4]
  88 000c 1A68     		ldr	r2, [r3]
  89              		.loc 1 71 10
  90 000e 3B68     		ldr	r3, [r7]
  91 0010 DB43     		mvns	r3, r3
  92              		.loc 1 71 7
  93 0012 1A40     		ands	r2, r2, r3
  94 0014 7B68     		ldr	r3, [r7, #4]
  95 0016 1A60     		str	r2, [r3]
  72:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
  96              		.loc 1 72 1
  97 0018 00BF     		nop
  98 001a 0C37     		adds	r7, r7, #12
  99              		.cfi_def_cfa_offset 4
 100 001c BD46     		mov	sp, r7
 101              		.cfi_def_cfa_register 13
 102              		@ sp needed
 103 001e 80BC     		pop	{r7}
 104              		.cfi_restore 7
 105              		.cfi_def_cfa_offset 0
 106 0020 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE1:
 110              		.section	.text.rcc_peripheral_reset,"ax",%progbits
 111              		.align	1
 112              		.global	rcc_peripheral_reset
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	rcc_peripheral_reset:
 119              	.LFB2:
  73:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  74:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
  75:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief RCC Reset Peripherals.
  76:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  77:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Reset particular peripherals. There are three registers involved, each one
  78:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * controlling reset of peripherals associated with the AHB, APB1 and APB2
  79:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * respectively. Several peripherals could be reset simultaneously <em>only if
  80:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * they are controlled by the same register</em>.
  81:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_reset_hold for a less error prone version, if you only
  82:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * need to reset a single peripheral.
  83:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_reset_pulse if you are only going to toggle reset anyway.
  84:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
  85:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] *reg Unsigned int32. Pointer to a Reset Register
  86:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *			 (either RCC_AHBENR, RCC_APB1ENR or RCC_APB2ENR)
  87:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] reset Unsigned int32. Logical OR of all resets.
  88:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_AHBRSTR, from @ref rcc_ahbrstr_rst
  89:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
  90:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
  91:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
  92:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset)
  93:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 120              		.loc 1 93 1
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 8
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0002 83B0     		sub	sp, sp, #12
 129              		.cfi_def_cfa_offset 16
 130 0004 00AF     		add	r7, sp, #0
 131              		.cfi_def_cfa_register 7
 132 0006 7860     		str	r0, [r7, #4]
 133 0008 3960     		str	r1, [r7]
  94:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	*reg |= reset;
 134              		.loc 1 94 7
 135 000a 7B68     		ldr	r3, [r7, #4]
 136 000c 1A68     		ldr	r2, [r3]
 137 000e 3B68     		ldr	r3, [r7]
 138 0010 1A43     		orrs	r2, r2, r3
 139 0012 7B68     		ldr	r3, [r7, #4]
 140 0014 1A60     		str	r2, [r3]
  95:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 141              		.loc 1 95 1
 142 0016 00BF     		nop
 143 0018 0C37     		adds	r7, r7, #12
 144              		.cfi_def_cfa_offset 4
 145 001a BD46     		mov	sp, r7
 146              		.cfi_def_cfa_register 13
 147              		@ sp needed
 148 001c 80BC     		pop	{r7}
 149              		.cfi_restore 7
 150              		.cfi_def_cfa_offset 0
 151 001e 7047     		bx	lr
 152              		.cfi_endproc
 153              	.LFE2:
 155              		.section	.text.rcc_peripheral_clear_reset,"ax",%progbits
 156              		.align	1
 157              		.global	rcc_peripheral_clear_reset
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu softvfp
 163              	rcc_peripheral_clear_reset:
 164              	.LFB3:
  96:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
  97:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
  98:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief RCC Remove Reset on Peripherals.
  99:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 100:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Remove the reset on particular peripherals. There are three registers
 101:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * involved, each one controlling reset of peripherals associated with the AHB,
 102:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * APB1 and APB2 respectively. Several peripherals could have the reset removed
 103:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * simultaneously <em>only if they are controlled by the same register</em>.
 104:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_reset_release for a less error prone version, if you only
 105:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * need to unreset a single peripheral.
 106:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @sa rcc_periph_reset_pulse if you are only going to toggle reset anyway.
 107:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 108:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] *reg Unsigned int32. Pointer to a Reset Register
 109:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *			 (either RCC_AHBENR, RCC_APB1ENR or RCC_APB2ENR)
 110:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] clear_reset Unsigned int32. Logical OR of all resets to be
 111:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * removed:
 112:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_AHBRSTR, from @ref rcc_ahbrstr_rst
 113:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB1RSTR, from @ref rcc_apb1rstr_rst
 114:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @li If register is RCC_APB2RSTR, from @ref rcc_apb2rstr_rst
 115:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 116:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset)
 117:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 165              		.loc 1 117 1
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170 0000 80B4     		push	{r7}
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 83B0     		sub	sp, sp, #12
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178 0008 3960     		str	r1, [r7]
 118:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	*reg &= ~clear_reset;
 179              		.loc 1 118 7
 180 000a 7B68     		ldr	r3, [r7, #4]
 181 000c 1A68     		ldr	r2, [r3]
 182              		.loc 1 118 10
 183 000e 3B68     		ldr	r3, [r7]
 184 0010 DB43     		mvns	r3, r3
 185              		.loc 1 118 7
 186 0012 1A40     		ands	r2, r2, r3
 187 0014 7B68     		ldr	r3, [r7, #4]
 188 0016 1A60     		str	r2, [r3]
 119:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 189              		.loc 1 119 1
 190 0018 00BF     		nop
 191 001a 0C37     		adds	r7, r7, #12
 192              		.cfi_def_cfa_offset 4
 193 001c BD46     		mov	sp, r7
 194              		.cfi_def_cfa_register 13
 195              		@ sp needed
 196 001e 80BC     		pop	{r7}
 197              		.cfi_restore 7
 198              		.cfi_def_cfa_offset 0
 199 0020 7047     		bx	lr
 200              		.cfi_endproc
 201              	.LFE3:
 203              		.section	.text.rcc_periph_clock_enable,"ax",%progbits
 204              		.align	1
 205              		.global	rcc_periph_clock_enable
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	rcc_periph_clock_enable:
 212              	.LFB4:
 120:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 121:../libopencm3/lib/stm32/common/rcc_common_all.c **** #define _RCC_REG(i)		MMIO32(RCC_BASE + ((i) >> 5))
 122:../libopencm3/lib/stm32/common/rcc_common_all.c **** #define _RCC_BIT(i)		(1 << ((i) & 0x1f))
 123:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 124:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
 125:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Enable Peripheral Clock in running mode.
 126:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 127:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Enable the clock on particular peripheral.
 128:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 129:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] clken rcc_periph_clken Peripheral RCC
 130:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 131:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 132:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 133:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 134:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_periph_clock_enable(enum rcc_periph_clken clken)
 135:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 213              		.loc 1 135 1
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 8
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0000 80B4     		push	{r7}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              		.cfi_def_cfa_offset 16
 223 0004 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 0006 0346     		mov	r3, r0
 226 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 136:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(clken) |= _RCC_BIT(clken);
 227              		.loc 1 136 18
 228 000a FB88     		ldrh	r3, [r7, #6]
 229 000c 5B09     		lsrs	r3, r3, #5
 230 000e 9BB2     		uxth	r3, r3
 231 0010 03F18043 		add	r3, r3, #1073741824
 232 0014 03F50433 		add	r3, r3, #135168
 233 0018 1A68     		ldr	r2, [r3]
 234              		.loc 1 136 21
 235 001a FB88     		ldrh	r3, [r7, #6]
 236 001c 03F01F03 		and	r3, r3, #31
 237 0020 0121     		movs	r1, #1
 238 0022 01FA03F3 		lsl	r3, r1, r3
 239 0026 1846     		mov	r0, r3
 240              		.loc 1 136 18
 241 0028 FB88     		ldrh	r3, [r7, #6]
 242 002a 5B09     		lsrs	r3, r3, #5
 243 002c 9BB2     		uxth	r3, r3
 244 002e 03F18043 		add	r3, r3, #1073741824
 245 0032 03F50433 		add	r3, r3, #135168
 246 0036 1946     		mov	r1, r3
 247 0038 42EA0003 		orr	r3, r2, r0
 248 003c 0B60     		str	r3, [r1]
 137:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 249              		.loc 1 137 1
 250 003e 00BF     		nop
 251 0040 0C37     		adds	r7, r7, #12
 252              		.cfi_def_cfa_offset 4
 253 0042 BD46     		mov	sp, r7
 254              		.cfi_def_cfa_register 13
 255              		@ sp needed
 256 0044 80BC     		pop	{r7}
 257              		.cfi_restore 7
 258              		.cfi_def_cfa_offset 0
 259 0046 7047     		bx	lr
 260              		.cfi_endproc
 261              	.LFE4:
 263              		.section	.text.rcc_periph_clock_disable,"ax",%progbits
 264              		.align	1
 265              		.global	rcc_periph_clock_disable
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu softvfp
 271              	rcc_periph_clock_disable:
 272              	.LFB5:
 138:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 139:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
 140:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Disable Peripheral Clock in running mode.
 141:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Disable the clock on particular peripheral.
 142:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 143:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] clken rcc_periph_clken Peripheral RCC
 144:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 145:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 146:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 147:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 148:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_periph_clock_disable(enum rcc_periph_clken clken)
 149:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 273              		.loc 1 149 1
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0002 83B0     		sub	sp, sp, #12
 282              		.cfi_def_cfa_offset 16
 283 0004 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 0006 0346     		mov	r3, r0
 286 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 150:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 287              		.loc 1 150 18
 288 000a FB88     		ldrh	r3, [r7, #6]
 289 000c 5B09     		lsrs	r3, r3, #5
 290 000e 9BB2     		uxth	r3, r3
 291 0010 03F18043 		add	r3, r3, #1073741824
 292 0014 03F50433 		add	r3, r3, #135168
 293 0018 1A68     		ldr	r2, [r3]
 294              		.loc 1 150 22
 295 001a FB88     		ldrh	r3, [r7, #6]
 296 001c 03F01F03 		and	r3, r3, #31
 297 0020 0121     		movs	r1, #1
 298 0022 01FA03F3 		lsl	r3, r1, r3
 299              		.loc 1 150 21
 300 0026 DB43     		mvns	r3, r3
 301 0028 1846     		mov	r0, r3
 302              		.loc 1 150 18
 303 002a FB88     		ldrh	r3, [r7, #6]
 304 002c 5B09     		lsrs	r3, r3, #5
 305 002e 9BB2     		uxth	r3, r3
 306 0030 03F18043 		add	r3, r3, #1073741824
 307 0034 03F50433 		add	r3, r3, #135168
 308 0038 1946     		mov	r1, r3
 309 003a 02EA0003 		and	r3, r2, r0
 310 003e 0B60     		str	r3, [r1]
 151:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 311              		.loc 1 151 1
 312 0040 00BF     		nop
 313 0042 0C37     		adds	r7, r7, #12
 314              		.cfi_def_cfa_offset 4
 315 0044 BD46     		mov	sp, r7
 316              		.cfi_def_cfa_register 13
 317              		@ sp needed
 318 0046 80BC     		pop	{r7}
 319              		.cfi_restore 7
 320              		.cfi_def_cfa_offset 0
 321 0048 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE5:
 325              		.section	.text.rcc_periph_reset_pulse,"ax",%progbits
 326              		.align	1
 327              		.global	rcc_periph_reset_pulse
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 333              	rcc_periph_reset_pulse:
 334              	.LFB6:
 152:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 153:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
 154:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Reset Peripheral, pulsed
 155:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 156:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Reset particular peripheral, and restore to working state.
 157:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 158:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] rst rcc_periph_rst Peripheral reset
 159:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 160:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 161:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 162:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 163:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
 164:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 335              		.loc 1 164 1
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 8
 338              		@ frame_needed = 1, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340 0000 80B4     		push	{r7}
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 83B0     		sub	sp, sp, #12
 344              		.cfi_def_cfa_offset 16
 345 0004 00AF     		add	r7, sp, #0
 346              		.cfi_def_cfa_register 7
 347 0006 0346     		mov	r3, r0
 348 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 165:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(rst) |= _RCC_BIT(rst);
 349              		.loc 1 165 16
 350 000a FB88     		ldrh	r3, [r7, #6]
 351 000c 5B09     		lsrs	r3, r3, #5
 352 000e 9BB2     		uxth	r3, r3
 353 0010 03F18043 		add	r3, r3, #1073741824
 354 0014 03F50433 		add	r3, r3, #135168
 355 0018 1A68     		ldr	r2, [r3]
 356              		.loc 1 165 19
 357 001a FB88     		ldrh	r3, [r7, #6]
 358 001c 03F01F03 		and	r3, r3, #31
 359 0020 0121     		movs	r1, #1
 360 0022 01FA03F3 		lsl	r3, r1, r3
 361 0026 1846     		mov	r0, r3
 362              		.loc 1 165 16
 363 0028 FB88     		ldrh	r3, [r7, #6]
 364 002a 5B09     		lsrs	r3, r3, #5
 365 002c 9BB2     		uxth	r3, r3
 366 002e 03F18043 		add	r3, r3, #1073741824
 367 0032 03F50433 		add	r3, r3, #135168
 368 0036 1946     		mov	r1, r3
 369 0038 42EA0003 		orr	r3, r2, r0
 370 003c 0B60     		str	r3, [r1]
 166:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 371              		.loc 1 166 16
 372 003e FB88     		ldrh	r3, [r7, #6]
 373 0040 5B09     		lsrs	r3, r3, #5
 374 0042 9BB2     		uxth	r3, r3
 375 0044 03F18043 		add	r3, r3, #1073741824
 376 0048 03F50433 		add	r3, r3, #135168
 377 004c 1A68     		ldr	r2, [r3]
 378              		.loc 1 166 20
 379 004e FB88     		ldrh	r3, [r7, #6]
 380 0050 03F01F03 		and	r3, r3, #31
 381 0054 0121     		movs	r1, #1
 382 0056 01FA03F3 		lsl	r3, r1, r3
 383              		.loc 1 166 19
 384 005a DB43     		mvns	r3, r3
 385 005c 1846     		mov	r0, r3
 386              		.loc 1 166 16
 387 005e FB88     		ldrh	r3, [r7, #6]
 388 0060 5B09     		lsrs	r3, r3, #5
 389 0062 9BB2     		uxth	r3, r3
 390 0064 03F18043 		add	r3, r3, #1073741824
 391 0068 03F50433 		add	r3, r3, #135168
 392 006c 1946     		mov	r1, r3
 393 006e 02EA0003 		and	r3, r2, r0
 394 0072 0B60     		str	r3, [r1]
 167:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 395              		.loc 1 167 1
 396 0074 00BF     		nop
 397 0076 0C37     		adds	r7, r7, #12
 398              		.cfi_def_cfa_offset 4
 399 0078 BD46     		mov	sp, r7
 400              		.cfi_def_cfa_register 13
 401              		@ sp needed
 402 007a 80BC     		pop	{r7}
 403              		.cfi_restore 7
 404              		.cfi_def_cfa_offset 0
 405 007c 7047     		bx	lr
 406              		.cfi_endproc
 407              	.LFE6:
 409              		.section	.text.rcc_periph_reset_hold,"ax",%progbits
 410              		.align	1
 411              		.global	rcc_periph_reset_hold
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu softvfp
 417              	rcc_periph_reset_hold:
 418              	.LFB7:
 168:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 169:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
 170:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Reset Peripheral, hold
 171:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 172:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Reset particular peripheral, and hold in reset state.
 173:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 174:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] rst rcc_periph_rst Peripheral reset
 175:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 176:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 177:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 178:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 179:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_periph_reset_hold(enum rcc_periph_rst rst)
 180:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 419              		.loc 1 180 1
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 8
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              		.cfi_def_cfa_offset 4
 426              		.cfi_offset 7, -4
 427 0002 83B0     		sub	sp, sp, #12
 428              		.cfi_def_cfa_offset 16
 429 0004 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 431 0006 0346     		mov	r3, r0
 432 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 181:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(rst) |= _RCC_BIT(rst);
 433              		.loc 1 181 16
 434 000a FB88     		ldrh	r3, [r7, #6]
 435 000c 5B09     		lsrs	r3, r3, #5
 436 000e 9BB2     		uxth	r3, r3
 437 0010 03F18043 		add	r3, r3, #1073741824
 438 0014 03F50433 		add	r3, r3, #135168
 439 0018 1A68     		ldr	r2, [r3]
 440              		.loc 1 181 19
 441 001a FB88     		ldrh	r3, [r7, #6]
 442 001c 03F01F03 		and	r3, r3, #31
 443 0020 0121     		movs	r1, #1
 444 0022 01FA03F3 		lsl	r3, r1, r3
 445 0026 1846     		mov	r0, r3
 446              		.loc 1 181 16
 447 0028 FB88     		ldrh	r3, [r7, #6]
 448 002a 5B09     		lsrs	r3, r3, #5
 449 002c 9BB2     		uxth	r3, r3
 450 002e 03F18043 		add	r3, r3, #1073741824
 451 0032 03F50433 		add	r3, r3, #135168
 452 0036 1946     		mov	r1, r3
 453 0038 42EA0003 		orr	r3, r2, r0
 454 003c 0B60     		str	r3, [r1]
 182:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 455              		.loc 1 182 1
 456 003e 00BF     		nop
 457 0040 0C37     		adds	r7, r7, #12
 458              		.cfi_def_cfa_offset 4
 459 0042 BD46     		mov	sp, r7
 460              		.cfi_def_cfa_register 13
 461              		@ sp needed
 462 0044 80BC     		pop	{r7}
 463              		.cfi_restore 7
 464              		.cfi_def_cfa_offset 0
 465 0046 7047     		bx	lr
 466              		.cfi_endproc
 467              	.LFE7:
 469              		.section	.text.rcc_periph_reset_release,"ax",%progbits
 470              		.align	1
 471              		.global	rcc_periph_reset_release
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu softvfp
 477              	rcc_periph_reset_release:
 478              	.LFB8:
 183:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 184:../libopencm3/lib/stm32/common/rcc_common_all.c **** /*---------------------------------------------------------------------------*/
 185:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Reset Peripheral, release
 186:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 187:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Restore peripheral from reset state to working state.
 188:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 189:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] rst rcc_periph_rst Peripheral reset
 190:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 191:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 192:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 193:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 194:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_periph_reset_release(enum rcc_periph_rst rst)
 195:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 479              		.loc 1 195 1
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 83B0     		sub	sp, sp, #12
 488              		.cfi_def_cfa_offset 16
 489 0004 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 491 0006 0346     		mov	r3, r0
 492 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 196:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 493              		.loc 1 196 16
 494 000a FB88     		ldrh	r3, [r7, #6]
 495 000c 5B09     		lsrs	r3, r3, #5
 496 000e 9BB2     		uxth	r3, r3
 497 0010 03F18043 		add	r3, r3, #1073741824
 498 0014 03F50433 		add	r3, r3, #135168
 499 0018 1A68     		ldr	r2, [r3]
 500              		.loc 1 196 20
 501 001a FB88     		ldrh	r3, [r7, #6]
 502 001c 03F01F03 		and	r3, r3, #31
 503 0020 0121     		movs	r1, #1
 504 0022 01FA03F3 		lsl	r3, r1, r3
 505              		.loc 1 196 19
 506 0026 DB43     		mvns	r3, r3
 507 0028 1846     		mov	r0, r3
 508              		.loc 1 196 16
 509 002a FB88     		ldrh	r3, [r7, #6]
 510 002c 5B09     		lsrs	r3, r3, #5
 511 002e 9BB2     		uxth	r3, r3
 512 0030 03F18043 		add	r3, r3, #1073741824
 513 0034 03F50433 		add	r3, r3, #135168
 514 0038 1946     		mov	r1, r3
 515 003a 02EA0003 		and	r3, r2, r0
 516 003e 0B60     		str	r3, [r1]
 197:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 517              		.loc 1 197 1
 518 0040 00BF     		nop
 519 0042 0C37     		adds	r7, r7, #12
 520              		.cfi_def_cfa_offset 4
 521 0044 BD46     		mov	sp, r7
 522              		.cfi_def_cfa_register 13
 523              		@ sp needed
 524 0046 80BC     		pop	{r7}
 525              		.cfi_restore 7
 526              		.cfi_def_cfa_offset 0
 527 0048 7047     		bx	lr
 528              		.cfi_endproc
 529              	.LFE8:
 531              		.section	.text.rcc_set_mco,"ax",%progbits
 532              		.align	1
 533              		.global	rcc_set_mco
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 537              		.fpu softvfp
 539              	rcc_set_mco:
 540              	.LFB9:
 198:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 199:../libopencm3/lib/stm32/common/rcc_common_all.c **** /** @brief Select the source of Microcontroller Clock Output
 200:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 201:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Exact sources available depend on your target.  On devices with multiple
 202:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * MCO pins, this function controls MCO1
 203:../libopencm3/lib/stm32/common/rcc_common_all.c ****  *
 204:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] mcosrc the unshifted source bits
 205:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 206:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 207:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_set_mco(uint32_t mcosrc)
 208:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 541              		.loc 1 208 1
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 8
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 546 0000 80B4     		push	{r7}
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 83B0     		sub	sp, sp, #12
 550              		.cfi_def_cfa_offset 16
 551 0004 00AF     		add	r7, sp, #0
 552              		.cfi_def_cfa_register 7
 553 0006 7860     		str	r0, [r7, #4]
 209:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 554              		.loc 1 209 14
 555 0008 064B     		ldr	r3, .L11
 556 000a 1B68     		ldr	r3, [r3]
 557              		.loc 1 209 23
 558 000c 23F07062 		bic	r2, r3, #251658240
 210:../libopencm3/lib/stm32/common/rcc_common_all.c **** 			(mcosrc << RCC_CFGR_MCO_SHIFT);
 559              		.loc 1 210 12
 560 0010 7B68     		ldr	r3, [r7, #4]
 561 0012 1B06     		lsls	r3, r3, #24
 209:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 562              		.loc 1 209 2
 563 0014 0349     		ldr	r1, .L11
 209:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 564              		.loc 1 209 69
 565 0016 1343     		orrs	r3, r3, r2
 209:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 566              		.loc 1 209 11
 567 0018 0B60     		str	r3, [r1]
 211:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 568              		.loc 1 211 1
 569 001a 00BF     		nop
 570 001c 0C37     		adds	r7, r7, #12
 571              		.cfi_def_cfa_offset 4
 572 001e BD46     		mov	sp, r7
 573              		.cfi_def_cfa_register 13
 574              		@ sp needed
 575 0020 80BC     		pop	{r7}
 576              		.cfi_restore 7
 577              		.cfi_def_cfa_offset 0
 578 0022 7047     		bx	lr
 579              	.L12:
 580              		.align	2
 581              	.L11:
 582 0024 04100240 		.word	1073876996
 583              		.cfi_endproc
 584              	.LFE9:
 586              		.section	.text.rcc_osc_bypass_enable,"ax",%progbits
 587              		.align	1
 588              		.global	rcc_osc_bypass_enable
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	rcc_osc_bypass_enable:
 595              	.LFB10:
 212:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 213:../libopencm3/lib/stm32/common/rcc_common_all.c **** /**
 214:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * RCC Enable Bypass.
 215:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Enable an external clock to bypass the internal clock (high speed and low
 216:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * speed clocks only). The external clock must be enabled (see @ref rcc_osc_on)
 217:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * and the internal clock must be disabled (see @ref rcc_osc_off) for this to
 218:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * have effect.
 219:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @note The LSE clock is in the backup domain and cannot be bypassed until the
 220:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * backup domain write protection has been removed (see @ref
 221:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * pwr_disable_backup_domain_write_protect).
 222:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 223:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 224:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_osc_bypass_enable(enum rcc_osc osc)
 225:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 596              		.loc 1 225 1
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 8
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601 0000 80B4     		push	{r7}
 602              		.cfi_def_cfa_offset 4
 603              		.cfi_offset 7, -4
 604 0002 83B0     		sub	sp, sp, #12
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 608 0006 0346     		mov	r3, r0
 609 0008 FB71     		strb	r3, [r7, #7]
 226:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	switch (osc) {
 610              		.loc 1 226 2
 611 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 612 000c 032B     		cmp	r3, #3
 613 000e 02D0     		beq	.L14
 614 0010 052B     		cmp	r3, #5
 615 0012 07D0     		beq	.L15
 227:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_HSE:
 228:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_CR |= RCC_CR_HSEBYP;
 229:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 230:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_LSE:
 231:../libopencm3/lib/stm32/common/rcc_common_all.c **** #ifdef RCC_CSR_LSEBYP
 232:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_CSR |= RCC_CSR_LSEBYP;
 233:../libopencm3/lib/stm32/common/rcc_common_all.c **** #else
 234:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_BDCR |= RCC_BDCR_LSEBYP;
 235:../libopencm3/lib/stm32/common/rcc_common_all.c **** #endif
 236:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 237:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	default:
 238:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		/* Do nothing, only HSE/LSE allowed here. */
 239:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 616              		.loc 1 239 3
 617 0014 0DE0     		b	.L17
 618              	.L14:
 228:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 619              		.loc 1 228 10
 620 0016 094B     		ldr	r3, .L18
 621 0018 1B68     		ldr	r3, [r3]
 622 001a 084A     		ldr	r2, .L18
 623 001c 43F48023 		orr	r3, r3, #262144
 624 0020 1360     		str	r3, [r2]
 229:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_LSE:
 625              		.loc 1 229 3
 626 0022 06E0     		b	.L17
 627              	.L15:
 234:../libopencm3/lib/stm32/common/rcc_common_all.c **** #endif
 628              		.loc 1 234 12
 629 0024 064B     		ldr	r3, .L18+4
 630 0026 1B68     		ldr	r3, [r3]
 631 0028 054A     		ldr	r2, .L18+4
 632 002a 43F00403 		orr	r3, r3, #4
 633 002e 1360     		str	r3, [r2]
 236:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	default:
 634              		.loc 1 236 3
 635 0030 00BF     		nop
 636              	.L17:
 240:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	}
 241:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 637              		.loc 1 241 1
 638 0032 00BF     		nop
 639 0034 0C37     		adds	r7, r7, #12
 640              		.cfi_def_cfa_offset 4
 641 0036 BD46     		mov	sp, r7
 642              		.cfi_def_cfa_register 13
 643              		@ sp needed
 644 0038 80BC     		pop	{r7}
 645              		.cfi_restore 7
 646              		.cfi_def_cfa_offset 0
 647 003a 7047     		bx	lr
 648              	.L19:
 649              		.align	2
 650              	.L18:
 651 003c 00100240 		.word	1073876992
 652 0040 20100240 		.word	1073877024
 653              		.cfi_endproc
 654              	.LFE10:
 656              		.section	.text.rcc_osc_bypass_disable,"ax",%progbits
 657              		.align	1
 658              		.global	rcc_osc_bypass_disable
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	rcc_osc_bypass_disable:
 665              	.LFB11:
 242:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 243:../libopencm3/lib/stm32/common/rcc_common_all.c **** /**
 244:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * RCC Disable Bypass.
 245:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * Re-enable the internal clock (high speed and low speed clocks only). The
 246:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * internal clock must be disabled (see @ref rcc_osc_off) for this to have
 247:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * effect.
 248:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @note The LSE clock is in the backup domain and cannot have bypass removed
 249:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * until the backup domain write protection has been removed (see @ref
 250:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * pwr_disable_backup_domain_write_protect) or the backup domain has been reset
 251:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * (see @ref rcc_backupdomain_reset).
 252:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 253:../libopencm3/lib/stm32/common/rcc_common_all.c ****  */
 254:../libopencm3/lib/stm32/common/rcc_common_all.c **** void rcc_osc_bypass_disable(enum rcc_osc osc)
 255:../libopencm3/lib/stm32/common/rcc_common_all.c **** {
 666              		.loc 1 255 1
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 8
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 0000 80B4     		push	{r7}
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              		.cfi_def_cfa_register 7
 678 0006 0346     		mov	r3, r0
 679 0008 FB71     		strb	r3, [r7, #7]
 256:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	switch (osc) {
 680              		.loc 1 256 2
 681 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 682 000c 032B     		cmp	r3, #3
 683 000e 02D0     		beq	.L21
 684 0010 052B     		cmp	r3, #5
 685 0012 07D0     		beq	.L22
 257:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_HSE:
 258:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_CR &= ~RCC_CR_HSEBYP;
 259:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 260:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_LSE:
 261:../libopencm3/lib/stm32/common/rcc_common_all.c **** #ifdef RCC_CSR_LSEBYP
 262:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_CSR &= ~RCC_CSR_LSEBYP;
 263:../libopencm3/lib/stm32/common/rcc_common_all.c **** #else
 264:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		RCC_BDCR &= ~RCC_BDCR_LSEBYP;
 265:../libopencm3/lib/stm32/common/rcc_common_all.c **** #endif
 266:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 267:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	default:
 268:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		/* Do nothing, only HSE/LSE allowed here. */
 269:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 686              		.loc 1 269 3
 687 0014 0DE0     		b	.L24
 688              	.L21:
 258:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		break;
 689              		.loc 1 258 10
 690 0016 094B     		ldr	r3, .L25
 691 0018 1B68     		ldr	r3, [r3]
 692 001a 084A     		ldr	r2, .L25
 693 001c 23F48023 		bic	r3, r3, #262144
 694 0020 1360     		str	r3, [r2]
 259:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	case RCC_LSE:
 695              		.loc 1 259 3
 696 0022 06E0     		b	.L24
 697              	.L22:
 264:../libopencm3/lib/stm32/common/rcc_common_all.c **** #endif
 698              		.loc 1 264 12
 699 0024 064B     		ldr	r3, .L25+4
 700 0026 1B68     		ldr	r3, [r3]
 701 0028 054A     		ldr	r2, .L25+4
 702 002a 23F00403 		bic	r3, r3, #4
 703 002e 1360     		str	r3, [r2]
 266:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	default:
 704              		.loc 1 266 3
 705 0030 00BF     		nop
 706              	.L24:
 270:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	}
 271:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 707              		.loc 1 271 1
 708 0032 00BF     		nop
 709 0034 0C37     		adds	r7, r7, #12
 710              		.cfi_def_cfa_offset 4
 711 0036 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 0038 80BC     		pop	{r7}
 715              		.cfi_restore 7
 716              		.cfi_def_cfa_offset 0
 717 003a 7047     		bx	lr
 718              	.L26:
 719              		.align	2
 720              	.L25:
 721 003c 00100240 		.word	1073876992
 722 0040 20100240 		.word	1073877024
 723              		.cfi_endproc
 724              	.LFE11:
 726              		.section	.text.rcc_get_div_from_hpre,"ax",%progbits
 727              		.align	1
 728              		.global	rcc_get_div_from_hpre
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu softvfp
 734              	rcc_get_div_from_hpre:
 735              	.LFB12:
 272:../libopencm3/lib/stm32/common/rcc_common_all.c **** 
 273:../libopencm3/lib/stm32/common/rcc_common_all.c **** /* This is a helper to calculate dividers that go 2/4/8/16/64/128/256/512.
 274:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * These dividers also use the top bit as an "enable". This is typically
 275:../libopencm3/lib/stm32/common/rcc_common_all.c ****  * used for AHB and other system clock prescaler. */
 276:../libopencm3/lib/stm32/common/rcc_common_all.c **** uint16_t rcc_get_div_from_hpre(uint8_t div_val) {
 736              		.loc 1 276 49
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741 0000 80B4     		push	{r7}
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 7, -4
 744 0002 83B0     		sub	sp, sp, #12
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 0346     		mov	r3, r0
 749 0008 FB71     		strb	r3, [r7, #7]
 277:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	if (div_val < 0x8) {
 750              		.loc 1 277 5
 751 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 752 000c 072B     		cmp	r3, #7
 753 000e 01D8     		bhi	.L28
 278:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		return 1;
 754              		.loc 1 278 10
 755 0010 0123     		movs	r3, #1
 756 0012 0FE0     		b	.L29
 757              	.L28:
 279:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	} else if (div_val <= 0x0b /* DIV16 */) {
 758              		.loc 1 279 12
 759 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 760 0016 0B2B     		cmp	r3, #11
 761 0018 06D8     		bhi	.L30
 280:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		return (1U << (div_val - 7));
 762              		.loc 1 280 26
 763 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 764 001c 073B     		subs	r3, r3, #7
 765              		.loc 1 280 14
 766 001e 0122     		movs	r2, #1
 767 0020 02FA03F3 		lsl	r3, r2, r3
 768 0024 9BB2     		uxth	r3, r3
 769 0026 05E0     		b	.L29
 770              	.L30:
 281:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	} else {
 282:../libopencm3/lib/stm32/common/rcc_common_all.c **** 		return (1U << (div_val - 6));
 771              		.loc 1 282 26
 772 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 773 002a 063B     		subs	r3, r3, #6
 774              		.loc 1 282 14
 775 002c 0122     		movs	r2, #1
 776 002e 02FA03F3 		lsl	r3, r2, r3
 777 0032 9BB2     		uxth	r3, r3
 778              	.L29:
 283:../libopencm3/lib/stm32/common/rcc_common_all.c **** 	}
 284:../libopencm3/lib/stm32/common/rcc_common_all.c **** }
 779              		.loc 1 284 1
 780 0034 1846     		mov	r0, r3
 781 0036 0C37     		adds	r7, r7, #12
 782              		.cfi_def_cfa_offset 4
 783 0038 BD46     		mov	sp, r7
 784              		.cfi_def_cfa_register 13
 785              		@ sp needed
 786 003a 80BC     		pop	{r7}
 787              		.cfi_restore 7
 788              		.cfi_def_cfa_offset 0
 789 003c 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE12:
 793              		.text
 794              	.Letext0:
 795              		.file 2 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default
 796              		.file 3 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 797              		.file 4 "/home/src/eclipse-workspace/stm32f1_dfu/libopencm3/include/libopencm3/stm32/f1/rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rcc_common_all.c
     /tmp/ccAO002N.s:16     .text.rcc_peripheral_enable_clock:0000000000000000 $t
     /tmp/ccAO002N.s:24     .text.rcc_peripheral_enable_clock:0000000000000000 rcc_peripheral_enable_clock
     /tmp/ccAO002N.s:63     .text.rcc_peripheral_disable_clock:0000000000000000 $t
     /tmp/ccAO002N.s:70     .text.rcc_peripheral_disable_clock:0000000000000000 rcc_peripheral_disable_clock
     /tmp/ccAO002N.s:111    .text.rcc_peripheral_reset:0000000000000000 $t
     /tmp/ccAO002N.s:118    .text.rcc_peripheral_reset:0000000000000000 rcc_peripheral_reset
     /tmp/ccAO002N.s:156    .text.rcc_peripheral_clear_reset:0000000000000000 $t
     /tmp/ccAO002N.s:163    .text.rcc_peripheral_clear_reset:0000000000000000 rcc_peripheral_clear_reset
     /tmp/ccAO002N.s:204    .text.rcc_periph_clock_enable:0000000000000000 $t
     /tmp/ccAO002N.s:211    .text.rcc_periph_clock_enable:0000000000000000 rcc_periph_clock_enable
     /tmp/ccAO002N.s:264    .text.rcc_periph_clock_disable:0000000000000000 $t
     /tmp/ccAO002N.s:271    .text.rcc_periph_clock_disable:0000000000000000 rcc_periph_clock_disable
     /tmp/ccAO002N.s:326    .text.rcc_periph_reset_pulse:0000000000000000 $t
     /tmp/ccAO002N.s:333    .text.rcc_periph_reset_pulse:0000000000000000 rcc_periph_reset_pulse
     /tmp/ccAO002N.s:410    .text.rcc_periph_reset_hold:0000000000000000 $t
     /tmp/ccAO002N.s:417    .text.rcc_periph_reset_hold:0000000000000000 rcc_periph_reset_hold
     /tmp/ccAO002N.s:470    .text.rcc_periph_reset_release:0000000000000000 $t
     /tmp/ccAO002N.s:477    .text.rcc_periph_reset_release:0000000000000000 rcc_periph_reset_release
     /tmp/ccAO002N.s:532    .text.rcc_set_mco:0000000000000000 $t
     /tmp/ccAO002N.s:539    .text.rcc_set_mco:0000000000000000 rcc_set_mco
     /tmp/ccAO002N.s:582    .text.rcc_set_mco:0000000000000024 $d
     /tmp/ccAO002N.s:587    .text.rcc_osc_bypass_enable:0000000000000000 $t
     /tmp/ccAO002N.s:594    .text.rcc_osc_bypass_enable:0000000000000000 rcc_osc_bypass_enable
     /tmp/ccAO002N.s:651    .text.rcc_osc_bypass_enable:000000000000003c $d
     /tmp/ccAO002N.s:657    .text.rcc_osc_bypass_disable:0000000000000000 $t
     /tmp/ccAO002N.s:664    .text.rcc_osc_bypass_disable:0000000000000000 rcc_osc_bypass_disable
     /tmp/ccAO002N.s:721    .text.rcc_osc_bypass_disable:000000000000003c $d
     /tmp/ccAO002N.s:727    .text.rcc_get_div_from_hpre:0000000000000000 $t
     /tmp/ccAO002N.s:734    .text.rcc_get_div_from_hpre:0000000000000000 rcc_get_div_from_hpre
                           .group:0000000000000000 wm4.0.5634517379934ab330ad1f3d5297a544
                           .group:0000000000000000 wm4.common.h.21.c9066c2f6b12c71b40226ea6107829a4
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.common.h.67.5c568a1f62c8e726909b04e29f9e1fc0
                           .group:0000000000000000 wm4.memorymap.h.21.8c90486dae5eea2d8efddd23fe5d09d9
                           .group:0000000000000000 wm4.memorymap.h.28.604d7358fc0612658e4a83c212b80b62
                           .group:0000000000000000 wm4.rcc.h.41.95732b09c707a3cd05d8e73deda4763f

NO UNDEFINED SYMBOLS
