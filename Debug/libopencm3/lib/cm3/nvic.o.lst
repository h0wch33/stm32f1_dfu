   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"nvic.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.nvic_enable_irq,"ax",%progbits
  16              		.align	1
  17              		.global	nvic_enable_irq
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	nvic_enable_irq:
  25              	.LFB0:
  26              		.file 1 "../libopencm3/lib/cm3/nvic.c"
   1:../libopencm3/lib/cm3/nvic.c **** /*
   2:../libopencm3/lib/cm3/nvic.c ****  * This file is part of the libopencm3 project.
   3:../libopencm3/lib/cm3/nvic.c ****  *
   4:../libopencm3/lib/cm3/nvic.c ****  * Copyright (C) 2010 Thomas Otto <tommi@viadmin.org>
   5:../libopencm3/lib/cm3/nvic.c ****  * Copyright (C) 2012 Fergus Noble <fergusnoble@gmail.com>
   6:../libopencm3/lib/cm3/nvic.c ****  * Copyright (C) 2012 Benjamin Vernoux <titanmkd@gmail.com>
   7:../libopencm3/lib/cm3/nvic.c ****  *
   8:../libopencm3/lib/cm3/nvic.c ****  * This library is free software: you can redistribute it and/or modify
   9:../libopencm3/lib/cm3/nvic.c ****  * it under the terms of the GNU Lesser General Public License as published by
  10:../libopencm3/lib/cm3/nvic.c ****  * the Free Software Foundation, either version 3 of the License, or
  11:../libopencm3/lib/cm3/nvic.c ****  * (at your option) any later version.
  12:../libopencm3/lib/cm3/nvic.c ****  *
  13:../libopencm3/lib/cm3/nvic.c ****  * This library is distributed in the hope that it will be useful,
  14:../libopencm3/lib/cm3/nvic.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:../libopencm3/lib/cm3/nvic.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:../libopencm3/lib/cm3/nvic.c ****  * GNU Lesser General Public License for more details.
  17:../libopencm3/lib/cm3/nvic.c ****  *
  18:../libopencm3/lib/cm3/nvic.c ****  * You should have received a copy of the GNU Lesser General Public License
  19:../libopencm3/lib/cm3/nvic.c ****  * along with this library.  If not, see <http://www.gnu.org/licenses/>.
  20:../libopencm3/lib/cm3/nvic.c ****  */
  21:../libopencm3/lib/cm3/nvic.c **** /** @defgroup CM3_nvic_file NVIC
  22:../libopencm3/lib/cm3/nvic.c ****  *
  23:../libopencm3/lib/cm3/nvic.c ****  * @ingroup CM3_files
  24:../libopencm3/lib/cm3/nvic.c ****  *
  25:../libopencm3/lib/cm3/nvic.c ****  * @brief <b>libopencm3 Cortex Nested Vectored Interrupt Controller</b>
  26:../libopencm3/lib/cm3/nvic.c ****  *
  27:../libopencm3/lib/cm3/nvic.c ****  * @version 1.0.0
  28:../libopencm3/lib/cm3/nvic.c ****  *
  29:../libopencm3/lib/cm3/nvic.c ****  * @author @htmlonly &copy; @endhtmlonly 2010 Thomas Otto <tommi@viadmin.org>
  30:../libopencm3/lib/cm3/nvic.c ****  * @author @htmlonly &copy; @endhtmlonly 2012 Fergus Noble
  31:../libopencm3/lib/cm3/nvic.c ****  * <fergusnoble@gmail.com>
  32:../libopencm3/lib/cm3/nvic.c ****  *
  33:../libopencm3/lib/cm3/nvic.c ****  * @date 18 August 2012
  34:../libopencm3/lib/cm3/nvic.c ****  *
  35:../libopencm3/lib/cm3/nvic.c ****  * Cortex processors provide 14 cortex-defined interrupts (NMI, usage faults,
  36:../libopencm3/lib/cm3/nvic.c ****  * systicks etc.) and varying numbers of implementation defined interrupts
  37:../libopencm3/lib/cm3/nvic.c ****  * (typically peripherial interrupts and DMA).
  38:../libopencm3/lib/cm3/nvic.c ****  *
  39:../libopencm3/lib/cm3/nvic.c ****  * @see Cortex-M3 Devices Generic User Guide
  40:../libopencm3/lib/cm3/nvic.c ****  * @see STM32F10xxx Cortex-M3 programming manual
  41:../libopencm3/lib/cm3/nvic.c ****  *
  42:../libopencm3/lib/cm3/nvic.c ****  * LGPL License Terms @ref lgpl_license
  43:../libopencm3/lib/cm3/nvic.c **** */
  44:../libopencm3/lib/cm3/nvic.c **** /**@{*/
  45:../libopencm3/lib/cm3/nvic.c **** 
  46:../libopencm3/lib/cm3/nvic.c **** #include <libopencm3/cm3/nvic.h>
  47:../libopencm3/lib/cm3/nvic.c **** #include <libopencm3/cm3/scb.h>
  48:../libopencm3/lib/cm3/nvic.c **** 
  49:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
  50:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Enable Interrupt
  51:../libopencm3/lib/cm3/nvic.c ****  *
  52:../libopencm3/lib/cm3/nvic.c ****  * Enables a user interrupt.
  53:../libopencm3/lib/cm3/nvic.c ****  *
  54:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
  55:../libopencm3/lib/cm3/nvic.c ****  */
  56:../libopencm3/lib/cm3/nvic.c **** 
  57:../libopencm3/lib/cm3/nvic.c **** void nvic_enable_irq(uint8_t irqn)
  58:../libopencm3/lib/cm3/nvic.c **** {
  27              		.loc 1 58 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 0346     		mov	r3, r0
  40 0008 FB71     		strb	r3, [r7, #7]
  59:../libopencm3/lib/cm3/nvic.c **** 	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
  41              		.loc 1 59 37
  42 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  43 000c 03F01F03 		and	r3, r3, #31
  44              		.loc 1 59 28
  45 0010 0122     		movs	r2, #1
  46 0012 9A40     		lsls	r2, r2, r3
  47              		.loc 1 59 2
  48 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  49 0016 5B09     		lsrs	r3, r3, #5
  50 0018 DBB2     		uxtb	r3, r3
  51 001a 9B00     		lsls	r3, r3, #2
  52 001c 03F16043 		add	r3, r3, #-536870912
  53 0020 03F56143 		add	r3, r3, #57600
  54              		.loc 1 59 23
  55 0024 1A60     		str	r2, [r3]
  60:../libopencm3/lib/cm3/nvic.c **** }
  56              		.loc 1 60 1
  57 0026 00BF     		nop
  58 0028 0C37     		adds	r7, r7, #12
  59              		.cfi_def_cfa_offset 4
  60 002a BD46     		mov	sp, r7
  61              		.cfi_def_cfa_register 13
  62              		@ sp needed
  63 002c 80BC     		pop	{r7}
  64              		.cfi_restore 7
  65              		.cfi_def_cfa_offset 0
  66 002e 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE0:
  70              		.section	.text.nvic_disable_irq,"ax",%progbits
  71              		.align	1
  72              		.global	nvic_disable_irq
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	nvic_disable_irq:
  79              	.LFB1:
  61:../libopencm3/lib/cm3/nvic.c **** 
  62:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
  63:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Disable Interrupt
  64:../libopencm3/lib/cm3/nvic.c ****  *
  65:../libopencm3/lib/cm3/nvic.c ****  * Disables a user interrupt.
  66:../libopencm3/lib/cm3/nvic.c ****  *
  67:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
  68:../libopencm3/lib/cm3/nvic.c ****  */
  69:../libopencm3/lib/cm3/nvic.c **** 
  70:../libopencm3/lib/cm3/nvic.c **** void nvic_disable_irq(uint8_t irqn)
  71:../libopencm3/lib/cm3/nvic.c **** {
  80              		.loc 1 71 1
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0000 80B4     		push	{r7}
  86              		.cfi_def_cfa_offset 4
  87              		.cfi_offset 7, -4
  88 0002 83B0     		sub	sp, sp, #12
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  92 0006 0346     		mov	r3, r0
  93 0008 FB71     		strb	r3, [r7, #7]
  72:../libopencm3/lib/cm3/nvic.c **** 	NVIC_ICER(irqn / 32) = (1 << (irqn % 32));
  94              		.loc 1 72 37
  95 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  96 000c 03F01F03 		and	r3, r3, #31
  97              		.loc 1 72 28
  98 0010 0122     		movs	r2, #1
  99 0012 9A40     		lsls	r2, r2, r3
 100              		.loc 1 72 2
 101 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 102 0016 5B09     		lsrs	r3, r3, #5
 103 0018 DBB2     		uxtb	r3, r3
 104 001a 9B00     		lsls	r3, r3, #2
 105 001c 1946     		mov	r1, r3
 106 001e 044B     		ldr	r3, .L3
 107 0020 0B44     		add	r3, r3, r1
 108              		.loc 1 72 23
 109 0022 1A60     		str	r2, [r3]
  73:../libopencm3/lib/cm3/nvic.c **** }
 110              		.loc 1 73 1
 111 0024 00BF     		nop
 112 0026 0C37     		adds	r7, r7, #12
 113              		.cfi_def_cfa_offset 4
 114 0028 BD46     		mov	sp, r7
 115              		.cfi_def_cfa_register 13
 116              		@ sp needed
 117 002a 80BC     		pop	{r7}
 118              		.cfi_restore 7
 119              		.cfi_def_cfa_offset 0
 120 002c 7047     		bx	lr
 121              	.L4:
 122 002e 00BF     		.align	2
 123              	.L3:
 124 0030 80E100E0 		.word	-536813184
 125              		.cfi_endproc
 126              	.LFE1:
 128              		.section	.text.nvic_get_pending_irq,"ax",%progbits
 129              		.align	1
 130              		.global	nvic_get_pending_irq
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 136              	nvic_get_pending_irq:
 137              	.LFB2:
  74:../libopencm3/lib/cm3/nvic.c **** 
  75:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
  76:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Return Pending Interrupt
  77:../libopencm3/lib/cm3/nvic.c ****  *
  78:../libopencm3/lib/cm3/nvic.c ****  * True if the interrupt has occurred and is waiting for service.
  79:../libopencm3/lib/cm3/nvic.c ****  *
  80:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
  81:../libopencm3/lib/cm3/nvic.c ****  * @return Boolean. Interrupt pending.
  82:../libopencm3/lib/cm3/nvic.c ****  */
  83:../libopencm3/lib/cm3/nvic.c **** 
  84:../libopencm3/lib/cm3/nvic.c **** uint8_t nvic_get_pending_irq(uint8_t irqn)
  85:../libopencm3/lib/cm3/nvic.c **** {
 138              		.loc 1 85 1
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143 0000 80B4     		push	{r7}
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 83B0     		sub	sp, sp, #12
 147              		.cfi_def_cfa_offset 16
 148 0004 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 150 0006 0346     		mov	r3, r0
 151 0008 FB71     		strb	r3, [r7, #7]
  86:../libopencm3/lib/cm3/nvic.c **** 	return NVIC_ISPR(irqn / 32) & (1 << (irqn % 32)) ? 1 : 0;
 152              		.loc 1 86 9
 153 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 154 000c 5B09     		lsrs	r3, r3, #5
 155 000e DBB2     		uxtb	r3, r3
 156 0010 9B00     		lsls	r3, r3, #2
 157 0012 03F16043 		add	r3, r3, #-536870912
 158 0016 03F56243 		add	r3, r3, #57856
 159 001a 1B68     		ldr	r3, [r3]
 160              		.loc 1 86 44
 161 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 162 001e 02F01F02 		and	r2, r2, #31
 163              		.loc 1 86 35
 164 0022 0121     		movs	r1, #1
 165 0024 01FA02F2 		lsl	r2, r1, r2
 166              		.loc 1 86 30
 167 0028 1340     		ands	r3, r3, r2
 168              		.loc 1 86 55
 169 002a 002B     		cmp	r3, #0
 170 002c 14BF     		ite	ne
 171 002e 0123     		movne	r3, #1
 172 0030 0023     		moveq	r3, #0
 173 0032 DBB2     		uxtb	r3, r3
  87:../libopencm3/lib/cm3/nvic.c **** }
 174              		.loc 1 87 1
 175 0034 1846     		mov	r0, r3
 176 0036 0C37     		adds	r7, r7, #12
 177              		.cfi_def_cfa_offset 4
 178 0038 BD46     		mov	sp, r7
 179              		.cfi_def_cfa_register 13
 180              		@ sp needed
 181 003a 80BC     		pop	{r7}
 182              		.cfi_restore 7
 183              		.cfi_def_cfa_offset 0
 184 003c 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE2:
 188              		.section	.text.nvic_set_pending_irq,"ax",%progbits
 189              		.align	1
 190              		.global	nvic_set_pending_irq
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	nvic_set_pending_irq:
 197              	.LFB3:
  88:../libopencm3/lib/cm3/nvic.c **** 
  89:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
  90:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Set Pending Interrupt
  91:../libopencm3/lib/cm3/nvic.c ****  *
  92:../libopencm3/lib/cm3/nvic.c ****  * Force a user interrupt to a pending state. This has no effect if the
  93:../libopencm3/lib/cm3/nvic.c ****  * interrupt is already pending.
  94:../libopencm3/lib/cm3/nvic.c ****  *
  95:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
  96:../libopencm3/lib/cm3/nvic.c ****  */
  97:../libopencm3/lib/cm3/nvic.c **** 
  98:../libopencm3/lib/cm3/nvic.c **** void nvic_set_pending_irq(uint8_t irqn)
  99:../libopencm3/lib/cm3/nvic.c **** {
 198              		.loc 1 99 1
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 203 0000 80B4     		push	{r7}
 204              		.cfi_def_cfa_offset 4
 205              		.cfi_offset 7, -4
 206 0002 83B0     		sub	sp, sp, #12
 207              		.cfi_def_cfa_offset 16
 208 0004 00AF     		add	r7, sp, #0
 209              		.cfi_def_cfa_register 7
 210 0006 0346     		mov	r3, r0
 211 0008 FB71     		strb	r3, [r7, #7]
 100:../libopencm3/lib/cm3/nvic.c **** 	NVIC_ISPR(irqn / 32) = (1 << (irqn % 32));
 212              		.loc 1 100 37
 213 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 214 000c 03F01F03 		and	r3, r3, #31
 215              		.loc 1 100 28
 216 0010 0122     		movs	r2, #1
 217 0012 9A40     		lsls	r2, r2, r3
 218              		.loc 1 100 2
 219 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 220 0016 5B09     		lsrs	r3, r3, #5
 221 0018 DBB2     		uxtb	r3, r3
 222 001a 9B00     		lsls	r3, r3, #2
 223 001c 03F16043 		add	r3, r3, #-536870912
 224 0020 03F56243 		add	r3, r3, #57856
 225              		.loc 1 100 23
 226 0024 1A60     		str	r2, [r3]
 101:../libopencm3/lib/cm3/nvic.c **** }
 227              		.loc 1 101 1
 228 0026 00BF     		nop
 229 0028 0C37     		adds	r7, r7, #12
 230              		.cfi_def_cfa_offset 4
 231 002a BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 002c 80BC     		pop	{r7}
 235              		.cfi_restore 7
 236              		.cfi_def_cfa_offset 0
 237 002e 7047     		bx	lr
 238              		.cfi_endproc
 239              	.LFE3:
 241              		.section	.text.nvic_clear_pending_irq,"ax",%progbits
 242              		.align	1
 243              		.global	nvic_clear_pending_irq
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu softvfp
 249              	nvic_clear_pending_irq:
 250              	.LFB4:
 102:../libopencm3/lib/cm3/nvic.c **** 
 103:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
 104:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Clear Pending Interrupt
 105:../libopencm3/lib/cm3/nvic.c ****  *
 106:../libopencm3/lib/cm3/nvic.c ****  * Force remove a user interrupt from a pending state. This has no effect if
 107:../libopencm3/lib/cm3/nvic.c ****  * the interrupt is actively being serviced.
 108:../libopencm3/lib/cm3/nvic.c ****  *
 109:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 110:../libopencm3/lib/cm3/nvic.c ****  */
 111:../libopencm3/lib/cm3/nvic.c **** 
 112:../libopencm3/lib/cm3/nvic.c **** void nvic_clear_pending_irq(uint8_t irqn)
 113:../libopencm3/lib/cm3/nvic.c **** {
 251              		.loc 1 113 1
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 8
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256 0000 80B4     		push	{r7}
 257              		.cfi_def_cfa_offset 4
 258              		.cfi_offset 7, -4
 259 0002 83B0     		sub	sp, sp, #12
 260              		.cfi_def_cfa_offset 16
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 0346     		mov	r3, r0
 264 0008 FB71     		strb	r3, [r7, #7]
 114:../libopencm3/lib/cm3/nvic.c **** 	NVIC_ICPR(irqn / 32) = (1 << (irqn % 32));
 265              		.loc 1 114 37
 266 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 267 000c 03F01F03 		and	r3, r3, #31
 268              		.loc 1 114 28
 269 0010 0122     		movs	r2, #1
 270 0012 9A40     		lsls	r2, r2, r3
 271              		.loc 1 114 2
 272 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 273 0016 5B09     		lsrs	r3, r3, #5
 274 0018 DBB2     		uxtb	r3, r3
 275 001a 9B00     		lsls	r3, r3, #2
 276 001c 1946     		mov	r1, r3
 277 001e 044B     		ldr	r3, .L9
 278 0020 0B44     		add	r3, r3, r1
 279              		.loc 1 114 23
 280 0022 1A60     		str	r2, [r3]
 115:../libopencm3/lib/cm3/nvic.c **** }
 281              		.loc 1 115 1
 282 0024 00BF     		nop
 283 0026 0C37     		adds	r7, r7, #12
 284              		.cfi_def_cfa_offset 4
 285 0028 BD46     		mov	sp, r7
 286              		.cfi_def_cfa_register 13
 287              		@ sp needed
 288 002a 80BC     		pop	{r7}
 289              		.cfi_restore 7
 290              		.cfi_def_cfa_offset 0
 291 002c 7047     		bx	lr
 292              	.L10:
 293 002e 00BF     		.align	2
 294              	.L9:
 295 0030 80E200E0 		.word	-536812928
 296              		.cfi_endproc
 297              	.LFE4:
 299              		.section	.text.nvic_get_irq_enabled,"ax",%progbits
 300              		.align	1
 301              		.global	nvic_get_irq_enabled
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu softvfp
 307              	nvic_get_irq_enabled:
 308              	.LFB5:
 116:../libopencm3/lib/cm3/nvic.c **** 
 117:../libopencm3/lib/cm3/nvic.c **** 
 118:../libopencm3/lib/cm3/nvic.c **** 
 119:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
 120:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Return Enabled Interrupt
 121:../libopencm3/lib/cm3/nvic.c ****  *
 122:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 123:../libopencm3/lib/cm3/nvic.c ****  * @return Boolean. Interrupt enabled.
 124:../libopencm3/lib/cm3/nvic.c ****  */
 125:../libopencm3/lib/cm3/nvic.c **** 
 126:../libopencm3/lib/cm3/nvic.c **** uint8_t nvic_get_irq_enabled(uint8_t irqn)
 127:../libopencm3/lib/cm3/nvic.c **** {
 309              		.loc 1 127 1
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 8
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314 0000 80B4     		push	{r7}
 315              		.cfi_def_cfa_offset 4
 316              		.cfi_offset 7, -4
 317 0002 83B0     		sub	sp, sp, #12
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              		.cfi_def_cfa_register 7
 321 0006 0346     		mov	r3, r0
 322 0008 FB71     		strb	r3, [r7, #7]
 128:../libopencm3/lib/cm3/nvic.c **** 	return NVIC_ISER(irqn / 32) & (1 << (irqn % 32)) ? 1 : 0;
 323              		.loc 1 128 9
 324 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 325 000c 5B09     		lsrs	r3, r3, #5
 326 000e DBB2     		uxtb	r3, r3
 327 0010 9B00     		lsls	r3, r3, #2
 328 0012 03F16043 		add	r3, r3, #-536870912
 329 0016 03F56143 		add	r3, r3, #57600
 330 001a 1B68     		ldr	r3, [r3]
 331              		.loc 1 128 44
 332 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 333 001e 02F01F02 		and	r2, r2, #31
 334              		.loc 1 128 35
 335 0022 0121     		movs	r1, #1
 336 0024 01FA02F2 		lsl	r2, r1, r2
 337              		.loc 1 128 30
 338 0028 1340     		ands	r3, r3, r2
 339              		.loc 1 128 55
 340 002a 002B     		cmp	r3, #0
 341 002c 14BF     		ite	ne
 342 002e 0123     		movne	r3, #1
 343 0030 0023     		moveq	r3, #0
 344 0032 DBB2     		uxtb	r3, r3
 129:../libopencm3/lib/cm3/nvic.c **** }
 345              		.loc 1 129 1
 346 0034 1846     		mov	r0, r3
 347 0036 0C37     		adds	r7, r7, #12
 348              		.cfi_def_cfa_offset 4
 349 0038 BD46     		mov	sp, r7
 350              		.cfi_def_cfa_register 13
 351              		@ sp needed
 352 003a 80BC     		pop	{r7}
 353              		.cfi_restore 7
 354              		.cfi_def_cfa_offset 0
 355 003c 7047     		bx	lr
 356              		.cfi_endproc
 357              	.LFE5:
 359              		.section	.text.nvic_set_priority,"ax",%progbits
 360              		.align	1
 361              		.global	nvic_set_priority
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu softvfp
 367              	nvic_set_priority:
 368              	.LFB6:
 130:../libopencm3/lib/cm3/nvic.c **** 
 131:../libopencm3/lib/cm3/nvic.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 132:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Set Interrupt Priority
 133:../libopencm3/lib/cm3/nvic.c ****  *
 134:../libopencm3/lib/cm3/nvic.c ****  * There are 16 priority levels only, given by the upper four bits of the
 135:../libopencm3/lib/cm3/nvic.c ****  * priority byte, as required by ARM standards. The priority levels are
 136:../libopencm3/lib/cm3/nvic.c ****  * interpreted according to the pre-emptive priority grouping set in the
 137:../libopencm3/lib/cm3/nvic.c ****  * SCB Application Interrupt and Reset Control Register (SCB_AIRCR), as done
 138:../libopencm3/lib/cm3/nvic.c ****  * in @ref scb_set_priority_grouping,
 139:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 140:../libopencm3/lib/cm3/nvic.c ****  * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 141:../libopencm3/lib/cm3/nvic.c ****  */
 142:../libopencm3/lib/cm3/nvic.c **** #else
 143:../libopencm3/lib/cm3/nvic.c **** /** NVIC Set Interrupt Priority.
 144:../libopencm3/lib/cm3/nvic.c ****  *
 145:../libopencm3/lib/cm3/nvic.c ****  * There are 4 priority levels only, given by the upper two bits of the
 146:../libopencm3/lib/cm3/nvic.c ****  * priority byte, as required by ARM standards. No grouping available.
 147:../libopencm3/lib/cm3/nvic.c ****  *
 148:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 149:../libopencm3/lib/cm3/nvic.c ****  * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 150:../libopencm3/lib/cm3/nvic.c ****  */
 151:../libopencm3/lib/cm3/nvic.c **** #endif
 152:../libopencm3/lib/cm3/nvic.c **** void nvic_set_priority(uint8_t irqn, uint8_t priority)
 153:../libopencm3/lib/cm3/nvic.c **** {
 369              		.loc 1 153 1
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 8
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374 0000 80B4     		push	{r7}
 375              		.cfi_def_cfa_offset 4
 376              		.cfi_offset 7, -4
 377 0002 83B0     		sub	sp, sp, #12
 378              		.cfi_def_cfa_offset 16
 379 0004 00AF     		add	r7, sp, #0
 380              		.cfi_def_cfa_register 7
 381 0006 0346     		mov	r3, r0
 382 0008 0A46     		mov	r2, r1
 383 000a FB71     		strb	r3, [r7, #7]
 384 000c 1346     		mov	r3, r2
 385 000e BB71     		strb	r3, [r7, #6]
 154:../libopencm3/lib/cm3/nvic.c **** 	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
 155:../libopencm3/lib/cm3/nvic.c **** 	 * negative interrupt numbers assigned to the system interrupts. better
 156:../libopencm3/lib/cm3/nvic.c **** 	 * handling would mean signed integers. */
 157:../libopencm3/lib/cm3/nvic.c **** 	if (irqn >= NVIC_IRQ_COUNT) {
 386              		.loc 1 157 5
 387 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 388 0012 432B     		cmp	r3, #67
 389 0014 08D9     		bls	.L14
 158:../libopencm3/lib/cm3/nvic.c **** 		/* Cortex-M  system interrupts */
 159:../libopencm3/lib/cm3/nvic.c **** #if defined(__ARM_ARCH_6M__)
 160:../libopencm3/lib/cm3/nvic.c **** 		/* ARM6M supports only 32bit word access to SHPR registers */
 161:../libopencm3/lib/cm3/nvic.c **** 		irqn = (irqn & 0xF) - 4;
 162:../libopencm3/lib/cm3/nvic.c **** 		uint8_t shift = (irqn & 0x3) << 3;
 163:../libopencm3/lib/cm3/nvic.c **** 		uint8_t reg = irqn >> 2;
 164:../libopencm3/lib/cm3/nvic.c **** 		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 165:../libopencm3/lib/cm3/nvic.c **** 				((uint32_t) priority) << shift);
 166:../libopencm3/lib/cm3/nvic.c **** #else
 167:../libopencm3/lib/cm3/nvic.c **** 		SCB_SHPR((irqn & 0xF) - 4) = priority;
 390              		.loc 1 167 3
 391 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 392 0018 03F00F02 		and	r2, r3, #15
 393 001c 094B     		ldr	r3, .L17
 394 001e 1344     		add	r3, r3, r2
 395 0020 1A46     		mov	r2, r3
 396              		.loc 1 167 30
 397 0022 BB79     		ldrb	r3, [r7, #6]
 398 0024 1370     		strb	r3, [r2]
 168:../libopencm3/lib/cm3/nvic.c **** #endif
 169:../libopencm3/lib/cm3/nvic.c **** 	} else {
 170:../libopencm3/lib/cm3/nvic.c **** 		/* Device specific interrupts */
 171:../libopencm3/lib/cm3/nvic.c **** #if defined(__ARM_ARCH_6M__)
 172:../libopencm3/lib/cm3/nvic.c **** 		/* ARM6M supports only 32bit word access to IPR registers */
 173:../libopencm3/lib/cm3/nvic.c **** 		uint8_t shift = (irqn & 0x3) << 3;
 174:../libopencm3/lib/cm3/nvic.c **** 		uint8_t reg = irqn >> 2;
 175:../libopencm3/lib/cm3/nvic.c **** 		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 176:../libopencm3/lib/cm3/nvic.c **** 				((uint32_t) priority) << shift);
 177:../libopencm3/lib/cm3/nvic.c **** #else
 178:../libopencm3/lib/cm3/nvic.c **** 		NVIC_IPR(irqn) = priority;
 179:../libopencm3/lib/cm3/nvic.c **** #endif
 180:../libopencm3/lib/cm3/nvic.c **** 	}
 181:../libopencm3/lib/cm3/nvic.c **** }
 399              		.loc 1 181 1
 400 0026 07E0     		b	.L16
 401              	.L14:
 178:../libopencm3/lib/cm3/nvic.c **** #endif
 402              		.loc 1 178 3
 403 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 404 002a 03F16043 		add	r3, r3, #-536870912
 405 002e 03F56443 		add	r3, r3, #58368
 406 0032 1A46     		mov	r2, r3
 178:../libopencm3/lib/cm3/nvic.c **** #endif
 407              		.loc 1 178 18
 408 0034 BB79     		ldrb	r3, [r7, #6]
 409 0036 1370     		strb	r3, [r2]
 410              	.L16:
 411              		.loc 1 181 1
 412 0038 00BF     		nop
 413 003a 0C37     		adds	r7, r7, #12
 414              		.cfi_def_cfa_offset 4
 415 003c BD46     		mov	sp, r7
 416              		.cfi_def_cfa_register 13
 417              		@ sp needed
 418 003e 80BC     		pop	{r7}
 419              		.cfi_restore 7
 420              		.cfi_def_cfa_offset 0
 421 0040 7047     		bx	lr
 422              	.L18:
 423 0042 00BF     		.align	2
 424              	.L17:
 425 0044 14ED00E0 		.word	-536810220
 426              		.cfi_endproc
 427              	.LFE6:
 429              		.section	.text.nvic_get_active_irq,"ax",%progbits
 430              		.align	1
 431              		.global	nvic_get_active_irq
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu softvfp
 437              	nvic_get_active_irq:
 438              	.LFB7:
 182:../libopencm3/lib/cm3/nvic.c **** 
 183:../libopencm3/lib/cm3/nvic.c **** /* Those are defined only on CM3 or CM4 */
 184:../libopencm3/lib/cm3/nvic.c **** #if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
 185:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
 186:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Return Active Interrupt
 187:../libopencm3/lib/cm3/nvic.c ****  *
 188:../libopencm3/lib/cm3/nvic.c ****  * Interrupt has occurred and is currently being serviced.
 189:../libopencm3/lib/cm3/nvic.c ****  *
 190:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 191:../libopencm3/lib/cm3/nvic.c ****  * @return Boolean. Interrupt active.
 192:../libopencm3/lib/cm3/nvic.c ****  */
 193:../libopencm3/lib/cm3/nvic.c **** 
 194:../libopencm3/lib/cm3/nvic.c **** uint8_t nvic_get_active_irq(uint8_t irqn)
 195:../libopencm3/lib/cm3/nvic.c **** {
 439              		.loc 1 195 1
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0000 80B4     		push	{r7}
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 7, -4
 447 0002 83B0     		sub	sp, sp, #12
 448              		.cfi_def_cfa_offset 16
 449 0004 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 451 0006 0346     		mov	r3, r0
 452 0008 FB71     		strb	r3, [r7, #7]
 196:../libopencm3/lib/cm3/nvic.c **** 	return NVIC_IABR(irqn / 32) & (1 << (irqn % 32)) ? 1 : 0;
 453              		.loc 1 196 9
 454 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 455 000c 5B09     		lsrs	r3, r3, #5
 456 000e DBB2     		uxtb	r3, r3
 457 0010 9B00     		lsls	r3, r3, #2
 458 0012 03F16043 		add	r3, r3, #-536870912
 459 0016 03F56343 		add	r3, r3, #58112
 460 001a 1B68     		ldr	r3, [r3]
 461              		.loc 1 196 44
 462 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 463 001e 02F01F02 		and	r2, r2, #31
 464              		.loc 1 196 35
 465 0022 0121     		movs	r1, #1
 466 0024 01FA02F2 		lsl	r2, r1, r2
 467              		.loc 1 196 30
 468 0028 1340     		ands	r3, r3, r2
 469              		.loc 1 196 55
 470 002a 002B     		cmp	r3, #0
 471 002c 14BF     		ite	ne
 472 002e 0123     		movne	r3, #1
 473 0030 0023     		moveq	r3, #0
 474 0032 DBB2     		uxtb	r3, r3
 197:../libopencm3/lib/cm3/nvic.c **** }
 475              		.loc 1 197 1
 476 0034 1846     		mov	r0, r3
 477 0036 0C37     		adds	r7, r7, #12
 478              		.cfi_def_cfa_offset 4
 479 0038 BD46     		mov	sp, r7
 480              		.cfi_def_cfa_register 13
 481              		@ sp needed
 482 003a 80BC     		pop	{r7}
 483              		.cfi_restore 7
 484              		.cfi_def_cfa_offset 0
 485 003c 7047     		bx	lr
 486              		.cfi_endproc
 487              	.LFE7:
 489              		.section	.text.nvic_generate_software_interrupt,"ax",%progbits
 490              		.align	1
 491              		.global	nvic_generate_software_interrupt
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 495              		.fpu softvfp
 497              	nvic_generate_software_interrupt:
 498              	.LFB8:
 198:../libopencm3/lib/cm3/nvic.c **** 
 199:../libopencm3/lib/cm3/nvic.c **** /*---------------------------------------------------------------------------*/
 200:../libopencm3/lib/cm3/nvic.c **** /** @brief NVIC Software Trigger Interrupt
 201:../libopencm3/lib/cm3/nvic.c ****  *
 202:../libopencm3/lib/cm3/nvic.c ****  * Generate an interrupt from software. This has no effect for unprivileged
 203:../libopencm3/lib/cm3/nvic.c ****  * access unless the privilege level has been elevated through the System
 204:../libopencm3/lib/cm3/nvic.c ****  * Control Registers.
 205:../libopencm3/lib/cm3/nvic.c ****  *
 206:../libopencm3/lib/cm3/nvic.c ****  * @param[in] irqn Unsigned int16. Interrupt number (0 ... 239)
 207:../libopencm3/lib/cm3/nvic.c ****  */
 208:../libopencm3/lib/cm3/nvic.c **** 
 209:../libopencm3/lib/cm3/nvic.c **** void nvic_generate_software_interrupt(uint16_t irqn)
 210:../libopencm3/lib/cm3/nvic.c **** {
 499              		.loc 1 210 1
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 80B4     		push	{r7}
 505              		.cfi_def_cfa_offset 4
 506              		.cfi_offset 7, -4
 507 0002 83B0     		sub	sp, sp, #12
 508              		.cfi_def_cfa_offset 16
 509 0004 00AF     		add	r7, sp, #0
 510              		.cfi_def_cfa_register 7
 511 0006 0346     		mov	r3, r0
 512 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 211:../libopencm3/lib/cm3/nvic.c **** 	if (irqn <= 239) {
 513              		.loc 1 211 5
 514 000a FB88     		ldrh	r3, [r7, #6]
 515 000c EF2B     		cmp	r3, #239
 516 000e 05D8     		bhi	.L23
 212:../libopencm3/lib/cm3/nvic.c **** 		NVIC_STIR |= irqn;
 517              		.loc 1 212 13
 518 0010 054B     		ldr	r3, .L24
 519 0012 1A68     		ldr	r2, [r3]
 520 0014 FB88     		ldrh	r3, [r7, #6]
 521 0016 0449     		ldr	r1, .L24
 522 0018 1343     		orrs	r3, r3, r2
 523 001a 0B60     		str	r3, [r1]
 524              	.L23:
 213:../libopencm3/lib/cm3/nvic.c **** 	}
 214:../libopencm3/lib/cm3/nvic.c **** }
 525              		.loc 1 214 1
 526 001c 00BF     		nop
 527 001e 0C37     		adds	r7, r7, #12
 528              		.cfi_def_cfa_offset 4
 529 0020 BD46     		mov	sp, r7
 530              		.cfi_def_cfa_register 13
 531              		@ sp needed
 532 0022 80BC     		pop	{r7}
 533              		.cfi_restore 7
 534              		.cfi_def_cfa_offset 0
 535 0024 7047     		bx	lr
 536              	.L25:
 537 0026 00BF     		.align	2
 538              	.L24:
 539 0028 00EF00E0 		.word	-536809728
 540              		.cfi_endproc
 541              	.LFE8:
 543              		.text
 544              	.Letext0:
 545              		.file 2 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default
 546              		.file 3 "/home/toolchain/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 nvic.c
     /tmp/ccyzKnDG.s:16     .text.nvic_enable_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:24     .text.nvic_enable_irq:0000000000000000 nvic_enable_irq
     /tmp/ccyzKnDG.s:71     .text.nvic_disable_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:78     .text.nvic_disable_irq:0000000000000000 nvic_disable_irq
     /tmp/ccyzKnDG.s:124    .text.nvic_disable_irq:0000000000000030 $d
     /tmp/ccyzKnDG.s:129    .text.nvic_get_pending_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:136    .text.nvic_get_pending_irq:0000000000000000 nvic_get_pending_irq
     /tmp/ccyzKnDG.s:189    .text.nvic_set_pending_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:196    .text.nvic_set_pending_irq:0000000000000000 nvic_set_pending_irq
     /tmp/ccyzKnDG.s:242    .text.nvic_clear_pending_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:249    .text.nvic_clear_pending_irq:0000000000000000 nvic_clear_pending_irq
     /tmp/ccyzKnDG.s:295    .text.nvic_clear_pending_irq:0000000000000030 $d
     /tmp/ccyzKnDG.s:300    .text.nvic_get_irq_enabled:0000000000000000 $t
     /tmp/ccyzKnDG.s:307    .text.nvic_get_irq_enabled:0000000000000000 nvic_get_irq_enabled
     /tmp/ccyzKnDG.s:360    .text.nvic_set_priority:0000000000000000 $t
     /tmp/ccyzKnDG.s:367    .text.nvic_set_priority:0000000000000000 nvic_set_priority
     /tmp/ccyzKnDG.s:425    .text.nvic_set_priority:0000000000000044 $d
     /tmp/ccyzKnDG.s:430    .text.nvic_get_active_irq:0000000000000000 $t
     /tmp/ccyzKnDG.s:437    .text.nvic_get_active_irq:0000000000000000 nvic_get_active_irq
     /tmp/ccyzKnDG.s:490    .text.nvic_generate_software_interrupt:0000000000000000 $t
     /tmp/ccyzKnDG.s:497    .text.nvic_generate_software_interrupt:0000000000000000 nvic_generate_software_interrupt
     /tmp/ccyzKnDG.s:539    .text.nvic_generate_software_interrupt:0000000000000028 $d
                           .group:0000000000000000 wm4.0.5634517379934ab330ad1f3d5297a544
                           .group:0000000000000000 wm4.common.h.21.c9066c2f6b12c71b40226ea6107829a4
                           .group:0000000000000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.common.h.67.5c568a1f62c8e726909b04e29f9e1fc0
                           .group:0000000000000000 wm4.memorymap.h.21.8c90486dae5eea2d8efddd23fe5d09d9
                           .group:0000000000000000 wm4.nvic.h.51.8418129e2fbcb84c30a1158d57ddea14
                           .group:0000000000000000 wm4.nvic.h.16.2afd64cac85d5d54f32177e020bf398f
                           .group:0000000000000000 wm4.scb.h.22.61c22bf8b010bccd598da2df01a4e130

NO UNDEFINED SYMBOLS
